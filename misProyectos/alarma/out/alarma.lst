
misProyectos/alarma/out/alarma.elf:     file format elf32-littlearm
misProyectos/alarma/out/alarma.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002935

Program Header:
0x70000001 off    0x0000b394 vaddr 0x1a003394 paddr 0x1a003394 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x0000034c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x0000339c memsz 0x0000339c flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a00339c align 2**15
         filesz 0x0000016c memsz 0x0000016c flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003394  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  10000000  1a00339c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0001016c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0001016c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0001016c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0001016c  2**2
                  CONTENTS
  6 .bss          000001dc  10000170  10000170  00000170  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0001016c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0001016c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0001016c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0001016c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a003394  1a003394  0000b394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0001016c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0001016c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0001016c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0001016c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0001016c  2**2
                  CONTENTS
 17 .noinit       00000000  1000034c  1000034c  0001016c  2**2
                  CONTENTS
 18 .debug_info   00010043  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003133  00000000  00000000  000201af  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00004def  00000000  00000000  000232e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000420  00000000  00000000  000280d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000b8d1  00000000  00000000  000284f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000e17b  00000000  00000000  00033dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001c7d0  00000000  00000000  00041f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  0005e70d  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  0005e77d  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00001390  00000000  00000000  0005e7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 000000a0  00000000  00000000  0005fb48  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000170 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003394 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000034c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 colas_datos.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 cooperativeOs_isr.c
00000000 l    df *ABS*	00000000 leds.c
1a0004c0 l     F .text	00000022 AsciiAEntero
10000170 l     O .bss	00000001 ledState
00000000 l    df *ABS*	00000000 cooperativeOs_scheduler.c
1a000718 l     F .text	00000008 schedulerGoToSleep
00000000 l    df *ABS*	00000000 main.c
10000030 l     O .data	000000f5 menu
1000017d l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000a38 l     F .text	00000002 errorOcurred
1a000a3c l     F .text	00000002 doNothing
1a003060 l     O .text	00000030 timer_sd
10000128 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_convert.c
10000180 l     O .bss	00000011 result.10353
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00125c l     F .text	0000002c gpioObtainPinConfig
00000000 l    df *ABS*	00000000 board.c
1a0014ec l     F .text	00000040 Board_LED_Init
1a003228 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003244 l     O .text	00000060 pinmuxing
1a0032a4 l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0017c4 l     F .text	0000002c Chip_UART_GetIndex
1a0017f0 l     F .text	00000048 Chip_UART_ABIntHandler
1a0032b0 l     O .text	00000008 UART_PClock
1a0032b8 l     O .text	00000008 UART_BClock
10000194 l     O .bss	00000001 ABsyncSts
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a001d24 l     F .text	00000034 Chip_USB_PllSetup
1a0032c0 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001de8 l     F .text	000000a8 pll_calc_divs
1a001e90 l     F .text	00000104 pll_get_frac
1a001f94 l     F .text	00000024 Chip_Clock_TestMainPLLMultiplier
1a001fb8 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0023e0 l     F .text	00000022 Chip_Clock_GetDivRate
1a0032d4 l     O .text	0000006c periph_to_base
10000198 l     O .bss	00000008 audio_usb_pll_freq
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00334c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a002850 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alarma.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a00339c l       .ARM.exidx	00000000 __exidx_end
1a00339c l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a003394 l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000034c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a0020b0 g     F .text	0000001c Chip_Clock_GetDividerSource
10000018 g     O .data	00000008 periodoActivo
1a002a48 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a000ca0 g     F .text	00000040 TIMER2_IRQHandler
1a000194  w    F .text	00000002 DebugMon_Handler
1a0001a0  w    F .text	00000002 RIT_IRQHandler
1a000b4c g     F .text	00000040 Timer_DeInit
10000228 g     O .bss	00000004 tareaBlinkyID
1a0001a0  w    F .text	00000002 ADCHS_IRQHandler
1a0004f0 g     F .text	00000074 taskBlinkLed
1a002a7c g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a0  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0010b8 g     F .text	0000008c int64ToString
1a0001a0  w    F .text	00000002 I2C0_IRQHandler
1a0008e0 g     F .text	00000044 uartReadByte
1a0003d4 g     F .text	00000018 InicializarUART
1a001d58 g     F .text	00000034 Chip_USB0_Init
1a0018c8 g     F .text	00000010 Chip_UART_CheckBusy
1a000e28 g     F .text	0000003e delayRead
1a000180  w    F .text	00000002 HardFault_Handler
1a001b5c g     F .text	0000000c Chip_UART_GetABEOStatus
1a000000 g       *ABS*	00000000 __vectors_start__
1a001c70 g     F .text	00000030 RingBuffer_Pop
1a001598 g     F .text	00000014 Board_UARTPutSTR
1a002494 g     F .text	00000018 Chip_Clock_DisableBaseClock
1a000f14 g     F .text	00000024 SysTick_Handler
1a001944 g     F .text	00000044 Chip_UART_SetBaud
1a002220 g     F .text	0000009c Chip_Clock_SetupMainPLLMult
1a000f4c g     F .text	00000008 printString
1a0001a0  w    F .text	00000002 SDIO_IRQHandler
1a00157c g     F .text	0000001c Board_UARTGetChar
1a0001a0  w    F .text	00000002 ATIMER_IRQHandler
1a0011b8 g     F .text	000000a4 uintToAsciiHex
1a000198  w    F .text	00000002 PendSV_Handler
1a00017c  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a0  w    F .text	00000002 I2C1_IRQHandler
1a0001a0  w    F .text	00000002 UART1_IRQHandler
1a0001a0  w    F .text	00000002 GPIO5_IRQHandler
1a0007a4 g     F .text	00000040 schedulerDispatchTasks
1a0001a0  w    F .text	00000002 CAN1_IRQHandler
1a00269c g     F .text	00000014 Chip_Clock_EnablePLL
53ff4f32 g       *ABS*	00000000 __valid_user_code_checksum
1a0016b8 g     F .text	00000028 Board_SSP_Init
1a0001a0  w    F .text	00000002 USB1_IRQHandler
1a0001a0  w    F .text	00000002 I2S0_IRQHandler
1a000954 g     F .text	00000084 waitForReceiveStringOrTimeout
1a000ce0 g     F .text	00000040 TIMER3_IRQHandler
1a0024f0 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	00000002 UART0_IRQHandler
1a0001c0 g     F .text	00000012 bss_init
1a0028ac g     F .text	00000028 Chip_TIMER_ExtMatchControlSet
1a001a2c g     F .text	0000000e Chip_UART_ReadRB
1a002894 g     F .text	00000018 Chip_TIMER_Reset
1a002f84 g     F .text	00000016 memcpy
1a0001a0  w    F .text	00000002 SGPIO_IRQHandler
1a002888 g     F .text	0000000c Chip_TIMER_DeInit
1a00265c g     F .text	00000040 Chip_Clock_SetupPLL
1a0029e8 g     F .text	00000000 .hidden __aeabi_uldivmod
10000020 g     O .data	00000001 ledActivo
1000034c g       .noinit	00000000 _noinit
100001a0 g     O .bss	00000044 colaTx
1a000a14 g     F .text	00000018 uartWriteString
10000348 g     O .bss	00000004 SystemCoreClock
1a001838 g     F .text	00000050 Chip_UART_Init
1a0001a0  w    F .text	00000002 ADC0_IRQHandler
1a001be0 g     F .text	00000090 RingBuffer_InsertMult
1a000e08 g     F .text	00000020 delayConfig
1a000f88 g     F .text	00000022 printUIntFormat
1a00018c  w    F .text	00000002 UsageFault_Handler
1a0025e0 g     F .text	0000004c Chip_Clock_GetRate
1a0001a0  w    F .text	00000002 GPIO6_IRQHandler
10000338 g     O .bss	00000008 tickCounter
1a001744 g     F .text	00000074 Board_SetupClocking
1a002848 g     F .text	00000008 Chip_SystemInit
1a003240 g     O .text	00000004 ExtRateIn
1a0003ac g     F .text	00000028 EscribirCadenaCola
1a0001a0  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000f08 g     F .text	0000000c tickWrite
1a002930 g     F .text	00000002 Chip_GPIO_DeInit
1a000730 g     F .text	00000040 schedulerAddTask
1a0001a0  w    F .text	00000002 GPIO1_IRQHandler
1a000e84 g     F .text	00000078 tickConfig
1a001d8c g     F .text	00000048 Chip_USB1_Init
1a0001a0  w    F .text	00000002 SSP0_IRQHandler
1a001288 g     F .text	0000019c gpioConfig
1a0002fc g     O .text	00000004 CRP_WORD
1a002834 g     F .text	00000014 Chip_SetupIrcClocking
1a002d18 g     F .text	0000026a .hidden __udivdi3
1a0001a0  w    F .text	00000002 ADC1_IRQHandler
1000017c g     O .bss	00000001 errorCode
1a001bb0 g     F .text	00000030 RingBuffer_Insert
1a001640 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
10000270 g     O .bss	00000030 antirreboteMEF_ventana1
1a0003ec g     F .text	00000038 taskUARTGetChar
1a0001a0  w    F .text	00000002 RTC_IRQHandler
1000034c g       .bss	00000000 _ebss
1a000c28 g     F .text	0000003c TIMER0_IRQHandler
1a000720 g     F .text	00000010 schedulerUpdatePeriod
1a0001a0  w    F .text	00000002 SPI_IRQHandler
1a0001a0  w    F .text	00000002 LCD_IRQHandler
1a002000 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000fc8 g     F .text	000000ee boardConfig
1a000564 g     F .text	000001b4 taskActualizarLeds
10000000 g     O .data	00000018 periodos
1a0001a4 g     F .text	0000001a data_init
1a000c64 g     F .text	0000003c TIMER1_IRQHandler
1a00205c g     F .text	00000054 Chip_Clock_SetDivider
10000024 g     O .data	00000006 leds
1a000a2c g     F .text	00000002 UART2_IRQHandler
1a000f54 g     F .text	00000010 printEnter
1a002378 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001888 g     F .text	0000001c Chip_UART_DeInit
1a000a34 g     F .text	00000004 sAPI_NullFuncPtr
1a000924 g     F .text	00000030 uartWriteByte
1a0014d4 g     F .text	00000016 gpioToggle
1a0001a0  w    F .text	00000002 GPIO2_IRQHandler
1a00204c g     F .text	00000010 Chip_Clock_DisableCrystal
1a0025b8 g     F .text	00000014 Chip_Clock_StartPowerDown
1a000a40 g     F .text	0000010c Timer_Init
1a0004b0 g     F .text	00000010 schedulerStart
1a000b8c g     F .text	00000008 Timer_microsecondsToTicks
1a0024cc g     F .text	00000024 Chip_Clock_GetBaseClock
1a0026c4 g     F .text	0000000c Chip_Clock_GetPLLStatus
1a001988 g     F .text	00000024 Chip_UART_RXIntHandlerRB
1a0019e8 g     F .text	00000042 Chip_UART_SendRB
10000170 g       .bss	00000000 _bss
1a0001a0  w    F .text	00000002 I2S1_IRQHandler
1a000770 g     F .text	00000034 schedulerDeleteTask
1a0022bc g     F .text	000000bc Chip_Clock_SetupMainPLLHz
1a00292c g     F .text	00000002 Chip_GPIO_Init
1a00323c g     O .text	00000004 OscRateIn
1a001668 g     F .text	00000024 Board_I2C_Init
1000034c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00161c g     F .text	00000024 Board_ENET_GetMacADDR
1a000d20 g     F .text	00000052 delayInaccurate
1a0001a0  w    F .text	00000002 SSP1_IRQHandler
1a00287c g     F .text	0000000c Chip_TIMER_Init
1a0024ac g     F .text	00000020 Chip_Clock_IsBaseClockEnabled
1a000178 g       .text	00000000 __bss_section_table_end
1a002448 g     F .text	00000034 Chip_Clock_GetBaseClockOpts
1a000878 g     F .text	00000004 sleepUntilNextInterrupt
1a002a78  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001ca0 g     F .text	00000082 RingBuffer_PopMult
10000178 g     O .bss	00000004 ledIndice
1a0001a0  w    F .text	00000002 USB0_IRQHandler
1a002584 g     F .text	00000034 Chip_Clock_Disable
1a0001a0  w    F .text	00000002 GPIO3_IRQHandler
1a000bcc g     F .text	00000044 Timer_DisableCompareMatch
1a001568 g     F .text	00000014 Board_UARTPutChar
1a0018a4 g     F .text	00000022 Chip_UART_Send
1a0001a0  w    F .text	00000002 SCT_IRQHandler
1a00262c g     F .text	00000030 Chip_Clock_GetEMCRate
1a001144 g     F .text	00000074 uint64ToString
1a001a3c g     F .text	00000036 Chip_UART_IRQRBHandler
1a0020cc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002f9a g     F .text	00000010 memset
1a000184  w    F .text	00000002 MemManage_Handler
1a0007e8 g     F .text	00000090 main
1a0018fc g     F .text	00000022 Chip_UART_Read
1a0001a0  w    F .text	00000002 WDT_IRQHandler
1a000190  w    F .text	00000002 SVC_Handler
1a000454 g     F .text	0000003c schedulerUpdate
1a000b94 g     F .text	00000038 Timer_EnableCompareMatch
1a002820 g     F .text	00000014 Chip_SetupXtalClocking
1a001604 g     F .text	00000016 Board_LED_Toggle
1a000314 g     F .text	0000004a EscribirCola
1a0004e4 g     F .text	0000000c apagarLeds
100002a0 g     O .bss	00000001 alarmaEstado
1a0001a0  w    F .text	00000002 GPIO7_IRQHandler
1a0024fc g     F .text	0000003c Chip_Clock_EnableOpts
1a0030f0 g     O .text	00000136 gpioPinsConfig
1a0020e8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0028d4 g     F .text	00000058 fpuInit
1a0015d4 g     F .text	00000030 Board_LED_Test
1a0021a0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0016f4 g     F .text	0000001c SystemInit
1a0001a0  w    F .text	00000002 SPIFI_IRQHandler
1a000dd0 g     F .text	00000038 delay
1a0001a0  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00256c g     F .text	00000018 Chip_Clock_RTCEnable
1a001424 g     F .text	00000058 gpioWrite
1a0018d8 g     F .text	00000024 Chip_UART_SendBlocking
1a001710 g     F .text	00000034 Board_SetupMuxing
1a001a74 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000efc g     F .text	0000000c tickRead
10000340 g     O .bss	00000008 tickRateMS
1a0001a0  w    F .text	00000002 ETH_IRQHandler
10000168 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0009d8 g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a0001a0  w    F .text	00000002 CAN0_IRQHandler
1a000fac g     F .text	0000001a printHex
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a000f64 g     F .text	00000022 printIntFormat
1a000424 g     F .text	00000030 taskUARTPutChar
1a00087c g     F .text	00000064 uartConfig
100002a8 g     O .bss	00000030 antirreboteMEF_puerta
1a0001a0  w    F .text	00000002 GINT0_IRQHandler
1a0001a0  w    F .text	00000002 DAC_IRQHandler
1a001540 g     F .text	00000028 Board_Debug_Init
1000016c g       .data	00000000 _edata
1a0001a0  w    F .text	00000002 M0SUB_IRQHandler
1a001b68 g     F .text	00000038 Chip_UART_ABCmd
1a0007e4 g     F .text	00000002 schedulerReportStatus
1a0026d0 g     F .text	00000150 Chip_SetupCoreClock
1a0001a0  w    F .text	00000002 GPIO0_IRQHandler
1a00168c g     F .text	0000002c Board_SDMMC_Init
1a000000 g     O .text	00000114 g_pfnVectors
1a002934 g     F .text	0000007c ResetISR
1a001dd4 g     F .text	00000014 SystemCoreClockUpdate
1a0016e0 g     F .text	00000014 Board_DAC_Init
1a000f3c g     F .text	0000000e printConfigUart
1a0001a0  w    F .text	00000002 DMA_IRQHandler
1a0001a0  w    F .text	00000002 EVRT_IRQHandler
1a001ba0 g     F .text	00000010 RingBuffer_Init
1a000d74 g     F .text	0000005a delayInaccurateUs
1a002a78  w    F .text	00000002 .hidden __aeabi_idiv0
1a0026b0 g     F .text	00000014 Chip_Clock_DisablePLL
1a000f38 g     F .text	00000004 printSetUart
1a0025cc g     F .text	00000014 Chip_Clock_ClearPowerDown
1a0019ac g     F .text	0000003a Chip_UART_TXIntHandlerRB
1a000188  w    F .text	00000002 BusFault_Handler
100002d8 g     O .bss	00000030 antirreboteMEF_ventana3
10000308 g     O .bss	00000030 antirreboteMEF_ventana2
1a002538 g     F .text	00000034 Chip_Clock_Enable
1a000a30 g     F .text	00000002 UART3_IRQHandler
1a000e68 g     F .text	0000001c delayWrite
1a0001a0  w    F .text	00000002 MCPWM_IRQHandler
1a002a18 g     F .text	0000002e .hidden __gnu_ldivmod_helper
100001e4 g     O .bss	00000044 colaRx
1a0015ac g     F .text	00000028 Board_LED_Set
1a0001a0  w    F .text	00000002 M0APP_IRQHandler
1a00147c g     F .text	00000058 gpioRead
1000022c g     O .bss	00000040 schedulerTasks
1a000360 g     F .text	0000004c LeerCola
10000174 g     O .bss	00000004 periodoIndice
1a0001a0  w    F .text	00000002 GINT1_IRQHandler
1a000490 g     F .text	00000020 schedulerInit
1a0029b0 g     F .text	00000000 .hidden __aeabi_ldivmod
1a000c10 g     F .text	00000018 Timer_SetCompareMatch
1a001920 g     F .text	00000024 Chip_UART_ReadBlocking
1a00152c g     F .text	00000014 Board_UART_Init
1a000300 g     F .text	00000014 InicializarCola
1a00247c g     F .text	00000018 Chip_Clock_EnableBaseClock
1a002404 g     F .text	00000044 Chip_Clock_SetBaseClock
1a0001a0  w    F .text	00000002 GPIO4_IRQHandler
1a0017b8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 35 29 00 1a 7d 01 00 1a 81 01 00 1a     ....5)..}.......
1a000010:	85 01 00 1a 89 01 00 1a 8d 01 00 1a 32 4f ff 53     ............2O.S
	...
1a00002c:	91 01 00 1a 95 01 00 1a 00 00 00 00 99 01 00 1a     ................
1a00003c:	15 0f 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00004c:	00 00 00 00 a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00005c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00006c:	a1 01 00 1a 29 0c 00 1a 65 0c 00 1a a1 0c 00 1a     ....)...e.......
1a00007c:	e1 0c 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00008c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00009c:	a1 01 00 1a 79 01 00 1a a1 01 00 1a 2d 0a 00 1a     ....y.......-...
1a0000ac:	31 0a 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     1...............
1a0000bc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000cc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000dc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000ec:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a0000fc:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a00010c:	a1 01 00 1a a1 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00339c 	.word	0x1a00339c
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000016c 	.word	0x0000016c
1a000120:	1a00339c 	.word	0x1a00339c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00339c 	.word	0x1a00339c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00339c 	.word	0x1a00339c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00339c 	.word	0x1a00339c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000170 	.word	0x10000170
1a000154:	000001dc 	.word	0x000001dc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a000178:	4770      	bx	lr
1a00017a:	bf00      	nop

1a00017c <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <NMI_Handler>
1a00017e:	bf00      	nop

1a000180 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <HardFault_Handler>
1a000182:	bf00      	nop

1a000184 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <MemManage_Handler>
1a000186:	bf00      	nop

1a000188 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>
1a00018a:	bf00      	nop

1a00018c <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler>
1a00018e:	bf00      	nop

1a000190 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <SVC_Handler>
1a000192:	bf00      	nop

1a000194 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <DebugMon_Handler>
1a000196:	bf00      	nop

1a000198 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler>
1a00019a:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <PendSV_Handler+0x4>
1a00019e:	bf00      	nop

1a0001a0 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <ADC0_IRQHandler>
1a0001a2:	bf00      	nop

1a0001a4 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a4:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	2300      	movs	r3, #0
1a0001a8:	e004      	b.n	1a0001b4 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001aa:	6804      	ldr	r4, [r0, #0]
1a0001ac:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b0:	3004      	adds	r0, #4
1a0001b2:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	4293      	cmp	r3, r2
1a0001b6:	d3f8      	bcc.n	1a0001aa <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001bc:	4770      	bx	lr
1a0001be:	bf00      	nop

1a0001c0 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	2300      	movs	r3, #0
1a0001c2:	e003      	b.n	1a0001cc <bss_init+0xc>
        *pulDest++ = 0;
1a0001c4:	2200      	movs	r2, #0
1a0001c6:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001ca:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001cc:	428b      	cmp	r3, r1
1a0001ce:	d3f9      	bcc.n	1a0001c4 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d0:	4770      	bx	lr
1a0001d2:	bf00      	nop
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <InicializarCola>:
 */

void InicializarCola (t_cola* cola)
{

	cola->ini = BUFFER_N - 1;							// Inicializo el "ini" en el último dato
1a000300:	233f      	movs	r3, #63	; 0x3f
1a000302:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	cola->fin = 0;										// Inicializo "fin" al comienzo del buffer
1a000306:	2300      	movs	r3, #0
1a000308:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	// cola->datos_pendientes = 0;							// Inicializo el contador de datos pendientes en cero
	cola->estadoBuffer = BUFFER_VACIO;					// Señalizo la estructura como buffer vacío
1a00030c:	2302      	movs	r3, #2
1a00030e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
1a000312:	4770      	bx	lr

1a000314 <EscribirCola>:
 *
 */

int8_t EscribirCola (t_cola*cola, uint8_t dato_a_escribir)
{
	if(cola->estadoBuffer == BUFFER_LLENO)						// Pregunto si el buffer ya está lleno
1a000314:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
1a000318:	b1e3      	cbz	r3, 1a000354 <EscribirCola+0x40>
		return ESCRIBIR_COLA_COLA_LLENA;						// Retorno error de buffer lleno

	cola->buffer[cola->fin] = dato_a_escribir;					// Escribo el dato en el frente
1a00031a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
1a00031e:	54c1      	strb	r1, [r0, r3]
	cola->fin++;												// Incremento el puntero del frente
1a000320:	3301      	adds	r3, #1
1a000322:	b2db      	uxtb	r3, r3
1a000324:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	// cola->datos_pendientes++;									// Incremento el contador de datos pendientes
	cola->estadoBuffer = BUFFER_CARGANDO;						// Señalizo buffer cargando
1a000328:	2201      	movs	r2, #1
1a00032a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42

	if(cola->fin >= BUFFER_N)									// Pregunto si el puntero del frente llegó al final
1a00032e:	2b3f      	cmp	r3, #63	; 0x3f
1a000330:	d902      	bls.n	1a000338 <EscribirCola+0x24>
		cola->fin = 0;											// Lo inicializo al comienzo
1a000332:	2300      	movs	r3, #0
1a000334:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

	if(((cola->ini + 1) % BUFFER_N) == cola->fin)				// Condición para buffer vacío
1a000338:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a00033c:	3301      	adds	r3, #1
1a00033e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000342:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
1a000346:	4293      	cmp	r3, r2
1a000348:	d106      	bne.n	1a000358 <EscribirCola+0x44>
		cola->estadoBuffer = BUFFER_LLENO;						// es porque el buffer está lleno
1a00034a:	2300      	movs	r3, #0
1a00034c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42

	return ESCRIBIR_COLA_EXITO;
1a000350:	4618      	mov	r0, r3
1a000352:	e002      	b.n	1a00035a <EscribirCola+0x46>
 */

int8_t EscribirCola (t_cola*cola, uint8_t dato_a_escribir)
{
	if(cola->estadoBuffer == BUFFER_LLENO)						// Pregunto si el buffer ya está lleno
		return ESCRIBIR_COLA_COLA_LLENA;						// Retorno error de buffer lleno
1a000354:	20ff      	movs	r0, #255	; 0xff
1a000356:	e000      	b.n	1a00035a <EscribirCola+0x46>
		cola->fin = 0;											// Lo inicializo al comienzo

	if(((cola->ini + 1) % BUFFER_N) == cola->fin)				// Condición para buffer vacío
		cola->estadoBuffer = BUFFER_LLENO;						// es porque el buffer está lleno

	return ESCRIBIR_COLA_EXITO;
1a000358:	2000      	movs	r0, #0
}
1a00035a:	b240      	sxtb	r0, r0
1a00035c:	4770      	bx	lr
1a00035e:	bf00      	nop

1a000360 <LeerCola>:
 */

int8_t LeerCola(t_cola*cola, uint8_t*dato_leido)
{

	if(cola->estadoBuffer == BUFFER_VACIO)						// Si el buffer está vacío
1a000360:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
1a000364:	2b02      	cmp	r3, #2
1a000366:	d01c      	beq.n	1a0003a2 <LeerCola+0x42>
		return LEER_COLA_COLA_VACIA;							// Señalizo y salgo

	cola->ini++;												// Incremento el índice del fondo
1a000368:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a00036c:	3301      	adds	r3, #1
1a00036e:	b2db      	uxtb	r3, r3
1a000370:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	if(cola->ini >= BUFFER_N)									// Pregunto si llegué al final
1a000374:	2b3f      	cmp	r3, #63	; 0x3f
1a000376:	d902      	bls.n	1a00037e <LeerCola+0x1e>
		cola->ini = 0;											// Lo vuelvo a poner al principio
1a000378:	2300      	movs	r3, #0
1a00037a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

	*dato_leido = cola->buffer[cola->ini];						// Guardo el dato leido
1a00037e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a000382:	5cc3      	ldrb	r3, [r0, r3]
1a000384:	700b      	strb	r3, [r1, #0]

	if(((cola->ini + 1) % BUFFER_N) == cola->fin)				// Condición para buffer vacío
1a000386:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a00038a:	3301      	adds	r3, #1
1a00038c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000390:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
1a000394:	4293      	cmp	r3, r2
1a000396:	d106      	bne.n	1a0003a6 <LeerCola+0x46>
		cola->estadoBuffer = BUFFER_VACIO;						// Caso verdadero: señalizo
1a000398:	2302      	movs	r3, #2
1a00039a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42

	return LEER_COLA_EXITO;										// Retorno éxito en la lectura
1a00039e:	2000      	movs	r0, #0
1a0003a0:	e002      	b.n	1a0003a8 <LeerCola+0x48>

int8_t LeerCola(t_cola*cola, uint8_t*dato_leido)
{

	if(cola->estadoBuffer == BUFFER_VACIO)						// Si el buffer está vacío
		return LEER_COLA_COLA_VACIA;							// Señalizo y salgo
1a0003a2:	20ff      	movs	r0, #255	; 0xff
1a0003a4:	e000      	b.n	1a0003a8 <LeerCola+0x48>
	*dato_leido = cola->buffer[cola->ini];						// Guardo el dato leido

	if(((cola->ini + 1) % BUFFER_N) == cola->fin)				// Condición para buffer vacío
		cola->estadoBuffer = BUFFER_VACIO;						// Caso verdadero: señalizo

	return LEER_COLA_EXITO;										// Retorno éxito en la lectura
1a0003a6:	2000      	movs	r0, #0
}
1a0003a8:	b240      	sxtb	r0, r0
1a0003aa:	4770      	bx	lr

1a0003ac <EscribirCadenaCola>:
 * 	@returns 	none
 *
 */

int32_t EscribirCadenaCola (uint8_t *cadena, t_cola*cola)
{
1a0003ac:	b570      	push	{r4, r5, r6, lr}
1a0003ae:	4605      	mov	r5, r0
1a0003b0:	460e      	mov	r6, r1

	uint32_t i = 0;
1a0003b2:	2400      	movs	r4, #0

	while(cadena[i] != '\0') {
1a0003b4:	e006      	b.n	1a0003c4 <EscribirCadenaCola+0x18>

		/* Intento agregar el dato a la cola de datos */
		if(EscribirCola(cola, cadena[i]) == ESCRIBIR_COLA_COLA_LLENA)
1a0003b6:	4630      	mov	r0, r6
1a0003b8:	f7ff ffac 	bl	1a000314 <EscribirCola>
1a0003bc:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0003c0:	d005      	beq.n	1a0003ce <EscribirCadenaCola+0x22>
			/* si esta llena, retorno con error */
			return -1;
		i++;
1a0003c2:	3401      	adds	r4, #1
int32_t EscribirCadenaCola (uint8_t *cadena, t_cola*cola)
{

	uint32_t i = 0;

	while(cadena[i] != '\0') {
1a0003c4:	5d29      	ldrb	r1, [r5, r4]
1a0003c6:	2900      	cmp	r1, #0
1a0003c8:	d1f5      	bne.n	1a0003b6 <EscribirCadenaCola+0xa>
			return -1;
		i++;

	}

	return 0;
1a0003ca:	2000      	movs	r0, #0
1a0003cc:	bd70      	pop	{r4, r5, r6, pc}
	while(cadena[i] != '\0') {

		/* Intento agregar el dato a la cola de datos */
		if(EscribirCola(cola, cadena[i]) == ESCRIBIR_COLA_COLA_LLENA)
			/* si esta llena, retorno con error */
			return -1;
1a0003ce:	f04f 30ff 	mov.w	r0, #4294967295
		i++;

	}

	return 0;
}
1a0003d2:	bd70      	pop	{r4, r5, r6, pc}

1a0003d4 <InicializarUART>:
 * @brief Inicializacion de estructuras asociadas a la UART
 *
 */

void InicializarUART (void)
{
1a0003d4:	b508      	push	{r3, lr}

	InicializarCola(&colaRx);
1a0003d6:	4803      	ldr	r0, [pc, #12]	; (1a0003e4 <InicializarUART+0x10>)
1a0003d8:	f7ff ff92 	bl	1a000300 <InicializarCola>
	InicializarCola(&colaTx);
1a0003dc:	4802      	ldr	r0, [pc, #8]	; (1a0003e8 <InicializarUART+0x14>)
1a0003de:	f7ff ff8f 	bl	1a000300 <InicializarCola>
1a0003e2:	bd08      	pop	{r3, pc}
1a0003e4:	100001e4 	.word	0x100001e4
1a0003e8:	100001a0 	.word	0x100001a0

1a0003ec <taskUARTGetChar>:
 *
 * @author Roux, Federico G.
 */


void taskUARTGetChar (void){
1a0003ec:	b500      	push	{lr}
1a0003ee:	b089      	sub	sp, #36	; 0x24

	uint8_t lineaRecibida [UART_LINEA_RECIBIDA_N];

	memset(lineaRecibida, NULL, UART_LINEA_RECIBIDA_N);
1a0003f0:	2300      	movs	r3, #0
1a0003f2:	9300      	str	r3, [sp, #0]
1a0003f4:	9301      	str	r3, [sp, #4]
1a0003f6:	9302      	str	r3, [sp, #8]
1a0003f8:	9303      	str	r3, [sp, #12]
1a0003fa:	9304      	str	r3, [sp, #16]
1a0003fc:	9305      	str	r3, [sp, #20]
1a0003fe:	9306      	str	r3, [sp, #24]
1a000400:	9307      	str	r3, [sp, #28]

	while(uartReadByte( UART_USB, lineaRecibida ) != FALSE) {
1a000402:	e004      	b.n	1a00040e <taskUARTGetChar+0x22>
		EscribirCola(&colaRx, lineaRecibida[0]);
1a000404:	4806      	ldr	r0, [pc, #24]	; (1a000420 <taskUARTGetChar+0x34>)
1a000406:	f89d 1000 	ldrb.w	r1, [sp]
1a00040a:	f7ff ff83 	bl	1a000314 <EscribirCola>

	uint8_t lineaRecibida [UART_LINEA_RECIBIDA_N];

	memset(lineaRecibida, NULL, UART_LINEA_RECIBIDA_N);

	while(uartReadByte( UART_USB, lineaRecibida ) != FALSE) {
1a00040e:	2000      	movs	r0, #0
1a000410:	4669      	mov	r1, sp
1a000412:	f000 fa65 	bl	1a0008e0 <uartReadByte>
1a000416:	2800      	cmp	r0, #0
1a000418:	d1f4      	bne.n	1a000404 <taskUARTGetChar+0x18>
		EscribirCola(&colaRx, lineaRecibida[0]);
	}
	return;
}
1a00041a:	b009      	add	sp, #36	; 0x24
1a00041c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000420:	100001e4 	.word	0x100001e4

1a000424 <taskUARTPutChar>:
 * @brief Tarea que extrae los bytes de la cola de transmision y los escribe en la fifo de la UART
 *
 * @author Roux, Federico G.
 */

void taskUARTPutChar (void) {
1a000424:	b500      	push	{lr}
1a000426:	b083      	sub	sp, #12

	uint8_t byteLeido[2] = " ";
1a000428:	2320      	movs	r3, #32
1a00042a:	f8ad 3004 	strh.w	r3, [sp, #4]

	while(LeerCola(&colaTx, byteLeido) != LEER_COLA_COLA_VACIA)
1a00042e:	e005      	b.n	1a00043c <taskUARTPutChar+0x18>
	{
		byteLeido[1] = '\0',
1a000430:	2000      	movs	r0, #0
1a000432:	f88d 0005 	strb.w	r0, [sp, #5]
		printString(UART_USB, byteLeido);
1a000436:	a901      	add	r1, sp, #4
1a000438:	f000 fd88 	bl	1a000f4c <printString>

void taskUARTPutChar (void) {

	uint8_t byteLeido[2] = " ";

	while(LeerCola(&colaTx, byteLeido) != LEER_COLA_COLA_VACIA)
1a00043c:	4804      	ldr	r0, [pc, #16]	; (1a000450 <taskUARTPutChar+0x2c>)
1a00043e:	a901      	add	r1, sp, #4
1a000440:	f7ff ff8e 	bl	1a000360 <LeerCola>
1a000444:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000448:	d1f2      	bne.n	1a000430 <taskUARTPutChar+0xc>
		byteLeido[1] = '\0',
		printString(UART_USB, byteLeido);
	}

	return;
}
1a00044a:	b003      	add	sp, #12
1a00044c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000450:	100001a0 	.word	0x100001a0

1a000454 <schedulerUpdate>:

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a000454:	2300      	movs	r3, #0
1a000456:	e015      	b.n	1a000484 <schedulerUpdate+0x30>
      // Check if there is a task at this location
      if( schedulerTasks[index].pTask ){
1a000458:	011a      	lsls	r2, r3, #4
1a00045a:	490c      	ldr	r1, [pc, #48]	; (1a00048c <schedulerUpdate+0x38>)
1a00045c:	588a      	ldr	r2, [r1, r2]
1a00045e:	b182      	cbz	r2, 1a000482 <schedulerUpdate+0x2e>
         if( --schedulerTasks[index].delay <= 0 ){
1a000460:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a000464:	684a      	ldr	r2, [r1, #4]
1a000466:	3a01      	subs	r2, #1
1a000468:	604a      	str	r2, [r1, #4]
1a00046a:	2a00      	cmp	r2, #0
1a00046c:	dc09      	bgt.n	1a000482 <schedulerUpdate+0x2e>
            // The task is due to run
            schedulerTasks[index].runMe += 1; // Inc. the 'runMe' flag
1a00046e:	460a      	mov	r2, r1
1a000470:	68c9      	ldr	r1, [r1, #12]
1a000472:	3101      	adds	r1, #1
1a000474:	60d1      	str	r1, [r2, #12]
            if( schedulerTasks[index].period ){
1a000476:	6892      	ldr	r2, [r2, #8]
1a000478:	b11a      	cbz	r2, 1a000482 <schedulerUpdate+0x2e>
               // Schedule regular tasks to run again
               schedulerTasks[index].delay = schedulerTasks[index].period;
1a00047a:	4904      	ldr	r1, [pc, #16]	; (1a00048c <schedulerUpdate+0x38>)
1a00047c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a000480:	604a      	str	r2, [r1, #4]

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a000482:	3301      	adds	r3, #1
1a000484:	2b03      	cmp	r3, #3
1a000486:	dde7      	ble.n	1a000458 <schedulerUpdate+0x4>
            }
         }
      }
   }
   return 0;
}
1a000488:	2000      	movs	r0, #0
1a00048a:	4770      	bx	lr
1a00048c:	1000022c 	.word	0x1000022c

1a000490 <schedulerInit>:
schedulerInit()
Scheduler initialization function. Prepares scheduler
data structures.
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){
1a000490:	b510      	push	{r4, lr}

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a000492:	2400      	movs	r4, #0
1a000494:	e003      	b.n	1a00049e <schedulerInit+0xe>
      schedulerDeleteTask(i);
1a000496:	4620      	mov	r0, r4
1a000498:	f000 f96a 	bl	1a000770 <schedulerDeleteTask>
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a00049c:	3401      	adds	r4, #1
1a00049e:	2c03      	cmp	r4, #3
1a0004a0:	d9f9      	bls.n	1a000496 <schedulerInit+0x6>
      schedulerDeleteTask(i);
   }
   /* Reset the global error variable
      - schedulerDelete_Task() will generate an error code,
        (because the task array is empty) */
   errorCode = 0;
1a0004a2:	2200      	movs	r2, #0
1a0004a4:	4b01      	ldr	r3, [pc, #4]	; (1a0004ac <schedulerInit+0x1c>)
1a0004a6:	701a      	strb	r2, [r3, #0]
1a0004a8:	bd10      	pop	{r4, pc}
1a0004aa:	bf00      	nop
1a0004ac:	1000017c 	.word	0x1000017c

1a0004b0 <schedulerStart>:
Starts the scheduler, by enabling timer interrupts.
NOTE: Usually called after all regular tasks are added,
to keep the tasks synchronized.
NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!!
-*------------------------------------------------------------------*/
void schedulerStart( tick_t tickRateMs ){
1a0004b0:	b508      	push	{r3, lr}
      El tick hook es simplemente una función que se ejecutará períodicamente
      con cada interrupción de Tick, este nombre se refiere a una función
      "enganchada" a una interrupción */

   // Inicializar el conteo de Ticks con resolución de 1ms, con tickHook
   if( tickConfig( tickRateMs, schedulerUpdate ) ){
1a0004b2:	4a02      	ldr	r2, [pc, #8]	; (1a0004bc <schedulerStart+0xc>)
1a0004b4:	f000 fce6 	bl	1a000e84 <tickConfig>
1a0004b8:	bd08      	pop	{r3, pc}
1a0004ba:	bf00      	nop
1a0004bc:	1a000455 	.word	0x1a000455

1a0004c0 <AsciiAEntero>:
 * @ convierto string a cadena
 *
 */

int32_t AsciiAEntero (uint8_t*cadena, int32_t nCifras)
{
1a0004c0:	b410      	push	{r4}
	int32_t resultado = 0, i_cifra;

	for(i_cifra = 0; i_cifra < nCifras; i_cifra++)
1a0004c2:	2200      	movs	r2, #0
 *
 */

int32_t AsciiAEntero (uint8_t*cadena, int32_t nCifras)
{
	int32_t resultado = 0, i_cifra;
1a0004c4:	4613      	mov	r3, r2

	for(i_cifra = 0; i_cifra < nCifras; i_cifra++)
1a0004c6:	e006      	b.n	1a0004d6 <AsciiAEntero+0x16>
	{
		resultado *= 10;
1a0004c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0004cc:	005b      	lsls	r3, r3, #1
		resultado += cadena[i_cifra] - '0';
1a0004ce:	5c84      	ldrb	r4, [r0, r2]
1a0004d0:	3c30      	subs	r4, #48	; 0x30
1a0004d2:	4423      	add	r3, r4

int32_t AsciiAEntero (uint8_t*cadena, int32_t nCifras)
{
	int32_t resultado = 0, i_cifra;

	for(i_cifra = 0; i_cifra < nCifras; i_cifra++)
1a0004d4:	3201      	adds	r2, #1
1a0004d6:	428a      	cmp	r2, r1
1a0004d8:	dbf6      	blt.n	1a0004c8 <AsciiAEntero+0x8>
	}


	return resultado;

}
1a0004da:	4618      	mov	r0, r3
1a0004dc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004e0:	4770      	bx	lr
1a0004e2:	bf00      	nop

1a0004e4 <apagarLeds>:
 *
 * @brief apago todos los leds
 */

void apagarLeds (void)
{
1a0004e4:	b508      	push	{r3, lr}
   gpioWrite(ALARMA_LED_DESARMADA, ON);
1a0004e6:	2029      	movs	r0, #41	; 0x29
1a0004e8:	2101      	movs	r1, #1
1a0004ea:	f000 ff9b 	bl	1a001424 <gpioWrite>
1a0004ee:	bd08      	pop	{r3, pc}

1a0004f0 <taskBlinkLed>:
 *
 * @brief Tarea de parpadeo de led.
 *
 */

void taskBlinkLed(void){
1a0004f0:	b508      	push	{r3, lr}

	switch(alarmaEstado) {
1a0004f2:	4b1a      	ldr	r3, [pc, #104]	; (1a00055c <taskBlinkLed+0x6c>)
1a0004f4:	781b      	ldrb	r3, [r3, #0]
1a0004f6:	2b05      	cmp	r3, #5
1a0004f8:	d82c      	bhi.n	1a000554 <taskBlinkLed+0x64>
1a0004fa:	e8df f003 	tbb	[pc, r3]
1a0004fe:	0803      	.short	0x0803
1a000500:	26211c0d 	.word	0x26211c0d

	case DESARMADA:
		gpioWrite(ALARMA_LED_DESARMADA, ON);
1a000504:	2029      	movs	r0, #41	; 0x29
1a000506:	2101      	movs	r1, #1
1a000508:	f000 ff8c 	bl	1a001424 <gpioWrite>
		break;
1a00050c:	bd08      	pop	{r3, pc}
	case ARMADA:
		gpioWrite(ALARMA_LED_DESARMADA, ON);
1a00050e:	2029      	movs	r0, #41	; 0x29
1a000510:	2101      	movs	r1, #1
1a000512:	f000 ff87 	bl	1a001424 <gpioWrite>
		break;
1a000516:	bd08      	pop	{r3, pc}
	case DISPARADA:
		if (ledState == ON){
1a000518:	4b11      	ldr	r3, [pc, #68]	; (1a000560 <taskBlinkLed+0x70>)
1a00051a:	781b      	ldrb	r3, [r3, #0]
1a00051c:	2b01      	cmp	r3, #1
1a00051e:	d103      	bne.n	1a000528 <taskBlinkLed+0x38>
		  ledState = OFF; // Apago el pin
1a000520:	2200      	movs	r2, #0
1a000522:	4b0f      	ldr	r3, [pc, #60]	; (1a000560 <taskBlinkLed+0x70>)
1a000524:	701a      	strb	r2, [r3, #0]
1a000526:	e002      	b.n	1a00052e <taskBlinkLed+0x3e>
	   }
	   else{
		  ledState = ON; // Prendo el pin
1a000528:	2201      	movs	r2, #1
1a00052a:	4b0d      	ldr	r3, [pc, #52]	; (1a000560 <taskBlinkLed+0x70>)
1a00052c:	701a      	strb	r2, [r3, #0]
	   }
	   gpioToggle(ALARMA_LED_DISPARADA );
1a00052e:	2028      	movs	r0, #40	; 0x28
1a000530:	f000 ffd0 	bl	1a0014d4 <gpioToggle>
		break;
1a000534:	bd08      	pop	{r3, pc}
	case ESPERANDO_PASS:
		gpioWrite(ALARMA_LED_ESPERANDO_PASS, ON);
1a000536:	202a      	movs	r0, #42	; 0x2a
1a000538:	2101      	movs	r1, #1
1a00053a:	f000 ff73 	bl	1a001424 <gpioWrite>
		break;
1a00053e:	bd08      	pop	{r3, pc}
	case USUARIO_SALIENDO:
		gpioWrite(ALARMA_LED_DESARMADA, ON);
1a000540:	2029      	movs	r0, #41	; 0x29
1a000542:	2101      	movs	r1, #1
1a000544:	f000 ff6e 	bl	1a001424 <gpioWrite>
		break;
1a000548:	bd08      	pop	{r3, pc}
	case USUARIO_ENTRANDO:
		gpioWrite(ALARMA_LED_DESARMADA, ON);
1a00054a:	2029      	movs	r0, #41	; 0x29
1a00054c:	2101      	movs	r1, #1
1a00054e:	f000 ff69 	bl	1a001424 <gpioWrite>
		break;
1a000552:	bd08      	pop	{r3, pc}
   default:
      apagarLeds();
1a000554:	f7ff ffc6 	bl	1a0004e4 <apagarLeds>
1a000558:	bd08      	pop	{r3, pc}
1a00055a:	bf00      	nop
1a00055c:	100002a0 	.word	0x100002a0
1a000560:	10000170 	.word	0x10000170

1a000564 <taskActualizarLeds>:
 *
 *
 */

void taskActualizarLeds(void)
{
1a000564:	b510      	push	{r4, lr}
1a000566:	b086      	sub	sp, #24

	volatile uint8_t periodoAscii[DELAY_L];
	volatile uint32_t nCifras = 0, i_cifra, periodoEntero = 0;
1a000568:	2300      	movs	r3, #0
1a00056a:	9303      	str	r3, [sp, #12]
1a00056c:	9302      	str	r3, [sp, #8]

	volatile uint8_t datoLeido;
	volatile int8_t estadoColaRx;
	estadoColaRx = LeerCola(&colaRx, &datoLeido);
1a00056e:	4860      	ldr	r0, [pc, #384]	; (1a0006f0 <taskActualizarLeds+0x18c>)
1a000570:	f10d 0107 	add.w	r1, sp, #7
1a000574:	f7ff fef4 	bl	1a000360 <LeerCola>
1a000578:	f88d 0006 	strb.w	r0, [sp, #6]
	//if (antirreb_tecla1.t == TECLA_PRESIONADA){
	if (estadoColaRx == LEER_COLA_COLA_VACIA)
1a00057c:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a000580:	b25b      	sxtb	r3, r3
1a000582:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000586:	f000 80b0 	beq.w	1a0006ea <taskActualizarLeds+0x186>
		return;

	else {

		switch(datoLeido) {
1a00058a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00058e:	3b4c      	subs	r3, #76	; 0x4c
1a000590:	2b28      	cmp	r3, #40	; 0x28
1a000592:	f200 80a6 	bhi.w	1a0006e2 <taskActualizarLeds+0x17e>
1a000596:	e8df f003 	tbb	[pc, r3]
1a00059a:	a489      	.short	0xa489
1a00059c:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005a0:	a415a4a4 	.word	0xa415a4a4
1a0005a4:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005a8:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005ac:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005b0:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005b4:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005b8:	a489a4a4 	.word	0xa489a4a4
1a0005bc:	a4a4a4a4 	.word	0xa4a4a4a4
1a0005c0:	a4a4      	.short	0xa4a4
1a0005c2:	15          	.byte	0x15
1a0005c3:	00          	.byte	0x00

		case 't':
		case 'T':

			/* En caso que mande solo la letra 't' */
			if(LeerCola(&colaRx, periodoAscii) == LEER_COLA_COLA_VACIA)
1a0005c4:	484a      	ldr	r0, [pc, #296]	; (1a0006f0 <taskActualizarLeds+0x18c>)
1a0005c6:	a904      	add	r1, sp, #16
1a0005c8:	f7ff feca 	bl	1a000360 <LeerCola>
1a0005cc:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0005d0:	d11b      	bne.n	1a00060a <taskActualizarLeds+0xa6>
			{

				periodoIndice++;
1a0005d2:	4a48      	ldr	r2, [pc, #288]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0005d4:	6853      	ldr	r3, [r2, #4]
1a0005d6:	3301      	adds	r3, #1
1a0005d8:	6053      	str	r3, [r2, #4]
				if (periodoIndice >= PERIODOS_L)
1a0005da:	2b02      	cmp	r3, #2
1a0005dc:	d902      	bls.n	1a0005e4 <taskActualizarLeds+0x80>
					periodoIndice = 0;
1a0005de:	2200      	movs	r2, #0
1a0005e0:	4b44      	ldr	r3, [pc, #272]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0005e2:	605a      	str	r2, [r3, #4]

				periodoActivo = periodos[periodoIndice];
1a0005e4:	4c44      	ldr	r4, [pc, #272]	; (1a0006f8 <taskActualizarLeds+0x194>)
1a0005e6:	4b43      	ldr	r3, [pc, #268]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0005e8:	685b      	ldr	r3, [r3, #4]
1a0005ea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
1a0005ee:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0005f2:	e9c4 2306 	strd	r2, r3, [r4, #24]
				// reiniciar tarea blinky con nuevo periodo

				EscribirCadenaCola ("Periodo actualizado\n\r", &colaTx);
1a0005f6:	4841      	ldr	r0, [pc, #260]	; (1a0006fc <taskActualizarLeds+0x198>)
1a0005f8:	4941      	ldr	r1, [pc, #260]	; (1a000700 <taskActualizarLeds+0x19c>)
1a0005fa:	f7ff fed7 	bl	1a0003ac <EscribirCadenaCola>
				schedulerUpdatePeriod(tareaBlinkyID, periodoActivo);
1a0005fe:	4b41      	ldr	r3, [pc, #260]	; (1a000704 <taskActualizarLeds+0x1a0>)
1a000600:	6818      	ldr	r0, [r3, #0]
1a000602:	69a1      	ldr	r1, [r4, #24]
1a000604:	f000 f88c 	bl	1a000720 <schedulerUpdatePeriod>
1a000608:	e06f      	b.n	1a0006ea <taskActualizarLeds+0x186>
			}
			/* En caso que mande la letra 'txxxx' */

			else{

				nCifras = 1;
1a00060a:	2301      	movs	r3, #1
1a00060c:	9303      	str	r3, [sp, #12]

				while(LeerCola(&colaRx, &periodoAscii[nCifras]) != LEER_COLA_COLA_VACIA){
1a00060e:	e030      	b.n	1a000672 <taskActualizarLeds+0x10e>

					if(periodoAscii[nCifras] < '0' || periodoAscii[nCifras] > '9')
1a000610:	9b03      	ldr	r3, [sp, #12]
1a000612:	aa06      	add	r2, sp, #24
1a000614:	4413      	add	r3, r2
1a000616:	f813 3c08 	ldrb.w	r3, [r3, #-8]
1a00061a:	b2db      	uxtb	r3, r3
1a00061c:	2b2f      	cmp	r3, #47	; 0x2f
1a00061e:	d906      	bls.n	1a00062e <taskActualizarLeds+0xca>
1a000620:	9b03      	ldr	r3, [sp, #12]
1a000622:	4413      	add	r3, r2
1a000624:	f813 3c08 	ldrb.w	r3, [r3, #-8]
1a000628:	b2db      	uxtb	r3, r3
1a00062a:	2b39      	cmp	r3, #57	; 0x39
1a00062c:	d90d      	bls.n	1a00064a <taskActualizarLeds+0xe6>
					{
						/* vacio la cola de datos */
						while(LeerCola(&colaRx, &periodoAscii[nCifras]) != LEER_COLA_COLA_VACIA);
1a00062e:	9903      	ldr	r1, [sp, #12]
1a000630:	482f      	ldr	r0, [pc, #188]	; (1a0006f0 <taskActualizarLeds+0x18c>)
1a000632:	ab04      	add	r3, sp, #16
1a000634:	4419      	add	r1, r3
1a000636:	f7ff fe93 	bl	1a000360 <LeerCola>
1a00063a:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00063e:	d1f6      	bne.n	1a00062e <taskActualizarLeds+0xca>
						/* mando msj de error */
						EscribirCadenaCola ("ERROR: el delay especificado no es un numero \n\r", &colaTx);
1a000640:	4831      	ldr	r0, [pc, #196]	; (1a000708 <taskActualizarLeds+0x1a4>)
1a000642:	492f      	ldr	r1, [pc, #188]	; (1a000700 <taskActualizarLeds+0x19c>)
1a000644:	f7ff feb2 	bl	1a0003ac <EscribirCadenaCola>
						return;
1a000648:	e04f      	b.n	1a0006ea <taskActualizarLeds+0x186>
					}

					nCifras++;
1a00064a:	9b03      	ldr	r3, [sp, #12]
1a00064c:	3301      	adds	r3, #1
1a00064e:	9303      	str	r3, [sp, #12]
					if(nCifras >= DELAY_L){
1a000650:	9b03      	ldr	r3, [sp, #12]
1a000652:	2b04      	cmp	r3, #4
1a000654:	d90d      	bls.n	1a000672 <taskActualizarLeds+0x10e>
						/* vacio la cola de datos */
						while(LeerCola(&colaRx, &periodoAscii[nCifras]) != LEER_COLA_COLA_VACIA);
1a000656:	9903      	ldr	r1, [sp, #12]
1a000658:	4825      	ldr	r0, [pc, #148]	; (1a0006f0 <taskActualizarLeds+0x18c>)
1a00065a:	ab04      	add	r3, sp, #16
1a00065c:	4419      	add	r1, r3
1a00065e:	f7ff fe7f 	bl	1a000360 <LeerCola>
1a000662:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000666:	d1f6      	bne.n	1a000656 <taskActualizarLeds+0xf2>
						/* mando msj de error */
						EscribirCadenaCola ("ERROR: Tiempo maximo 1000ms \n\r", &colaTx);
1a000668:	4828      	ldr	r0, [pc, #160]	; (1a00070c <taskActualizarLeds+0x1a8>)
1a00066a:	4925      	ldr	r1, [pc, #148]	; (1a000700 <taskActualizarLeds+0x19c>)
1a00066c:	f7ff fe9e 	bl	1a0003ac <EscribirCadenaCola>
						/* salgo */
						return;
1a000670:	e03b      	b.n	1a0006ea <taskActualizarLeds+0x186>

			else{

				nCifras = 1;

				while(LeerCola(&colaRx, &periodoAscii[nCifras]) != LEER_COLA_COLA_VACIA){
1a000672:	9903      	ldr	r1, [sp, #12]
1a000674:	481e      	ldr	r0, [pc, #120]	; (1a0006f0 <taskActualizarLeds+0x18c>)
1a000676:	ab04      	add	r3, sp, #16
1a000678:	4419      	add	r1, r3
1a00067a:	f7ff fe71 	bl	1a000360 <LeerCola>
1a00067e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000682:	d1c5      	bne.n	1a000610 <taskActualizarLeds+0xac>
						return;
						// chequear error de mas de 4 cifras
					}
				}

				periodoEntero = AsciiAEntero(periodoAscii, nCifras);
1a000684:	9903      	ldr	r1, [sp, #12]
1a000686:	a804      	add	r0, sp, #16
1a000688:	f7ff ff1a 	bl	1a0004c0 <AsciiAEntero>
1a00068c:	9002      	str	r0, [sp, #8]

				periodoActivo = periodoEntero;
1a00068e:	9b02      	ldr	r3, [sp, #8]
1a000690:	4c19      	ldr	r4, [pc, #100]	; (1a0006f8 <taskActualizarLeds+0x194>)
1a000692:	61a3      	str	r3, [r4, #24]
1a000694:	2300      	movs	r3, #0
1a000696:	61e3      	str	r3, [r4, #28]
				EscribirCadenaCola ("Periodo actualizado\n\r", &colaTx);
1a000698:	4818      	ldr	r0, [pc, #96]	; (1a0006fc <taskActualizarLeds+0x198>)
1a00069a:	4919      	ldr	r1, [pc, #100]	; (1a000700 <taskActualizarLeds+0x19c>)
1a00069c:	f7ff fe86 	bl	1a0003ac <EscribirCadenaCola>
				schedulerUpdatePeriod(tareaBlinkyID, periodoActivo);
1a0006a0:	4b18      	ldr	r3, [pc, #96]	; (1a000704 <taskActualizarLeds+0x1a0>)
1a0006a2:	6818      	ldr	r0, [r3, #0]
1a0006a4:	69a1      	ldr	r1, [r4, #24]
1a0006a6:	f000 f83b 	bl	1a000720 <schedulerUpdatePeriod>
1a0006aa:	e01e      	b.n	1a0006ea <taskActualizarLeds+0x186>
			break;

		case 'L':
		case 'l':

			ledIndice++;
1a0006ac:	4a11      	ldr	r2, [pc, #68]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0006ae:	6893      	ldr	r3, [r2, #8]
1a0006b0:	3301      	adds	r3, #1
1a0006b2:	6093      	str	r3, [r2, #8]
			if (ledIndice >= LEDS_L)
1a0006b4:	2b05      	cmp	r3, #5
1a0006b6:	d902      	bls.n	1a0006be <taskActualizarLeds+0x15a>
				ledIndice = 0;
1a0006b8:	2200      	movs	r2, #0
1a0006ba:	4b0e      	ldr	r3, [pc, #56]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0006bc:	609a      	str	r2, [r3, #8]

			gpioWrite(ledActivo, 0);	// apago el led anterior
1a0006be:	4c0e      	ldr	r4, [pc, #56]	; (1a0006f8 <taskActualizarLeds+0x194>)
1a0006c0:	f894 0020 	ldrb.w	r0, [r4, #32]
1a0006c4:	2100      	movs	r1, #0
1a0006c6:	f000 fead 	bl	1a001424 <gpioWrite>
			ledActivo = leds[ledIndice];
1a0006ca:	4b0a      	ldr	r3, [pc, #40]	; (1a0006f4 <taskActualizarLeds+0x190>)
1a0006cc:	689b      	ldr	r3, [r3, #8]
1a0006ce:	4423      	add	r3, r4
1a0006d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a0006d4:	f884 3020 	strb.w	r3, [r4, #32]
			EscribirCadenaCola ("Led activo actualizado\n\r", &colaTx);
1a0006d8:	480d      	ldr	r0, [pc, #52]	; (1a000710 <taskActualizarLeds+0x1ac>)
1a0006da:	4909      	ldr	r1, [pc, #36]	; (1a000700 <taskActualizarLeds+0x19c>)
1a0006dc:	f7ff fe66 	bl	1a0003ac <EscribirCadenaCola>

			break;
1a0006e0:	e003      	b.n	1a0006ea <taskActualizarLeds+0x186>

		default:
			EscribirCadenaCola ("Comando no reconocido\n\r", &colaTx);
1a0006e2:	480c      	ldr	r0, [pc, #48]	; (1a000714 <taskActualizarLeds+0x1b0>)
1a0006e4:	4906      	ldr	r1, [pc, #24]	; (1a000700 <taskActualizarLeds+0x19c>)
1a0006e6:	f7ff fe61 	bl	1a0003ac <EscribirCadenaCola>

		}
	}
	return;
}
1a0006ea:	b006      	add	sp, #24
1a0006ec:	bd10      	pop	{r4, pc}
1a0006ee:	bf00      	nop
1a0006f0:	100001e4 	.word	0x100001e4
1a0006f4:	10000170 	.word	0x10000170
1a0006f8:	10000000 	.word	0x10000000
1a0006fc:	1a002fac 	.word	0x1a002fac
1a000700:	100001a0 	.word	0x100001a0
1a000704:	10000228 	.word	0x10000228
1a000708:	1a002fc4 	.word	0x1a002fc4
1a00070c:	1a002ff4 	.word	0x1a002ff4
1a000710:	1a003014 	.word	0x1a003014
1a000714:	1a003030 	.word	0x1a003030

1a000718 <schedulerGoToSleep>:
to save power. The next clock tick will return the processor
to the normal operating state.
*** May wish to disable this if using a watchdog ***
*** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
-*------------------------------------------------------------------*/
static void schedulerGoToSleep(){
1a000718:	b508      	push	{r3, lr}
   // Se pone el sistema en bajo consumo hasta que ocurra la proxima
   // interrupcion, en este caso la de Tick.
   sleepUntilNextInterrupt();
1a00071a:	f000 f8ad 	bl	1a000878 <sleepUntilNextInterrupt>
1a00071e:	bd08      	pop	{r3, pc}

1a000720 <schedulerUpdatePeriod>:
/*------------------------------------------------------------------*
schedulerUpdatePeriod()
Esta directiva solo modifica el periodo de una tarea
-*------------------------------------------------------------------*/
void schedulerUpdatePeriod( int32_t index, int32_t periodo ) {
	schedulerTasks[index].period = periodo;
1a000720:	4b02      	ldr	r3, [pc, #8]	; (1a00072c <schedulerUpdatePeriod+0xc>)
1a000722:	eb03 1000 	add.w	r0, r3, r0, lsl #4
1a000726:	6081      	str	r1, [r0, #8]
1a000728:	4770      	bx	lr
1a00072a:	bf00      	nop
1a00072c:	1000022c 	.word	0x1000022c

1a000730 <schedulerAddTask>:
Task will be first executed at T = 300 ticks, then 1300, 2300, etc.
-*------------------------------------------------------------------*/
int32_t schedulerAddTask( sAPI_FuncPtr_t pFunction,
                          const int32_t DELAY,
                          const int32_t PERIOD
                        ){
1a000730:	b470      	push	{r4, r5, r6}

   int32_t index = 0;
1a000732:	2300      	movs	r3, #0

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a000734:	e000      	b.n	1a000738 <schedulerAddTask+0x8>
      index++;
1a000736:	3301      	adds	r3, #1
                        ){

   int32_t index = 0;

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a000738:	011c      	lsls	r4, r3, #4
1a00073a:	4d0b      	ldr	r5, [pc, #44]	; (1a000768 <schedulerAddTask+0x38>)
1a00073c:	592c      	ldr	r4, [r5, r4]
1a00073e:	b10c      	cbz	r4, 1a000744 <schedulerAddTask+0x14>
1a000740:	2b03      	cmp	r3, #3
1a000742:	ddf8      	ble.n	1a000736 <schedulerAddTask+0x6>
      index++;
   }

   // Have we reached the end of the list?
   if( index == SCHEDULER_MAX_TASKS ){
1a000744:	2b04      	cmp	r3, #4
1a000746:	d104      	bne.n	1a000752 <schedulerAddTask+0x22>
      // Task list is full
      // Set the global error variable
      errorCode = 2; // ERROR_schedulerTOO_MANYTasks;
1a000748:	2202      	movs	r2, #2
1a00074a:	4b08      	ldr	r3, [pc, #32]	; (1a00076c <schedulerAddTask+0x3c>)
1a00074c:	701a      	strb	r2, [r3, #0]
      // Also return an error code
      return SCHEDULER_MAX_TASKS;
1a00074e:	2004      	movs	r0, #4
1a000750:	e008      	b.n	1a000764 <schedulerAddTask+0x34>
   }

   // If we're here, there is a space in the task array
   schedulerTasks[index].pTask  = pFunction;
1a000752:	4e05      	ldr	r6, [pc, #20]	; (1a000768 <schedulerAddTask+0x38>)
1a000754:	011d      	lsls	r5, r3, #4
1a000756:	1974      	adds	r4, r6, r5
1a000758:	5170      	str	r0, [r6, r5]
   schedulerTasks[index].delay  = DELAY;
1a00075a:	6061      	str	r1, [r4, #4]
   schedulerTasks[index].period = PERIOD;
1a00075c:	60a2      	str	r2, [r4, #8]
   schedulerTasks[index].runMe  = 0;
1a00075e:	2200      	movs	r2, #0
1a000760:	60e2      	str	r2, [r4, #12]

   return index; // return position of task (to allow later deletion)
1a000762:	4618      	mov	r0, r3
}
1a000764:	bc70      	pop	{r4, r5, r6}
1a000766:	4770      	bx	lr
1a000768:	1000022c 	.word	0x1000022c
1a00076c:	1000017c 	.word	0x1000017c

1a000770 <schedulerDeleteTask>:

taskIndex - The task index. Provided by schedulerAddTask().

RETURN VALUE: RETURN_ERROR or RETURN_NORMAL
-*------------------------------------------------------------------*/
int8_t schedulerDeleteTask( int32_t taskIndex ){
1a000770:	b430      	push	{r4, r5}

   int8_t returnCode;

   if(schedulerTasks[taskIndex].pTask == 0){
1a000772:	0103      	lsls	r3, r0, #4
1a000774:	4a09      	ldr	r2, [pc, #36]	; (1a00079c <schedulerDeleteTask+0x2c>)
1a000776:	58d3      	ldr	r3, [r2, r3]
1a000778:	b923      	cbnz	r3, 1a000784 <schedulerDeleteTask+0x14>
      // No task at this location...
      // Set the global error variable
      errorCode = 2; // ERROR_SCH_CANNOT_DELETE_TASK;
1a00077a:	2202      	movs	r2, #2
1a00077c:	4b08      	ldr	r3, [pc, #32]	; (1a0007a0 <schedulerDeleteTask+0x30>)
1a00077e:	701a      	strb	r2, [r3, #0]
      // ...also return an error code
      returnCode = -1; // RETURN_ERROR;
1a000780:	25ff      	movs	r5, #255	; 0xff
1a000782:	e000      	b.n	1a000786 <schedulerDeleteTask+0x16>
   }
   else{
      returnCode = 0; // RETURN_NORMAL;
1a000784:	2500      	movs	r5, #0
   }
   schedulerTasks[taskIndex].pTask = 0x0000;
1a000786:	4c05      	ldr	r4, [pc, #20]	; (1a00079c <schedulerDeleteTask+0x2c>)
1a000788:	0103      	lsls	r3, r0, #4
1a00078a:	18e1      	adds	r1, r4, r3
1a00078c:	2200      	movs	r2, #0
1a00078e:	50e2      	str	r2, [r4, r3]
   schedulerTasks[taskIndex].delay = (int32_t)0;
1a000790:	604a      	str	r2, [r1, #4]
   schedulerTasks[taskIndex].period = (int32_t)0;
1a000792:	608a      	str	r2, [r1, #8]
   schedulerTasks[taskIndex].runMe = (int8_t)0;
1a000794:	60ca      	str	r2, [r1, #12]
   return returnCode; // return status
}
1a000796:	b268      	sxtb	r0, r5
1a000798:	bc30      	pop	{r4, r5}
1a00079a:	4770      	bx	lr
1a00079c:	1000022c 	.word	0x1000022c
1a0007a0:	1000017c 	.word	0x1000017c

1a0007a4 <schedulerDispatchTasks>:
schedulerDispatchTasks()
This is the 'dispatcher' function. When a task (function)
is due to run, schedulerDispatchTasks() will run it.
This function must be called (repeatedly) from the main loop.
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){
1a0007a4:	b538      	push	{r3, r4, r5, lr}

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0007a6:	2400      	movs	r4, #0
1a0007a8:	e014      	b.n	1a0007d4 <schedulerDispatchTasks+0x30>

      if (schedulerTasks[index].runMe > 0){
1a0007aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0007e0 <schedulerDispatchTasks+0x3c>)
1a0007ac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a0007b0:	68db      	ldr	r3, [r3, #12]
1a0007b2:	2b00      	cmp	r3, #0
1a0007b4:	dd0d      	ble.n	1a0007d2 <schedulerDispatchTasks+0x2e>

         (*schedulerTasks[index].pTask)(0); // Run the task
1a0007b6:	4a0a      	ldr	r2, [pc, #40]	; (1a0007e0 <schedulerDispatchTasks+0x3c>)
1a0007b8:	0123      	lsls	r3, r4, #4
1a0007ba:	18d5      	adds	r5, r2, r3
1a0007bc:	58d3      	ldr	r3, [r2, r3]
1a0007be:	2000      	movs	r0, #0
1a0007c0:	4798      	blx	r3
         schedulerTasks[index].runMe -= 1; // Reset/reduce runMe flag
1a0007c2:	68eb      	ldr	r3, [r5, #12]
1a0007c4:	3b01      	subs	r3, #1
1a0007c6:	60eb      	str	r3, [r5, #12]

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if (schedulerTasks[index].period == 0){
1a0007c8:	68ab      	ldr	r3, [r5, #8]
1a0007ca:	b913      	cbnz	r3, 1a0007d2 <schedulerDispatchTasks+0x2e>
            schedulerDeleteTask(index);
1a0007cc:	4620      	mov	r0, r4
1a0007ce:	f7ff ffcf 	bl	1a000770 <schedulerDeleteTask>
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0007d2:	3401      	adds	r4, #1
1a0007d4:	2c03      	cmp	r4, #3
1a0007d6:	dde8      	ble.n	1a0007aa <schedulerDispatchTasks+0x6>
   }

   // Report system status
   schedulerReportStatus();
   // The scheduler enters idle mode at this point32_t
   schedulerGoToSleep();
1a0007d8:	f7ff ff9e 	bl	1a000718 <schedulerGoToSleep>
1a0007dc:	bd38      	pop	{r3, r4, r5, pc}
1a0007de:	bf00      	nop
1a0007e0:	1000022c 	.word	0x1000022c

1a0007e4 <schedulerReportStatus>:
After this the the error code is reset to 0.
This code may be easily adapted to display the last
error 'for ever': this may be appropriate in your
application.
-*------------------------------------------------------------------*/
void schedulerReportStatus( void ){
1a0007e4:	4770      	bx	lr
1a0007e6:	bf00      	nop

1a0007e8 <main>:

/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

int main( void ){
1a0007e8:	b508      	push	{r3, lr}

	//Inicializar el hardware, perifericos, puertos, clock, etc.
	boardConfig();
1a0007ea:	f000 fbed 	bl	1a000fc8 <boardConfig>
	// Inicializar UART_USB como salida de consola
	debugPrintConfigUart( UART_USB, UART_BAUD_RATE );
1a0007ee:	4c1a      	ldr	r4, [pc, #104]	; (1a000858 <main+0x70>)
1a0007f0:	4620      	mov	r0, r4
1a0007f2:	2100      	movs	r1, #0
1a0007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a0007f8:	f000 fba0 	bl	1a000f3c <printConfigUart>
	debugPrintlnString( "UART_USB configurada.\n\r" );
1a0007fc:	7820      	ldrb	r0, [r4, #0]
1a0007fe:	4917      	ldr	r1, [pc, #92]	; (1a00085c <main+0x74>)
1a000800:	f000 fba4 	bl	1a000f4c <printString>
1a000804:	7820      	ldrb	r0, [r4, #0]
1a000806:	f000 fba5 	bl	1a000f54 <printEnter>

	// uartWriteString(UART_USB, menu);

	//FUNCION que inicializa el planificador de tareas
	schedulerInit();
1a00080a:	f7ff fe41 	bl	1a000490 <schedulerInit>
	//Cargar las tareas del sistema operativo con sus periodicidades
	tareaBlinkyID = schedulerAddTask( (sAPI_FuncPtr_t) taskBlinkLed, 0, BLINK_TIME_PERIOD );
1a00080e:	4814      	ldr	r0, [pc, #80]	; (1a000860 <main+0x78>)
1a000810:	2100      	movs	r1, #0
1a000812:	2232      	movs	r2, #50	; 0x32
1a000814:	f7ff ff8c 	bl	1a000730 <schedulerAddTask>
1a000818:	4b12      	ldr	r3, [pc, #72]	; (1a000864 <main+0x7c>)
1a00081a:	6018      	str	r0, [r3, #0]
// 	schedulerAddTask( (sAPI_FuncPtr_t) taskMenuUpdate, 1, CONSOLE_TIME_PERIOD );
	schedulerAddTask( (sAPI_FuncPtr_t) taskActualizarLeds, 1, BLINK_TIME_PERIOD );
1a00081c:	4812      	ldr	r0, [pc, #72]	; (1a000868 <main+0x80>)
1a00081e:	2101      	movs	r1, #1
1a000820:	2232      	movs	r2, #50	; 0x32
1a000822:	f7ff ff85 	bl	1a000730 <schedulerAddTask>

	schedulerAddTask( (sAPI_FuncPtr_t) taskUARTPutChar, 3, UART_PUT_CHAR_TIME_PERIOD );
1a000826:	4811      	ldr	r0, [pc, #68]	; (1a00086c <main+0x84>)
1a000828:	2103      	movs	r1, #3
1a00082a:	2219      	movs	r2, #25
1a00082c:	f7ff ff80 	bl	1a000730 <schedulerAddTask>
	schedulerAddTask( (sAPI_FuncPtr_t) taskUARTGetChar, 2, UART_GET_CHAR_TIME_PERIOD );
1a000830:	480f      	ldr	r0, [pc, #60]	; (1a000870 <main+0x88>)
1a000832:	2102      	movs	r1, #2
1a000834:	2219      	movs	r2, #25
1a000836:	f7ff ff7b 	bl	1a000730 <schedulerAddTask>


	//Iniciar el planificador de tareas
	schedulerStart( 1 );
1a00083a:	2001      	movs	r0, #1
1a00083c:	2100      	movs	r1, #0
1a00083e:	f7ff fe37 	bl	1a0004b0 <schedulerStart>

	debugPrintlnString(menu);
1a000842:	7820      	ldrb	r0, [r4, #0]
1a000844:	490b      	ldr	r1, [pc, #44]	; (1a000874 <main+0x8c>)
1a000846:	f000 fb81 	bl	1a000f4c <printString>
1a00084a:	7820      	ldrb	r0, [r4, #0]
1a00084c:	f000 fb82 	bl	1a000f54 <printEnter>
	//Lazo infinito

	while(TRUE) {
		//Ejecutar tareas
		schedulerDispatchTasks();
1a000850:	f7ff ffa8 	bl	1a0007a4 <schedulerDispatchTasks>
	}
1a000854:	e7fc      	b.n	1a000850 <main+0x68>
1a000856:	bf00      	nop
1a000858:	1000017d 	.word	0x1000017d
1a00085c:	1a003048 	.word	0x1a003048
1a000860:	1a0004f1 	.word	0x1a0004f1
1a000864:	10000228 	.word	0x10000228
1a000868:	1a000565 	.word	0x1a000565
1a00086c:	1a000425 	.word	0x1a000425
1a000870:	1a0003ed 	.word	0x1a0003ed
1a000874:	10000030 	.word	0x10000030

1a000878 <sleepUntilNextInterrupt>:
 * @return nothing
 */
void sleepUntilNextInterrupt( void ){

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a000878:	bf30      	wfi
1a00087a:	4770      	bx	lr

1a00087c <uartConfig>:

   return retVal;
}


void uartConfig( uartMap_t uart, uint32_t baudRate ){
1a00087c:	b538      	push	{r3, r4, r5, lr}
1a00087e:	460c      	mov	r4, r1
   switch(uart){
1a000880:	b110      	cbz	r0, 1a000888 <uartConfig+0xc>
1a000882:	2801      	cmp	r0, #1
1a000884:	d013      	beq.n	1a0008ae <uartConfig+0x32>
1a000886:	bd38      	pop	{r3, r4, r5, pc}
   case UART_USB:
      Chip_UART_Init(UART_USB_LPC);
1a000888:	4d12      	ldr	r5, [pc, #72]	; (1a0008d4 <uartConfig+0x58>)
1a00088a:	4628      	mov	r0, r5
1a00088c:	f000 ffd4 	bl	1a001838 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_USB_LPC, baudRate);  /* Set Baud rate */
1a000890:	4628      	mov	r0, r5
1a000892:	4621      	mov	r1, r4
1a000894:	f001 f856 	bl	1a001944 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a000898:	2301      	movs	r3, #1
1a00089a:	60ab      	str	r3, [r5, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00089c:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00089e:	4b0e      	ldr	r3, [pc, #56]	; (1a0008d8 <uartConfig+0x5c>)
1a0008a0:	221e      	movs	r2, #30
1a0008a2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a0008a6:	22d6      	movs	r2, #214	; 0xd6
1a0008a8:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a0008ac:	bd38      	pop	{r3, r4, r5, pc}
      //   NVIC_SetPriority(USART2_IRQn, 6);
      // Enable Interrupt for UART channel
      //   NVIC_EnableIRQ(USART2_IRQn);
   break;
   case UART_232:
      Chip_UART_Init(UART_232_LPC);
1a0008ae:	4d0b      	ldr	r5, [pc, #44]	; (1a0008dc <uartConfig+0x60>)
1a0008b0:	4628      	mov	r0, r5
1a0008b2:	f000 ffc1 	bl	1a001838 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_232_LPC, baudRate);  /* Set Baud rate */
1a0008b6:	4628      	mov	r0, r5
1a0008b8:	4621      	mov	r1, r4
1a0008ba:	f001 f843 	bl	1a001944 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0008be:	2301      	movs	r3, #1
1a0008c0:	60ab      	str	r3, [r5, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0008c2:	65eb      	str	r3, [r5, #92]	; 0x5c
1a0008c4:	4b04      	ldr	r3, [pc, #16]	; (1a0008d8 <uartConfig+0x5c>)
1a0008c6:	221a      	movs	r2, #26
1a0008c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a0008cc:	22d2      	movs	r2, #210	; 0xd2
1a0008ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a0008d2:	bd38      	pop	{r3, r4, r5, pc}
1a0008d4:	400c1000 	.word	0x400c1000
1a0008d8:	40086000 	.word	0x40086000
1a0008dc:	400c2000 	.word	0x400c2000

1a0008e0 <uartReadByte>:

bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;

   switch(uart){
1a0008e0:	b110      	cbz	r0, 1a0008e8 <uartReadByte+0x8>
1a0008e2:	2801      	cmp	r0, #1
1a0008e4:	d00a      	beq.n	1a0008fc <uartReadByte+0x1c>
1a0008e6:	e013      	b.n	1a000910 <uartReadByte+0x30>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0008e8:	4b0c      	ldr	r3, [pc, #48]	; (1a00091c <uartReadByte+0x3c>)
1a0008ea:	695b      	ldr	r3, [r3, #20]
   case UART_USB:
      if ( Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_RDR ) {
1a0008ec:	f013 0f01 	tst.w	r3, #1
1a0008f0:	d010      	beq.n	1a000914 <uartReadByte+0x34>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0008f2:	4b0a      	ldr	r3, [pc, #40]	; (1a00091c <uartReadByte+0x3c>)
1a0008f4:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_USB_LPC);
1a0008f6:	700b      	strb	r3, [r1, #0]
}


bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;
1a0008f8:	2001      	movs	r0, #1
1a0008fa:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0008fc:	4b08      	ldr	r3, [pc, #32]	; (1a000920 <uartReadByte+0x40>)
1a0008fe:	695b      	ldr	r3, [r3, #20]
      } else{
         retVal = FALSE;
      }
   break;
   case UART_232:
      if ( Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_RDR ) {
1a000900:	f013 0f01 	tst.w	r3, #1
1a000904:	d008      	beq.n	1a000918 <uartReadByte+0x38>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000906:	4b06      	ldr	r3, [pc, #24]	; (1a000920 <uartReadByte+0x40>)
1a000908:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_232_LPC);
1a00090a:	700b      	strb	r3, [r1, #0]
}


bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;
1a00090c:	2001      	movs	r0, #1
1a00090e:	4770      	bx	lr
1a000910:	2001      	movs	r0, #1
1a000912:	4770      	bx	lr
   switch(uart){
   case UART_USB:
      if ( Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_RDR ) {
         *receivedByte = Chip_UART_ReadByte(UART_USB_LPC);
      } else{
         retVal = FALSE;
1a000914:	2000      	movs	r0, #0
1a000916:	4770      	bx	lr
   break;
   case UART_232:
      if ( Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_RDR ) {
         *receivedByte = Chip_UART_ReadByte(UART_232_LPC);
      } else{
         retVal = FALSE;
1a000918:	2000      	movs	r0, #0
   case UART_485:
   break;
   }

   return retVal;
}
1a00091a:	4770      	bx	lr
1a00091c:	400c1000 	.word	0x400c1000
1a000920:	400c2000 	.word	0x400c2000

1a000924 <uartWriteByte>:


void uartWriteByte( uartMap_t uart, uint8_t byte ){

   switch(uart){
1a000924:	b110      	cbz	r0, 1a00092c <uartWriteByte+0x8>
1a000926:	2801      	cmp	r0, #1
1a000928:	d008      	beq.n	1a00093c <uartWriteByte+0x18>
1a00092a:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00092c:	4b07      	ldr	r3, [pc, #28]	; (1a00094c <uartWriteByte+0x28>)
1a00092e:	695b      	ldr	r3, [r3, #20]
   case UART_USB:
      while ((Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a000930:	f013 0f20 	tst.w	r3, #32
1a000934:	d0fa      	beq.n	1a00092c <uartWriteByte+0x8>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000936:	4b05      	ldr	r3, [pc, #20]	; (1a00094c <uartWriteByte+0x28>)
1a000938:	6019      	str	r1, [r3, #0]
1a00093a:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00093c:	4b04      	ldr	r3, [pc, #16]	; (1a000950 <uartWriteByte+0x2c>)
1a00093e:	695b      	ldr	r3, [r3, #20]
      Chip_UART_SendByte(UART_USB_LPC, byte);
   break;
   case UART_232:
      while ((Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a000940:	f013 0f20 	tst.w	r3, #32
1a000944:	d0fa      	beq.n	1a00093c <uartWriteByte+0x18>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000946:	4b02      	ldr	r3, [pc, #8]	; (1a000950 <uartWriteByte+0x2c>)
1a000948:	6019      	str	r1, [r3, #0]
1a00094a:	4770      	bx	lr
1a00094c:	400c1000 	.word	0x400c1000
1a000950:	400c2000 	.word	0x400c2000

1a000954 <waitForReceiveStringOrTimeout>:
/*==================[external data declaration]==============================*/

/*==================[external functions declaration]=========================*/

waitForReceiveStringOrTimeoutState_t waitForReceiveStringOrTimeout(
   uartMap_t uart, waitForReceiveStringOrTimeout_t* instance ){
1a000954:	b510      	push	{r4, lr}
1a000956:	b082      	sub	sp, #8
1a000958:	460c      	mov	r4, r1

   uint8_t receiveByte;

   switch( instance->state ){
1a00095a:	780b      	ldrb	r3, [r1, #0]
1a00095c:	2b03      	cmp	r3, #3
1a00095e:	d836      	bhi.n	1a0009ce <waitForReceiveStringOrTimeout+0x7a>
1a000960:	e8df f003 	tbb	[pc, r3]
1a000964:	322f0d02 	.word	0x322f0d02

      case UART_RECEIVE_STRING_CONFIG:

         delayConfig( &(instance->delay), instance->timeout );
1a000968:	f101 0018 	add.w	r0, r1, #24
1a00096c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a000970:	f000 fa4a 	bl	1a000e08 <delayConfig>

         instance->stringIndex = 0;
1a000974:	2300      	movs	r3, #0
1a000976:	8163      	strh	r3, [r4, #10]

         instance->state = UART_RECEIVE_STRING_RECEIVING;
1a000978:	2301      	movs	r3, #1
1a00097a:	7023      	strb	r3, [r4, #0]

      break;
1a00097c:	e029      	b.n	1a0009d2 <waitForReceiveStringOrTimeout+0x7e>

      case UART_RECEIVE_STRING_RECEIVING:

         if( uartReadByte( uart, &receiveByte ) ){
1a00097e:	f10d 0107 	add.w	r1, sp, #7
1a000982:	f7ff ffad 	bl	1a0008e0 <uartReadByte>
1a000986:	b1a0      	cbz	r0, 1a0009b2 <waitForReceiveStringOrTimeout+0x5e>

            // TODO: DEBUG
            uartWriteByte( UART_USB, receiveByte );
1a000988:	2000      	movs	r0, #0
1a00098a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00098e:	f7ff ffc9 	bl	1a000924 <uartWriteByte>

            if( (instance->string)[(instance->stringIndex)] == receiveByte ){
1a000992:	6862      	ldr	r2, [r4, #4]
1a000994:	8963      	ldrh	r3, [r4, #10]
1a000996:	5cd1      	ldrb	r1, [r2, r3]
1a000998:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a00099c:	4291      	cmp	r1, r2
1a00099e:	d108      	bne.n	1a0009b2 <waitForReceiveStringOrTimeout+0x5e>

               (instance->stringIndex)++;
1a0009a0:	3301      	adds	r3, #1
1a0009a2:	b29b      	uxth	r3, r3
1a0009a4:	8163      	strh	r3, [r4, #10]

               if( (instance->stringIndex) == (instance->stringSize - 1) ){
1a0009a6:	8922      	ldrh	r2, [r4, #8]
1a0009a8:	3a01      	subs	r2, #1
1a0009aa:	4293      	cmp	r3, r2
1a0009ac:	d101      	bne.n	1a0009b2 <waitForReceiveStringOrTimeout+0x5e>
                  instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a0009ae:	2302      	movs	r3, #2
1a0009b0:	7023      	strb	r3, [r4, #0]

            }

         }

         if( delayRead( &(instance->delay) ) ){
1a0009b2:	f104 0018 	add.w	r0, r4, #24
1a0009b6:	f000 fa37 	bl	1a000e28 <delayRead>
1a0009ba:	b150      	cbz	r0, 1a0009d2 <waitForReceiveStringOrTimeout+0x7e>
            instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a0009bc:	2303      	movs	r3, #3
1a0009be:	7023      	strb	r3, [r4, #0]
1a0009c0:	e007      	b.n	1a0009d2 <waitForReceiveStringOrTimeout+0x7e>
         }

      break;

      case UART_RECEIVE_STRING_RECEIVED_OK:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0009c2:	2300      	movs	r3, #0
1a0009c4:	700b      	strb	r3, [r1, #0]
      break;
1a0009c6:	e004      	b.n	1a0009d2 <waitForReceiveStringOrTimeout+0x7e>

      case UART_RECEIVE_STRING_TIMEOUT:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0009c8:	2300      	movs	r3, #0
1a0009ca:	700b      	strb	r3, [r1, #0]
      break;
1a0009cc:	e001      	b.n	1a0009d2 <waitForReceiveStringOrTimeout+0x7e>

      default:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0009ce:	2300      	movs	r3, #0
1a0009d0:	700b      	strb	r3, [r1, #0]
      break;
   }

   return instance->state;
}
1a0009d2:	7820      	ldrb	r0, [r4, #0]
1a0009d4:	b002      	add	sp, #8
1a0009d6:	bd10      	pop	{r4, pc}

1a0009d8 <waitForReceiveStringOrTimeoutBlocking>:



bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout ){
1a0009d8:	b510      	push	{r4, lr}
1a0009da:	b08c      	sub	sp, #48	; 0x30
1a0009dc:	4604      	mov	r4, r0
   waitForReceiveStringOrTimeout_t waitText;
   waitForReceiveStringOrTimeoutState_t waitTextState;

   waitTextState = UART_RECEIVE_STRING_CONFIG;

   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a0009de:	2000      	movs	r0, #0
1a0009e0:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a0009e4:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a0009e6:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a0009ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a0009ee:	e9cd 2304 	strd	r2, r3, [sp, #16]

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0009f2:	e003      	b.n	1a0009fc <waitForReceiveStringOrTimeoutBlocking+0x24>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a0009f4:	4620      	mov	r0, r4
1a0009f6:	4669      	mov	r1, sp
1a0009f8:	f7ff ffac 	bl	1a000954 <waitForReceiveStringOrTimeout>
   waitText.state = UART_RECEIVE_STRING_CONFIG;
   waitText.string =  string;
   waitText.stringSize = stringSize;
   waitText.timeout = timeout;

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0009fc:	1e83      	subs	r3, r0, #2
1a0009fe:	b2db      	uxtb	r3, r3
1a000a00:	2b01      	cmp	r3, #1
1a000a02:	d8f7      	bhi.n	1a0009f4 <waitForReceiveStringOrTimeoutBlocking+0x1c>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ){
1a000a04:	2803      	cmp	r0, #3
1a000a06:	d001      	beq.n	1a000a0c <waitForReceiveStringOrTimeoutBlocking+0x34>


bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout ){

   bool_t retVal = TRUE; // True if OK
1a000a08:	2001      	movs	r0, #1
1a000a0a:	e000      	b.n	1a000a0e <waitForReceiveStringOrTimeoutBlocking+0x36>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ){
      retVal = FALSE;
1a000a0c:	2000      	movs	r0, #0
   }

   return retVal;
}
1a000a0e:	b00c      	add	sp, #48	; 0x30
1a000a10:	bd10      	pop	{r4, pc}
1a000a12:	bf00      	nop

1a000a14 <uartWriteString>:
   break;
   }
}


void uartWriteString( uartMap_t uart, char* str ){
1a000a14:	b538      	push	{r3, r4, r5, lr}
1a000a16:	4605      	mov	r5, r0
1a000a18:	460c      	mov	r4, r1
   while(*str != 0){
1a000a1a:	e003      	b.n	1a000a24 <uartWriteString+0x10>
	  uartWriteByte( uart, (uint8_t)*str );
1a000a1c:	4628      	mov	r0, r5
1a000a1e:	f7ff ff81 	bl	1a000924 <uartWriteByte>
	  str++;
1a000a22:	3401      	adds	r4, #1
   }
}


void uartWriteString( uartMap_t uart, char* str ){
   while(*str != 0){
1a000a24:	7821      	ldrb	r1, [r4, #0]
1a000a26:	2900      	cmp	r1, #0
1a000a28:	d1f8      	bne.n	1a000a1c <uartWriteString+0x8>
	  uartWriteByte( uart, (uint8_t)*str );
	  str++;
   }
}
1a000a2a:	bd38      	pop	{r3, r4, r5, pc}

1a000a2c <UART2_IRQHandler>:
/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a000a2c:	4770      	bx	lr
1a000a2e:	bf00      	nop

1a000a30 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a000a30:	4770      	bx	lr
1a000a32:	bf00      	nop

1a000a34 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a000a34:	2001      	movs	r0, #1
1a000a36:	4770      	bx	lr

1a000a38 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
   while(1);
1a000a38:	e7fe      	b.n	1a000a38 <errorOcurred>
1a000a3a:	bf00      	nop

1a000a3c <doNothing>:
}

static void doNothing(void){
1a000a3c:	4770      	bx	lr
1a000a3e:	bf00      	nop

1a000a40 <Timer_Init>:
 * @param   voidFunctionPointer:   function to be executed at the end of the timer cycle
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 voidFunctionPointer_t voidFunctionPointer){
1a000a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0){
1a000a44:	b909      	cbnz	r1, 1a000a4a <Timer_Init+0xa>
      errorOcurred();
1a000a46:	f7ff fff7 	bl	1a000a38 <errorOcurred>
1a000a4a:	4605      	mov	r5, r0
1a000a4c:	4617      	mov	r7, r2
1a000a4e:	460e      	mov	r6, r1
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a000a50:	4604      	mov	r4, r0
1a000a52:	4a39      	ldr	r2, [pc, #228]	; (1a000b38 <Timer_Init+0xf8>)
1a000a54:	0043      	lsls	r3, r0, #1
1a000a56:	4403      	add	r3, r0
1a000a58:	009b      	lsls	r3, r3, #2
1a000a5a:	eb02 0803 	add.w	r8, r2, r3
1a000a5e:	58d0      	ldr	r0, [r2, r3]
1a000a60:	f001 ff0c 	bl	1a00287c <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a000a64:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a000a68:	095a      	lsrs	r2, r3, #5
1a000a6a:	f003 031f 	and.w	r3, r3, #31
1a000a6e:	2101      	movs	r1, #1
1a000a70:	4099      	lsls	r1, r3
1a000a72:	f102 0340 	add.w	r3, r2, #64	; 0x40
1a000a76:	4a31      	ldr	r2, [pc, #196]	; (1a000b3c <Timer_Init+0xfc>)
1a000a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a000a7c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000a80:	009b      	lsls	r3, r3, #2
1a000a82:	4a2d      	ldr	r2, [pc, #180]	; (1a000b38 <Timer_Init+0xf8>)
1a000a84:	4413      	add	r3, r2
1a000a86:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a000a88:	095a      	lsrs	r2, r3, #5
1a000a8a:	3254      	adds	r2, #84	; 0x54
1a000a8c:	492b      	ldr	r1, [pc, #172]	; (1a000b3c <Timer_Init+0xfc>)
1a000a8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a000a92:	f003 031f 	and.w	r3, r3, #31
1a000a96:	2201      	movs	r2, #1
1a000a98:	fa02 f303 	lsl.w	r3, r2, r3
1a000a9c:	4219      	tst	r1, r3
1a000a9e:	d0ed      	beq.n	1a000a7c <Timer_Init+0x3c>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a000aa0:	4a25      	ldr	r2, [pc, #148]	; (1a000b38 <Timer_Init+0xf8>)
1a000aa2:	006b      	lsls	r3, r5, #1
1a000aa4:	442b      	add	r3, r5
1a000aa6:	009b      	lsls	r3, r3, #2
1a000aa8:	eb02 0803 	add.w	r8, r2, r3
1a000aac:	58d4      	ldr	r4, [r2, r3]
1a000aae:	4620      	mov	r0, r4
1a000ab0:	f001 fef0 	bl	1a002894 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a000ab4:	012b      	lsls	r3, r5, #4
1a000ab6:	4a22      	ldr	r2, [pc, #136]	; (1a000b40 <Timer_Init+0x100>)
1a000ab8:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a000aba:	6963      	ldr	r3, [r4, #20]
1a000abc:	f043 0301 	orr.w	r3, r3, #1
1a000ac0:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a000ac2:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a000ac4:	6963      	ldr	r3, [r4, #20]
1a000ac6:	f043 0302 	orr.w	r3, r3, #2
1a000aca:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR |= TIMER_ENABLE;
1a000acc:	6863      	ldr	r3, [r4, #4]
1a000ace:	f043 0301 	orr.w	r3, r3, #1
1a000ad2:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a000ad4:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a000ad8:	b2d3      	uxtb	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
1a000ada:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ade:	d006      	beq.n	1a000aee <Timer_Init+0xae>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000ae0:	f002 020f 	and.w	r2, r2, #15
1a000ae4:	4b17      	ldr	r3, [pc, #92]	; (1a000b44 <Timer_Init+0x104>)
1a000ae6:	4413      	add	r3, r2
1a000ae8:	22c0      	movs	r2, #192	; 0xc0
1a000aea:	761a      	strb	r2, [r3, #24]
1a000aec:	e005      	b.n	1a000afa <Timer_Init+0xba>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a000aee:	4a16      	ldr	r2, [pc, #88]	; (1a000b48 <Timer_Init+0x108>)
1a000af0:	fa42 f383 	sxtab	r3, r2, r3
1a000af4:	22c0      	movs	r2, #192	; 0xc0
1a000af6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a000afa:	4c0f      	ldr	r4, [pc, #60]	; (1a000b38 <Timer_Init+0xf8>)
1a000afc:	006e      	lsls	r6, r5, #1
1a000afe:	1973      	adds	r3, r6, r5
1a000b00:	009b      	lsls	r3, r3, #2
1a000b02:	4423      	add	r3, r4
1a000b04:	689b      	ldr	r3, [r3, #8]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000b06:	b259      	sxtb	r1, r3
1a000b08:	0949      	lsrs	r1, r1, #5
1a000b0a:	f003 031f 	and.w	r3, r3, #31
1a000b0e:	2201      	movs	r2, #1
1a000b10:	fa02 f303 	lsl.w	r3, r2, r3
1a000b14:	480c      	ldr	r0, [pc, #48]	; (1a000b48 <Timer_Init+0x108>)
1a000b16:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a000b1a:	4435      	add	r5, r6
1a000b1c:	00ad      	lsls	r5, r5, #2
1a000b1e:	4425      	add	r5, r4
1a000b20:	68a9      	ldr	r1, [r5, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a000b22:	b24b      	sxtb	r3, r1
1a000b24:	095b      	lsrs	r3, r3, #5
1a000b26:	f001 011f 	and.w	r1, r1, #31
1a000b2a:	408a      	lsls	r2, r1
1a000b2c:	3360      	adds	r3, #96	; 0x60
1a000b2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
1a000b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000b36:	bf00      	nop
1a000b38:	1a003060 	.word	0x1a003060
1a000b3c:	40053000 	.word	0x40053000
1a000b40:	10000128 	.word	0x10000128
1a000b44:	e000ecfc 	.word	0xe000ecfc
1a000b48:	e000e100 	.word	0xe000e100

1a000b4c <Timer_DeInit>:
/*
 * @Brief   Disables timer peripheral
 * @param   timerNumber:   Timer number, 0 to 3
 * @return   nothing
 */
void Timer_DeInit(uint8_t timerNumber){
1a000b4c:	b538      	push	{r3, r4, r5, lr}
   NVIC_DisableIRQ(timer_sd[timerNumber].IRQn);
1a000b4e:	4c0d      	ldr	r4, [pc, #52]	; (1a000b84 <Timer_DeInit+0x38>)
1a000b50:	0045      	lsls	r5, r0, #1
1a000b52:	182b      	adds	r3, r5, r0
1a000b54:	009b      	lsls	r3, r3, #2
1a000b56:	4423      	add	r3, r4
1a000b58:	689a      	ldr	r2, [r3, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a000b5a:	b253      	sxtb	r3, r2
1a000b5c:	095b      	lsrs	r3, r3, #5
1a000b5e:	f002 021f 	and.w	r2, r2, #31
1a000b62:	2101      	movs	r1, #1
1a000b64:	fa01 f202 	lsl.w	r2, r1, r2
1a000b68:	3320      	adds	r3, #32
1a000b6a:	4907      	ldr	r1, [pc, #28]	; (1a000b88 <Timer_DeInit+0x3c>)
1a000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_TIMER_Disable(timer_sd[timerNumber].name);
1a000b70:	4428      	add	r0, r5
1a000b72:	0080      	lsls	r0, r0, #2
1a000b74:	5820      	ldr	r0, [r4, r0]
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR &= ~TIMER_ENABLE;
1a000b76:	6843      	ldr	r3, [r0, #4]
1a000b78:	f023 0301 	bic.w	r3, r3, #1
1a000b7c:	6043      	str	r3, [r0, #4]
   Chip_TIMER_DeInit(timer_sd[timerNumber].name);
1a000b7e:	f001 fe83 	bl	1a002888 <Chip_TIMER_DeInit>
1a000b82:	bd38      	pop	{r3, r4, r5, pc}
1a000b84:	1a003060 	.word	0x1a003060
1a000b88:	e000e100 	.word	0xe000e100

1a000b8c <Timer_microsecondsToTicks>:
 * @return   Equivalent in Ticks for the LPC4337
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks(uint32_t uS){
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a000b8c:	23cc      	movs	r3, #204	; 0xcc
1a000b8e:	fb03 f000 	mul.w	r0, r3, r0
1a000b92:	4770      	bx	lr

1a000b94 <Timer_EnableCompareMatch>:
 * @return   None
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               voidFunctionPointer_t voidFunctionPointer){
1a000b94:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a000b96:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a000b9a:	4c0a      	ldr	r4, [pc, #40]	; (1a000bc4 <Timer_EnableCompareMatch+0x30>)
1a000b9c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a000ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000ba4:	0080      	lsls	r0, r0, #2
1a000ba6:	4b08      	ldr	r3, [pc, #32]	; (1a000bc8 <Timer_EnableCompareMatch+0x34>)
1a000ba8:	5818      	ldr	r0, [r3, r0]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a000baa:	6944      	ldr	r4, [r0, #20]
1a000bac:	b249      	sxtb	r1, r1
1a000bae:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a000bb2:	2301      	movs	r3, #1
1a000bb4:	40ab      	lsls	r3, r5
1a000bb6:	4323      	orrs	r3, r4
1a000bb8:	6143      	str	r3, [r0, #20]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a000bba:	3106      	adds	r1, #6
1a000bbc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a000bc0:	bc30      	pop	{r4, r5}
1a000bc2:	4770      	bx	lr
1a000bc4:	10000128 	.word	0x10000128
1a000bc8:	1a003060 	.word	0x1a003060

1a000bcc <Timer_DisableCompareMatch>:
 * @param   timerNumber:   Timer number, 0 to 3
 * @param   compareMatchNumber:   Compare match number, 1 to 3
 * @return   None
 */
void Timer_DisableCompareMatch( uint8_t timerNumber,
                                uint8_t compareMatchNumber ){
1a000bcc:	b410      	push	{r4}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = errorOcurred;
1a000bce:	eb01 0280 	add.w	r2, r1, r0, lsl #2
1a000bd2:	4c0c      	ldr	r4, [pc, #48]	; (1a000c04 <Timer_DisableCompareMatch+0x38>)
1a000bd4:	4b0c      	ldr	r3, [pc, #48]	; (1a000c08 <Timer_DisableCompareMatch+0x3c>)
1a000bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]

   Chip_TIMER_ClearMatch(timer_sd[timerNumber].name, compareMatchNumber);
1a000bda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000bde:	0080      	lsls	r0, r0, #2
1a000be0:	4b0a      	ldr	r3, [pc, #40]	; (1a000c0c <Timer_DisableCompareMatch+0x40>)
1a000be2:	581a      	ldr	r2, [r3, r0]
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000be4:	b249      	sxtb	r1, r1
1a000be6:	2301      	movs	r3, #1
1a000be8:	fa03 f001 	lsl.w	r0, r3, r1
1a000bec:	6010      	str	r0, [r2, #0]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a000bee:	6950      	ldr	r0, [r2, #20]
1a000bf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a000bf4:	408b      	lsls	r3, r1
1a000bf6:	ea20 0303 	bic.w	r3, r0, r3
1a000bfa:	6153      	str	r3, [r2, #20]
   Chip_TIMER_MatchDisableInt(timer_sd[timerNumber].name, compareMatchNumber);
}
1a000bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000c00:	4770      	bx	lr
1a000c02:	bf00      	nop
1a000c04:	1a000a39 	.word	0x1a000a39
1a000c08:	10000128 	.word	0x10000128
1a000c0c:	1a003060 	.word	0x1a003060

1a000c10 <Timer_SetCompareMatch>:
 *    interruption
 */
void Timer_SetCompareMatch( uint8_t timerNumber,
                            uint8_t compareMatchNumber,
                            uint32_t ticks){
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber,ticks);
1a000c10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000c14:	0080      	lsls	r0, r0, #2
1a000c16:	4b03      	ldr	r3, [pc, #12]	; (1a000c24 <Timer_SetCompareMatch+0x14>)
1a000c18:	581b      	ldr	r3, [r3, r0]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a000c1a:	b249      	sxtb	r1, r1
1a000c1c:	3106      	adds	r1, #6
1a000c1e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
1a000c22:	4770      	bx	lr
1a000c24:	1a003060 	.word	0x1a003060

1a000c28 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a000c28:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c2a:	2400      	movs	r4, #0
1a000c2c:	e012      	b.n	1a000c54 <TIMER0_IRQHandler+0x2c>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c2e:	4b0b      	ldr	r3, [pc, #44]	; (1a000c5c <TIMER0_IRQHandler+0x34>)
1a000c30:	681a      	ldr	r2, [r3, #0]
1a000c32:	f004 010f 	and.w	r1, r4, #15
1a000c36:	2301      	movs	r3, #1
1a000c38:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a000c3a:	421a      	tst	r2, r3
1a000c3c:	d008      	beq.n	1a000c50 <TIMER0_IRQHandler+0x28>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000c3e:	4b08      	ldr	r3, [pc, #32]	; (1a000c60 <TIMER0_IRQHandler+0x38>)
1a000c40:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000c44:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c46:	b262      	sxtb	r2, r4
1a000c48:	2301      	movs	r3, #1
1a000c4a:	4093      	lsls	r3, r2
1a000c4c:	4a03      	ldr	r2, [pc, #12]	; (1a000c5c <TIMER0_IRQHandler+0x34>)
1a000c4e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000c50:	3401      	adds	r4, #1
1a000c52:	b2e4      	uxtb	r4, r4
 */
void TIMER0_IRQHandler(void){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c54:	2c03      	cmp	r4, #3
1a000c56:	d9ea      	bls.n	1a000c2e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000c58:	bd10      	pop	{r4, pc}
1a000c5a:	bf00      	nop
1a000c5c:	40084000 	.word	0x40084000
1a000c60:	10000128 	.word	0x10000128

1a000c64 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a000c64:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c66:	2400      	movs	r4, #0
1a000c68:	e013      	b.n	1a000c92 <TIMER1_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c6a:	4b0b      	ldr	r3, [pc, #44]	; (1a000c98 <TIMER1_IRQHandler+0x34>)
1a000c6c:	681a      	ldr	r2, [r3, #0]
1a000c6e:	f004 010f 	and.w	r1, r4, #15
1a000c72:	2301      	movs	r3, #1
1a000c74:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a000c76:	421a      	tst	r2, r3
1a000c78:	d009      	beq.n	1a000c8e <TIMER1_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000c7a:	1d23      	adds	r3, r4, #4
1a000c7c:	4a07      	ldr	r2, [pc, #28]	; (1a000c9c <TIMER1_IRQHandler+0x38>)
1a000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000c82:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c84:	b262      	sxtb	r2, r4
1a000c86:	2301      	movs	r3, #1
1a000c88:	4093      	lsls	r3, r2
1a000c8a:	4a03      	ldr	r2, [pc, #12]	; (1a000c98 <TIMER1_IRQHandler+0x34>)
1a000c8c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000c8e:	3401      	adds	r4, #1
1a000c90:	b2e4      	uxtb	r4, r4

void TIMER1_IRQHandler( void ){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c92:	2c03      	cmp	r4, #3
1a000c94:	d9e9      	bls.n	1a000c6a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000c96:	bd10      	pop	{r4, pc}
1a000c98:	40085000 	.word	0x40085000
1a000c9c:	10000128 	.word	0x10000128

1a000ca0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a000ca0:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000ca2:	2400      	movs	r4, #0
1a000ca4:	e014      	b.n	1a000cd0 <TIMER2_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ca6:	4b0c      	ldr	r3, [pc, #48]	; (1a000cd8 <TIMER2_IRQHandler+0x38>)
1a000ca8:	681a      	ldr	r2, [r3, #0]
1a000caa:	f004 010f 	and.w	r1, r4, #15
1a000cae:	2301      	movs	r3, #1
1a000cb0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a000cb2:	421a      	tst	r2, r3
1a000cb4:	d00a      	beq.n	1a000ccc <TIMER2_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000cb6:	f104 0308 	add.w	r3, r4, #8
1a000cba:	4a08      	ldr	r2, [pc, #32]	; (1a000cdc <TIMER2_IRQHandler+0x3c>)
1a000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000cc0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000cc2:	b262      	sxtb	r2, r4
1a000cc4:	2301      	movs	r3, #1
1a000cc6:	4093      	lsls	r3, r2
1a000cc8:	4a03      	ldr	r2, [pc, #12]	; (1a000cd8 <TIMER2_IRQHandler+0x38>)
1a000cca:	6013      	str	r3, [r2, #0]
void TIMER2_IRQHandler( void ){
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000ccc:	3401      	adds	r4, #1
1a000cce:	b2e4      	uxtb	r4, r4
}

void TIMER2_IRQHandler( void ){
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000cd0:	2c03      	cmp	r4, #3
1a000cd2:	d9e8      	bls.n	1a000ca6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000cd4:	bd10      	pop	{r4, pc}
1a000cd6:	bf00      	nop
1a000cd8:	400c3000 	.word	0x400c3000
1a000cdc:	10000128 	.word	0x10000128

1a000ce0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a000ce0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000ce2:	2400      	movs	r4, #0
1a000ce4:	e014      	b.n	1a000d10 <TIMER3_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ce6:	4b0c      	ldr	r3, [pc, #48]	; (1a000d18 <TIMER3_IRQHandler+0x38>)
1a000ce8:	681a      	ldr	r2, [r3, #0]
1a000cea:	f004 010f 	and.w	r1, r4, #15
1a000cee:	2301      	movs	r3, #1
1a000cf0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a000cf2:	421a      	tst	r2, r3
1a000cf4:	d00a      	beq.n	1a000d0c <TIMER3_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000cf6:	f104 030c 	add.w	r3, r4, #12
1a000cfa:	4a08      	ldr	r2, [pc, #32]	; (1a000d1c <TIMER3_IRQHandler+0x3c>)
1a000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000d00:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000d02:	b262      	sxtb	r2, r4
1a000d04:	2301      	movs	r3, #1
1a000d06:	4093      	lsls	r3, r2
1a000d08:	4a03      	ldr	r2, [pc, #12]	; (1a000d18 <TIMER3_IRQHandler+0x38>)
1a000d0a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000d0c:	3401      	adds	r4, #1
1a000d0e:	b2e4      	uxtb	r4, r4
/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000d10:	2c03      	cmp	r4, #3
1a000d12:	d9e8      	bls.n	1a000ce6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000d14:	bd10      	pop	{r4, pc}
1a000d16:	bf00      	nop
1a000d18:	400c4000 	.word	0x400c4000
1a000d1c:	10000128 	.word	0x10000128

1a000d20 <delayInaccurate>:

/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurate(tick_t delay_ms) {
1a000d20:	b430      	push	{r4, r5}
1a000d22:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;

   delay = INACCURATE_TO_MS * delay_ms;
1a000d24:	0109      	lsls	r1, r1, #4
1a000d26:	0104      	lsls	r4, r0, #4
1a000d28:	ea41 7510 	orr.w	r5, r1, r0, lsr #28
1a000d2c:	00ab      	lsls	r3, r5, #2
1a000d2e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a000d32:	00a2      	lsls	r2, r4, #2
1a000d34:	1912      	adds	r2, r2, r4
1a000d36:	416b      	adcs	r3, r5
1a000d38:	0219      	lsls	r1, r3, #8
1a000d3a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
1a000d3e:	0210      	lsls	r0, r2, #8
1a000d40:	1a82      	subs	r2, r0, r2
1a000d42:	eb61 0303 	sbc.w	r3, r1, r3
1a000d46:	e9cd 2300 	strd	r2, r3, [sp]

   for( i=delay; i>0; i-- );
1a000d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000d52:	e007      	b.n	1a000d64 <delayInaccurate+0x44>
1a000d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000d58:	f112 32ff 	adds.w	r2, r2, #4294967295
1a000d5c:	f143 33ff 	adc.w	r3, r3, #4294967295
1a000d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000d68:	4313      	orrs	r3, r2
1a000d6a:	d1f3      	bne.n	1a000d54 <delayInaccurate+0x34>
}
1a000d6c:	b004      	add	sp, #16
1a000d6e:	bc30      	pop	{r4, r5}
1a000d70:	4770      	bx	lr
1a000d72:	bf00      	nop

1a000d74 <delayInaccurateUs>:

void delayInaccurateUs(tick_t delay_us) {
1a000d74:	b500      	push	{lr}
1a000d76:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;

   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a000d78:	1802      	adds	r2, r0, r0
1a000d7a:	eb41 0301 	adc.w	r3, r1, r1
1a000d7e:	1880      	adds	r0, r0, r2
1a000d80:	4159      	adcs	r1, r3
1a000d82:	010b      	lsls	r3, r1, #4
1a000d84:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a000d88:	0102      	lsls	r2, r0, #4
1a000d8a:	1880      	adds	r0, r0, r2
1a000d8c:	4159      	adcs	r1, r3
1a000d8e:	008b      	lsls	r3, r1, #2
1a000d90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a000d94:	0082      	lsls	r2, r0, #2
1a000d96:	4610      	mov	r0, r2
1a000d98:	4619      	mov	r1, r3
1a000d9a:	220a      	movs	r2, #10
1a000d9c:	2300      	movs	r3, #0
1a000d9e:	f001 fe23 	bl	1a0029e8 <__aeabi_uldivmod>
1a000da2:	e9cd 0100 	strd	r0, r1, [sp]

   for( i=delay; i>0; i-- );
1a000da6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000daa:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000dae:	e007      	b.n	1a000dc0 <delayInaccurateUs+0x4c>
1a000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000db4:	f112 32ff 	adds.w	r2, r2, #4294967295
1a000db8:	f143 33ff 	adc.w	r3, r3, #4294967295
1a000dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000dc4:	4313      	orrs	r3, r2
1a000dc6:	d1f3      	bne.n	1a000db0 <delayInaccurateUs+0x3c>
}
1a000dc8:	b005      	add	sp, #20
1a000dca:	f85d fb04 	ldr.w	pc, [sp], #4
1a000dce:	bf00      	nop

1a000dd0 <delay>:

/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration){
1a000dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000dd4:	4680      	mov	r8, r0
1a000dd6:	4689      	mov	r9, r1
    tick_t startTime = tickRead();
1a000dd8:	f000 f890 	bl	1a000efc <tickRead>
1a000ddc:	4606      	mov	r6, r0
1a000dde:	460f      	mov	r7, r1
    while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a000de0:	f000 f88c 	bl	1a000efc <tickRead>
1a000de4:	1b84      	subs	r4, r0, r6
1a000de6:	eb61 0507 	sbc.w	r5, r1, r7
1a000dea:	4640      	mov	r0, r8
1a000dec:	4649      	mov	r1, r9
1a000dee:	4b05      	ldr	r3, [pc, #20]	; (1a000e04 <delay+0x34>)
1a000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000df4:	f001 fdf8 	bl	1a0029e8 <__aeabi_uldivmod>
1a000df8:	428d      	cmp	r5, r1
1a000dfa:	bf08      	it	eq
1a000dfc:	4284      	cmpeq	r4, r0
1a000dfe:	d3ef      	bcc.n	1a000de0 <delay+0x10>
 }
1a000e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000e04:	10000340 	.word	0x10000340

1a000e08 <delayConfig>:


/* ---- Non Blocking Delay ---- */

void delayConfig( delay_t * delay, tick_t duration ){
1a000e08:	b510      	push	{r4, lr}
1a000e0a:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a000e0c:	4610      	mov	r0, r2
1a000e0e:	4619      	mov	r1, r3
1a000e10:	4b04      	ldr	r3, [pc, #16]	; (1a000e24 <delayConfig+0x1c>)
1a000e12:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000e16:	f001 fde7 	bl	1a0029e8 <__aeabi_uldivmod>
1a000e1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a000e1e:	2300      	movs	r3, #0
1a000e20:	7423      	strb	r3, [r4, #16]
1a000e22:	bd10      	pop	{r4, pc}
1a000e24:	10000340 	.word	0x10000340

1a000e28 <delayRead>:
}

bool_t delayRead( delay_t * delay ){
1a000e28:	b510      	push	{r4, lr}
1a000e2a:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ){
1a000e2c:	7c03      	ldrb	r3, [r0, #16]
1a000e2e:	b93b      	cbnz	r3, 1a000e40 <delayRead+0x18>
      delay->startTime = tickRead();
1a000e30:	f000 f864 	bl	1a000efc <tickRead>
1a000e34:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a000e38:	2301      	movs	r3, #1
1a000e3a:	7423      	strb	r3, [r4, #16]
   delay->running = 0;
}

bool_t delayRead( delay_t * delay ){

   bool_t timeArrived = 0;
1a000e3c:	2000      	movs	r0, #0
1a000e3e:	bd10      	pop	{r4, pc}
   if( !delay->running ){
      delay->startTime = tickRead();
      delay->running = 1;
   }
   else{
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ){
1a000e40:	f000 f85c 	bl	1a000efc <tickRead>
1a000e44:	e9d4 2300 	ldrd	r2, r3, [r4]
1a000e48:	1a80      	subs	r0, r0, r2
1a000e4a:	eb61 0103 	sbc.w	r1, r1, r3
1a000e4e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a000e52:	4299      	cmp	r1, r3
1a000e54:	bf08      	it	eq
1a000e56:	4290      	cmpeq	r0, r2
1a000e58:	d303      	bcc.n	1a000e62 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a000e5a:	2300      	movs	r3, #0
1a000e5c:	7423      	strb	r3, [r4, #16]
      delay->startTime = tickRead();
      delay->running = 1;
   }
   else{
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ){
         timeArrived = 1;
1a000e5e:	2001      	movs	r0, #1
1a000e60:	bd10      	pop	{r4, pc}
   delay->running = 0;
}

bool_t delayRead( delay_t * delay ){

   bool_t timeArrived = 0;
1a000e62:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a000e64:	bd10      	pop	{r4, pc}
1a000e66:	bf00      	nop

1a000e68 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
1a000e68:	b510      	push	{r4, lr}
1a000e6a:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a000e6c:	4610      	mov	r0, r2
1a000e6e:	4619      	mov	r1, r3
1a000e70:	4b03      	ldr	r3, [pc, #12]	; (1a000e80 <delayWrite+0x18>)
1a000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000e76:	f001 fdb7 	bl	1a0029e8 <__aeabi_uldivmod>
1a000e7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a000e7e:	bd10      	pop	{r4, pc}
1a000e80:	10000340 	.word	0x10000340

1a000e84 <tickConfig>:

void tickerCallback(void);

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
1a000e84:	b508      	push	{r3, lr}
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ) {
1a000e86:	b112      	cbz	r2, 1a000e8e <tickConfig+0xa>
1a000e88:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a000e8a:	4a17      	ldr	r2, [pc, #92]	; (1a000ee8 <tickConfig+0x64>)
1a000e8c:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000e8e:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000e92:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000e96:	2b00      	cmp	r3, #0
1a000e98:	bf08      	it	eq
1a000e9a:	2a32      	cmpeq	r2, #50	; 0x32
1a000e9c:	d220      	bcs.n	1a000ee0 <tickConfig+0x5c>
1a000e9e:	4602      	mov	r2, r0
1a000ea0:	460b      	mov	r3, r1

      tickRateMS = tickRateMSvalue;
1a000ea2:	4912      	ldr	r1, [pc, #72]	; (1a000eec <tickConfig+0x68>)
1a000ea4:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a000ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000eac:	2100      	movs	r1, #0
1a000eae:	f001 fd9b 	bl	1a0029e8 <__aeabi_uldivmod>
1a000eb2:	4602      	mov	r2, r0
1a000eb4:	460b      	mov	r3, r1

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a000eb6:	490e      	ldr	r1, [pc, #56]	; (1a000ef0 <tickConfig+0x6c>)
1a000eb8:	6808      	ldr	r0, [r1, #0]
1a000eba:	2100      	movs	r1, #0
1a000ebc:	f001 fd94 	bl	1a0029e8 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000ec0:	3801      	subs	r0, #1
1a000ec2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000ec6:	d20d      	bcs.n	1a000ee4 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000ec8:	4b0a      	ldr	r3, [pc, #40]	; (1a000ef4 <tickConfig+0x70>)
1a000eca:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000ecc:	21e0      	movs	r1, #224	; 0xe0
1a000ece:	4a0a      	ldr	r2, [pc, #40]	; (1a000ef8 <tickConfig+0x74>)
1a000ed0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000ed4:	2200      	movs	r2, #0
1a000ed6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000ed8:	2207      	movs	r2, #7
1a000eda:	601a      	str	r2, [r3, #0]

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
1a000edc:	2001      	movs	r0, #1
1a000ede:	bd08      	pop	{r3, pc}

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
   } else {
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a000ee0:	2000      	movs	r0, #0
1a000ee2:	bd08      	pop	{r3, pc}

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
1a000ee4:	2001      	movs	r0, #1
#else
#warning "Unknown RTOS. Ticker disabled"
   return 0;
#endif
#endif
}
1a000ee6:	bd08      	pop	{r3, pc}
1a000ee8:	10000168 	.word	0x10000168
1a000eec:	10000340 	.word	0x10000340
1a000ef0:	10000348 	.word	0x10000348
1a000ef4:	e000e010 	.word	0xe000e010
1a000ef8:	e000ed00 	.word	0xe000ed00

1a000efc <tickRead>:

/* Read Tick Counter */
tick_t tickRead( void )
{
   return tickCounter;
}
1a000efc:	4b01      	ldr	r3, [pc, #4]	; (1a000f04 <tickRead+0x8>)
1a000efe:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000f02:	4770      	bx	lr
1a000f04:	10000338 	.word	0x10000338

1a000f08 <tickWrite>:


/* Write Tick Counter */
void tickWrite( tick_t ticks )
{
   tickCounter = ticks;
1a000f08:	4b01      	ldr	r3, [pc, #4]	; (1a000f10 <tickWrite+0x8>)
1a000f0a:	e9c3 0100 	strd	r0, r1, [r3]
1a000f0e:	4770      	bx	lr
1a000f10:	10000338 	.word	0x10000338

1a000f14 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void tickerCallback(void)
{
1a000f14:	b508      	push	{r3, lr}
   tickCounter++;
1a000f16:	4906      	ldr	r1, [pc, #24]	; (1a000f30 <SysTick_Handler+0x1c>)
1a000f18:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000f1c:	3201      	adds	r2, #1
1a000f1e:	f143 0300 	adc.w	r3, r3, #0
1a000f22:	e9c1 2300 	strd	r2, r3, [r1]

   /* Execute Tick Hook function */
   (* tickHookFunction )( 0 );
1a000f26:	4b03      	ldr	r3, [pc, #12]	; (1a000f34 <SysTick_Handler+0x20>)
1a000f28:	681b      	ldr	r3, [r3, #0]
1a000f2a:	2000      	movs	r0, #0
1a000f2c:	4798      	blx	r3
1a000f2e:	bd08      	pop	{r3, pc}
1a000f30:	10000338 	.word	0x10000338
1a000f34:	10000168 	.word	0x10000168

1a000f38 <printSetUart>:
/*==================[external functions definition]==========================*/

// Print uart configuration

void printSetUart( print_t* printer, uartMap_t uart ){
   *printer = uart;
1a000f38:	7001      	strb	r1, [r0, #0]
1a000f3a:	4770      	bx	lr

1a000f3c <printConfigUart>:
}

void printConfigUart( print_t* printer, uartMap_t uart, uint32_t baudRate ){
1a000f3c:	b508      	push	{r3, lr}
   *printer = uart;
1a000f3e:	7001      	strb	r1, [r0, #0]
   uartConfig( uart, baudRate );
1a000f40:	4608      	mov	r0, r1
1a000f42:	4611      	mov	r1, r2
1a000f44:	f7ff fc9a 	bl	1a00087c <uartConfig>
1a000f48:	bd08      	pop	{r3, pc}
1a000f4a:	bf00      	nop

1a000f4c <printString>:
}


// Print String

void printString( print_t printer, char* string ){
1a000f4c:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a000f4e:	f7ff fd61 	bl	1a000a14 <uartWriteString>
1a000f52:	bd08      	pop	{r3, pc}

1a000f54 <printEnter>:
}

void printEnter( print_t printer ){
1a000f54:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a000f56:	4902      	ldr	r1, [pc, #8]	; (1a000f60 <printEnter+0xc>)
1a000f58:	f7ff fd5c 	bl	1a000a14 <uartWriteString>
1a000f5c:	bd08      	pop	{r3, pc}
1a000f5e:	bf00      	nop
1a000f60:	1a003090 	.word	0x1a003090

1a000f64 <printIntFormat>:
}


// Print Integer

void printIntFormat( print_t printer, int64_t number, numberFormat_t format ){
1a000f64:	b510      	push	{r4, lr}
1a000f66:	b092      	sub	sp, #72	; 0x48
1a000f68:	4604      	mov	r4, r0

   char strNumber[65];

   if( int64ToString( number, strNumber, format ) ){
1a000f6a:	4610      	mov	r0, r2
1a000f6c:	4619      	mov	r1, r3
1a000f6e:	aa01      	add	r2, sp, #4
1a000f70:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a000f74:	f000 f8a0 	bl	1a0010b8 <int64ToString>
1a000f78:	b118      	cbz	r0, 1a000f82 <printIntFormat+0x1e>
      uartWriteString( printer, strNumber );
1a000f7a:	4620      	mov	r0, r4
1a000f7c:	a901      	add	r1, sp, #4
1a000f7e:	f7ff fd49 	bl	1a000a14 <uartWriteString>
   }
}
1a000f82:	b012      	add	sp, #72	; 0x48
1a000f84:	bd10      	pop	{r4, pc}
1a000f86:	bf00      	nop

1a000f88 <printUIntFormat>:

void printUIntFormat( print_t printer, uint64_t number, numberFormat_t format ){
1a000f88:	b510      	push	{r4, lr}
1a000f8a:	b092      	sub	sp, #72	; 0x48
1a000f8c:	4604      	mov	r4, r0

   char strNumber[65];

   if( uint64ToString( number, strNumber, format ) ){
1a000f8e:	4610      	mov	r0, r2
1a000f90:	4619      	mov	r1, r3
1a000f92:	aa01      	add	r2, sp, #4
1a000f94:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
1a000f98:	f000 f8d4 	bl	1a001144 <uint64ToString>
1a000f9c:	b118      	cbz	r0, 1a000fa6 <printUIntFormat+0x1e>
      uartWriteString( printer, strNumber );
1a000f9e:	4620      	mov	r0, r4
1a000fa0:	a901      	add	r1, sp, #4
1a000fa2:	f7ff fd37 	bl	1a000a14 <uartWriteString>
   }
}
1a000fa6:	b012      	add	sp, #72	; 0x48
1a000fa8:	bd10      	pop	{r4, pc}
1a000faa:	bf00      	nop

1a000fac <printHex>:

void printHex( print_t printer, uint64_t number, uint8_t bitSize ){
1a000fac:	b510      	push	{r4, lr}
1a000fae:	4604      	mov	r4, r0
   printString( printer, uintToAsciiHex( number , bitSize ) );
1a000fb0:	4610      	mov	r0, r2
1a000fb2:	4619      	mov	r1, r3
1a000fb4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fb8:	f000 f8fe 	bl	1a0011b8 <uintToAsciiHex>
1a000fbc:	4601      	mov	r1, r0
1a000fbe:	4620      	mov	r0, r4
1a000fc0:	f7ff ffc4 	bl	1a000f4c <printString>
1a000fc4:	bd10      	pop	{r4, pc}
1a000fc6:	bf00      	nop

1a000fc8 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a000fc8:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a000fca:	f000 ff03 	bl	1a001dd4 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a000fce:	f000 fb37 	bl	1a001640 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a000fd2:	2001      	movs	r0, #1
1a000fd4:	2100      	movs	r1, #0
1a000fd6:	2200      	movs	r2, #0
1a000fd8:	f7ff ff54 	bl	1a000e84 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a000fdc:	2000      	movs	r0, #0
1a000fde:	2105      	movs	r1, #5
1a000fe0:	f000 f952 	bl	1a001288 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a000fe4:	2024      	movs	r0, #36	; 0x24
1a000fe6:	2100      	movs	r1, #0
1a000fe8:	f000 f94e 	bl	1a001288 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a000fec:	2025      	movs	r0, #37	; 0x25
1a000fee:	2100      	movs	r1, #0
1a000ff0:	f000 f94a 	bl	1a001288 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a000ff4:	2026      	movs	r0, #38	; 0x26
1a000ff6:	2100      	movs	r1, #0
1a000ff8:	f000 f946 	bl	1a001288 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a000ffc:	2027      	movs	r0, #39	; 0x27
1a000ffe:	2100      	movs	r1, #0
1a001000:	f000 f942 	bl	1a001288 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a001004:	2028      	movs	r0, #40	; 0x28
1a001006:	2101      	movs	r1, #1
1a001008:	f000 f93e 	bl	1a001288 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a00100c:	2029      	movs	r0, #41	; 0x29
1a00100e:	2101      	movs	r1, #1
1a001010:	f000 f93a 	bl	1a001288 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a001014:	202a      	movs	r0, #42	; 0x2a
1a001016:	2101      	movs	r1, #1
1a001018:	f000 f936 	bl	1a001288 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a00101c:	202b      	movs	r0, #43	; 0x2b
1a00101e:	2101      	movs	r1, #1
1a001020:	f000 f932 	bl	1a001288 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a001024:	202c      	movs	r0, #44	; 0x2c
1a001026:	2101      	movs	r1, #1
1a001028:	f000 f92e 	bl	1a001288 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a00102c:	202d      	movs	r0, #45	; 0x2d
1a00102e:	2101      	movs	r1, #1
1a001030:	f000 f92a 	bl	1a001288 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a001034:	202e      	movs	r0, #46	; 0x2e
1a001036:	2100      	movs	r1, #0
1a001038:	f000 f926 	bl	1a001288 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a00103c:	202f      	movs	r0, #47	; 0x2f
1a00103e:	2100      	movs	r1, #0
1a001040:	f000 f922 	bl	1a001288 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a001044:	2030      	movs	r0, #48	; 0x30
1a001046:	2100      	movs	r1, #0
1a001048:	f000 f91e 	bl	1a001288 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a00104c:	2031      	movs	r0, #49	; 0x31
1a00104e:	2100      	movs	r1, #0
1a001050:	f000 f91a 	bl	1a001288 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a001054:	2032      	movs	r0, #50	; 0x32
1a001056:	2100      	movs	r1, #0
1a001058:	f000 f916 	bl	1a001288 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a00105c:	2033      	movs	r0, #51	; 0x33
1a00105e:	2100      	movs	r1, #0
1a001060:	f000 f912 	bl	1a001288 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a001064:	2034      	movs	r0, #52	; 0x34
1a001066:	2100      	movs	r1, #0
1a001068:	f000 f90e 	bl	1a001288 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a00106c:	2035      	movs	r0, #53	; 0x35
1a00106e:	2100      	movs	r1, #0
1a001070:	f000 f90a 	bl	1a001288 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a001074:	2036      	movs	r0, #54	; 0x36
1a001076:	2101      	movs	r1, #1
1a001078:	f000 f906 	bl	1a001288 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a00107c:	2037      	movs	r0, #55	; 0x37
1a00107e:	2101      	movs	r1, #1
1a001080:	f000 f902 	bl	1a001288 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a001084:	2038      	movs	r0, #56	; 0x38
1a001086:	2101      	movs	r1, #1
1a001088:	f000 f8fe 	bl	1a001288 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a00108c:	2039      	movs	r0, #57	; 0x39
1a00108e:	2101      	movs	r1, #1
1a001090:	f000 f8fa 	bl	1a001288 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a001094:	203a      	movs	r0, #58	; 0x3a
1a001096:	2101      	movs	r1, #1
1a001098:	f000 f8f6 	bl	1a001288 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a00109c:	203b      	movs	r0, #59	; 0x3b
1a00109e:	2101      	movs	r1, #1
1a0010a0:	f000 f8f2 	bl	1a001288 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a0010a4:	203c      	movs	r0, #60	; 0x3c
1a0010a6:	2101      	movs	r1, #1
1a0010a8:	f000 f8ee 	bl	1a001288 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a0010ac:	203d      	movs	r0, #61	; 0x3d
1a0010ae:	2101      	movs	r1, #1
1a0010b0:	f000 f8ea 	bl	1a001288 <gpioConfig>
1a0010b4:	bd08      	pop	{r3, pc}
1a0010b6:	bf00      	nop

1a0010b8 <int64ToString>:

// C++ version 0.4 char* style "itoa":
// Written by Luk�s Chmela
// Released under GPLv3.
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base ){
1a0010b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0010bc:	4615      	mov	r5, r2
1a0010be:	4699      	mov	r9, r3
   // check that the base if valid
   if( base < 2 || base > 36 ){
1a0010c0:	3b02      	subs	r3, #2
1a0010c2:	b2db      	uxtb	r3, r3
1a0010c4:	2b22      	cmp	r3, #34	; 0x22
1a0010c6:	d903      	bls.n	1a0010d0 <int64ToString+0x18>
      *result = '\0';
1a0010c8:	2000      	movs	r0, #0
1a0010ca:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a0010cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0010d0:	4606      	mov	r6, r0
1a0010d2:	460f      	mov	r7, r1
1a0010d4:	4690      	mov	r8, r2
1a0010d6:	e002      	b.n	1a0010de <int64ToString+0x26>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a0010d8:	46f0      	mov	r8, lr
   char* ptr = result, *ptr1 = result, tmp_char;
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
1a0010da:	4606      	mov	r6, r0
1a0010dc:	460f      	mov	r7, r1
1a0010de:	4630      	mov	r0, r6
1a0010e0:	4639      	mov	r1, r7
1a0010e2:	464a      	mov	r2, r9
1a0010e4:	2300      	movs	r3, #0
1a0010e6:	f001 fc63 	bl	1a0029b0 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a0010ea:	f108 0e01 	add.w	lr, r8, #1
1a0010ee:	fba9 2300 	umull	r2, r3, r9, r0
1a0010f2:	1ab2      	subs	r2, r6, r2
1a0010f4:	4b12      	ldr	r3, [pc, #72]	; (1a001140 <int64ToString+0x88>)
1a0010f6:	441a      	add	r2, r3
1a0010f8:	7813      	ldrb	r3, [r2, #0]
1a0010fa:	f888 3000 	strb.w	r3, [r8]
   } while ( value );
1a0010fe:	ea50 0301 	orrs.w	r3, r0, r1
1a001102:	d1e9      	bne.n	1a0010d8 <int64ToString+0x20>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a001104:	2e00      	cmp	r6, #0
1a001106:	f177 0300 	sbcs.w	r3, r7, #0
1a00110a:	da04      	bge.n	1a001116 <int64ToString+0x5e>
1a00110c:	f108 0e02 	add.w	lr, r8, #2
1a001110:	232d      	movs	r3, #45	; 0x2d
1a001112:	f888 3001 	strb.w	r3, [r8, #1]
   *ptr-- = '\0';
1a001116:	f10e 33ff 	add.w	r3, lr, #4294967295
1a00111a:	2200      	movs	r2, #0
1a00111c:	f88e 2000 	strb.w	r2, [lr]
   while(ptr1 < ptr) {
1a001120:	e009      	b.n	1a001136 <int64ToString+0x7e>
      tmp_char = *ptr;
1a001122:	461a      	mov	r2, r3
1a001124:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a001128:	4629      	mov	r1, r5
1a00112a:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00112e:	701c      	strb	r4, [r3, #0]
      *ptr1++ = tmp_char;
1a001130:	7028      	strb	r0, [r5, #0]
1a001132:	460d      	mov	r5, r1
   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
      tmp_char = *ptr;
      *ptr--= *ptr1;
1a001134:	4613      	mov	r3, r2
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a001136:	429d      	cmp	r5, r3
1a001138:	d3f3      	bcc.n	1a001122 <int64ToString+0x6a>
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return TRUE;
1a00113a:	2001      	movs	r0, #1
}
1a00113c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001140:	1a0030b7 	.word	0x1a0030b7

1a001144 <uint64ToString>:

// C++ version 0.4 char* style "itoa":
// Written by Luk�s Chmela
// Released under GPLv3.
// Modified by Eric Pernia.
bool_t uint64ToString( uint64_t value, char* result, uint8_t base ){
1a001144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001148:	4690      	mov	r8, r2
1a00114a:	4699      	mov	r9, r3
   // check that the base if valid
   if( base < 2 || base > 36 ){
1a00114c:	3b02      	subs	r3, #2
1a00114e:	b2db      	uxtb	r3, r3
1a001150:	2b22      	cmp	r3, #34	; 0x22
1a001152:	d903      	bls.n	1a00115c <uint64ToString+0x18>
      *result = '\0';
1a001154:	2000      	movs	r0, #0
1a001156:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a001158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00115c:	4606      	mov	r6, r0
1a00115e:	460f      	mov	r7, r1
1a001160:	4614      	mov	r4, r2
1a001162:	e000      	b.n	1a001166 <uint64ToString+0x22>
   uint64_t tmp_value;

   do {
      tmp_value = value;
      value /= (uint64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (uint64_t)base)];
1a001164:	4674      	mov	r4, lr
   char* ptr = result, *ptr1 = result, tmp_char;
   uint64_t tmp_value;

   do {
      tmp_value = value;
      value /= (uint64_t)base;
1a001166:	4630      	mov	r0, r6
1a001168:	4639      	mov	r1, r7
1a00116a:	464a      	mov	r2, r9
1a00116c:	2300      	movs	r3, #0
1a00116e:	f001 fc3b 	bl	1a0029e8 <__aeabi_uldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (uint64_t)base)];
1a001172:	f104 0e01 	add.w	lr, r4, #1
1a001176:	fba9 2300 	umull	r2, r3, r9, r0
1a00117a:	1ab2      	subs	r2, r6, r2
1a00117c:	4e0d      	ldr	r6, [pc, #52]	; (1a0011b4 <uint64ToString+0x70>)
1a00117e:	4432      	add	r2, r6
1a001180:	7813      	ldrb	r3, [r2, #0]
1a001182:	7023      	strb	r3, [r4, #0]
   char* ptr = result, *ptr1 = result, tmp_char;
   uint64_t tmp_value;

   do {
      tmp_value = value;
      value /= (uint64_t)base;
1a001184:	4606      	mov	r6, r0
1a001186:	460f      	mov	r7, r1
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (uint64_t)base)];
   } while ( value );
1a001188:	ea50 0301 	orrs.w	r3, r0, r1
1a00118c:	d1ea      	bne.n	1a001164 <uint64ToString+0x20>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
1a00118e:	2300      	movs	r3, #0
1a001190:	7063      	strb	r3, [r4, #1]
   while(ptr1 < ptr) {
1a001192:	e00a      	b.n	1a0011aa <uint64ToString+0x66>
      tmp_char = *ptr;
1a001194:	4623      	mov	r3, r4
1a001196:	f813 1901 	ldrb.w	r1, [r3], #-1
      *ptr--= *ptr1;
1a00119a:	4642      	mov	r2, r8
1a00119c:	f812 0b01 	ldrb.w	r0, [r2], #1
1a0011a0:	7020      	strb	r0, [r4, #0]
      *ptr1++ = tmp_char;
1a0011a2:	f888 1000 	strb.w	r1, [r8]
1a0011a6:	4690      	mov	r8, r2
   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
      tmp_char = *ptr;
      *ptr--= *ptr1;
1a0011a8:	461c      	mov	r4, r3
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a0011aa:	45a0      	cmp	r8, r4
1a0011ac:	d3f2      	bcc.n	1a001194 <uint64ToString+0x50>
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return TRUE;
1a0011ae:	2001      	movs	r0, #1
}
1a0011b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0011b4:	1a0030b7 	.word	0x1a0030b7

1a0011b8 <uintToAsciiHex>:

char* uintToAsciiHex( uint64_t value, uint8_t bitSize ){
1a0011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0011bc:	b086      	sub	sp, #24
1a0011be:	4606      	mov	r6, r0
1a0011c0:	460f      	mov	r7, r1
1a0011c2:	4690      	mov	r8, r2

   static char result[17];
   uint8_t i = 0;
   uint8_t vectorNumHex[] = "0123456789ABCDEF";
1a0011c4:	f10d 0e04 	add.w	lr, sp, #4
1a0011c8:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1a001258 <uintToAsciiHex+0xa0>
1a0011cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
1a0011d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
1a0011d4:	f8dc 3000 	ldr.w	r3, [ip]
1a0011d8:	f88e 3000 	strb.w	r3, [lr]

   result[bitSize/4] = 0;
1a0011dc:	ea4f 0298 	mov.w	r2, r8, lsr #2
1a0011e0:	4694      	mov	ip, r2
1a0011e2:	2100      	movs	r1, #0
1a0011e4:	4b1b      	ldr	r3, [pc, #108]	; (1a001254 <uintToAsciiHex+0x9c>)
1a0011e6:	5499      	strb	r1, [r3, r2]

   for( i=0; i<bitSize/4; i++ ){
1a0011e8:	e02e      	b.n	1a001248 <uintToAsciiHex+0x90>
      result[(bitSize/4)-i-1] = vectorNumHex[ (uint8_t)(( value & (((uint64_t)0x0F)<<(4*i)) ) >> (4*i)) ];
1a0011ea:	ebc1 000c 	rsb	r0, r1, ip
1a0011ee:	3801      	subs	r0, #1
1a0011f0:	008b      	lsls	r3, r1, #2
1a0011f2:	f04f 0e0f 	mov.w	lr, #15
1a0011f6:	f1a3 0920 	sub.w	r9, r3, #32
1a0011fa:	f1c3 0820 	rsb	r8, r3, #32
1a0011fe:	fa0e f509 	lsl.w	r5, lr, r9
1a001202:	fa2e f808 	lsr.w	r8, lr, r8
1a001206:	ea45 0508 	orr.w	r5, r5, r8
1a00120a:	fa0e f403 	lsl.w	r4, lr, r3
1a00120e:	ea04 0806 	and.w	r8, r4, r6
1a001212:	ea05 0907 	and.w	r9, r5, r7
1a001216:	f1c3 0a20 	rsb	sl, r3, #32
1a00121a:	f1a3 0e20 	sub.w	lr, r3, #32
1a00121e:	fa28 f303 	lsr.w	r3, r8, r3
1a001222:	fa09 fa0a 	lsl.w	sl, r9, sl
1a001226:	ea43 030a 	orr.w	r3, r3, sl
1a00122a:	fa29 fe0e 	lsr.w	lr, r9, lr
1a00122e:	ea43 030e 	orr.w	r3, r3, lr
1a001232:	f10d 0e18 	add.w	lr, sp, #24
1a001236:	fa5e f383 	uxtab	r3, lr, r3
1a00123a:	f813 ec14 	ldrb.w	lr, [r3, #-20]
1a00123e:	4b05      	ldr	r3, [pc, #20]	; (1a001254 <uintToAsciiHex+0x9c>)
1a001240:	f803 e000 	strb.w	lr, [r3, r0]
   uint8_t i = 0;
   uint8_t vectorNumHex[] = "0123456789ABCDEF";

   result[bitSize/4] = 0;

   for( i=0; i<bitSize/4; i++ ){
1a001244:	3101      	adds	r1, #1
1a001246:	b2c9      	uxtb	r1, r1
1a001248:	4291      	cmp	r1, r2
1a00124a:	d3ce      	bcc.n	1a0011ea <uintToAsciiHex+0x32>
      result[(bitSize/4)-i-1] = vectorNumHex[ (uint8_t)(( value & (((uint64_t)0x0F)<<(4*i)) ) >> (4*i)) ];
   }

   return result;
}
1a00124c:	4801      	ldr	r0, [pc, #4]	; (1a001254 <uintToAsciiHex+0x9c>)
1a00124e:	b006      	add	sp, #24
1a001250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001254:	10000180 	.word	0x10000180
1a001258:	1a0030dc 	.word	0x1a0030dc

1a00125c <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a00125c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a00125e:	4d09      	ldr	r5, [pc, #36]	; (1a001284 <gpioObtainPinConfig+0x28>)
1a001260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001264:	182c      	adds	r4, r5, r0
1a001266:	5c28      	ldrb	r0, [r5, r0]
1a001268:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a00126a:	7861      	ldrb	r1, [r4, #1]
1a00126c:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a00126e:	78a2      	ldrb	r2, [r4, #2]
1a001270:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a001272:	78e2      	ldrb	r2, [r4, #3]
1a001274:	9b02      	ldr	r3, [sp, #8]
1a001276:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a001278:	7922      	ldrb	r2, [r4, #4]
1a00127a:	9b03      	ldr	r3, [sp, #12]
1a00127c:	701a      	strb	r2, [r3, #0]
}
1a00127e:	bc30      	pop	{r4, r5}
1a001280:	4770      	bx	lr
1a001282:	bf00      	nop
1a001284:	1a0030f0 	.word	0x1a0030f0

1a001288 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a001288:	b570      	push	{r4, r5, r6, lr}
1a00128a:	b084      	sub	sp, #16
1a00128c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00128e:	2300      	movs	r3, #0
1a001290:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001294:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001298:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00129c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0012a0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0012a4:	ab03      	add	r3, sp, #12
1a0012a6:	9300      	str	r3, [sp, #0]
1a0012a8:	f10d 030b 	add.w	r3, sp, #11
1a0012ac:	9301      	str	r3, [sp, #4]
1a0012ae:	f10d 010f 	add.w	r1, sp, #15
1a0012b2:	f10d 020e 	add.w	r2, sp, #14
1a0012b6:	f10d 030d 	add.w	r3, sp, #13
1a0012ba:	f7ff ffcf 	bl	1a00125c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a0012be:	2c05      	cmp	r4, #5
1a0012c0:	f200 80a8 	bhi.w	1a001414 <gpioConfig+0x18c>
1a0012c4:	e8df f004 	tbb	[pc, r4]
1a0012c8:	46278408 	.word	0x46278408
1a0012cc:	0365      	.short	0x0365

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0012ce:	4853      	ldr	r0, [pc, #332]	; (1a00141c <gpioConfig+0x194>)
1a0012d0:	f001 fb2c 	bl	1a00292c <Chip_GPIO_Init>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a0012d4:	2001      	movs	r0, #1
   switch(config){

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
	   break;
1a0012d6:	e09e      	b.n	1a001416 <gpioConfig+0x18e>

      case GPIO_INPUT:
         Chip_SCU_PinMux(
1a0012d8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0012e4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012ec:	494c      	ldr	r1, [pc, #304]	; (1a001420 <gpioConfig+0x198>)
1a0012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012f6:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012fa:	2001      	movs	r0, #1
1a0012fc:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001300:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001308:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00130c:	ea22 0204 	bic.w	r2, r2, r4
1a001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001314:	e07f      	b.n	1a001416 <gpioConfig+0x18e>
      break;

      case GPIO_INPUT_PULLUP:
         Chip_SCU_PinMux(
1a001316:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00131a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00131e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001322:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001326:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00132a:	493d      	ldr	r1, [pc, #244]	; (1a001420 <gpioConfig+0x198>)
1a00132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001330:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001334:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001338:	2001      	movs	r0, #1
1a00133a:	fa00 f402 	lsl.w	r4, r0, r2
1a00133e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001346:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00134a:	ea22 0204 	bic.w	r2, r2, r4
1a00134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001352:	e060      	b.n	1a001416 <gpioConfig+0x18e>
      break;

      case GPIO_INPUT_PULLDOWN:
         Chip_SCU_PinMux(
1a001354:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001358:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00135c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001360:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001364:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001368:	492d      	ldr	r1, [pc, #180]	; (1a001420 <gpioConfig+0x198>)
1a00136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00136e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001372:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001376:	2001      	movs	r0, #1
1a001378:	fa00 f402 	lsl.w	r4, r0, r2
1a00137c:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001384:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001388:	ea22 0204 	bic.w	r2, r2, r4
1a00138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001390:	e041      	b.n	1a001416 <gpioConfig+0x18e>
      break;
      case GPIO_INPUT_PULLUP_PULLDOWN:
         Chip_SCU_PinMux(
1a001392:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001396:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00139a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00139e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0013a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013a6:	491e      	ldr	r1, [pc, #120]	; (1a001420 <gpioConfig+0x198>)
1a0013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013b0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013b4:	2001      	movs	r0, #1
1a0013b6:	fa00 f402 	lsl.w	r4, r0, r2
1a0013ba:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0013be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0013c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0013c6:	ea22 0204 	bic.w	r2, r2, r4
1a0013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0013ce:	e022      	b.n	1a001416 <gpioConfig+0x18e>
      break;

      case GPIO_OUTPUT:
         Chip_SCU_PinMux(
1a0013d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013d8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0013dc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0013e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013e4:	490e      	ldr	r1, [pc, #56]	; (1a001420 <gpioConfig+0x198>)
1a0013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0013ea:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0013ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0013f2:	b25a      	sxtb	r2, r3
1a0013f4:	2001      	movs	r0, #1
1a0013f6:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0013fa:	4a08      	ldr	r2, [pc, #32]	; (1a00141c <gpioConfig+0x194>)
1a0013fc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001400:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a001404:	4331      	orrs	r1, r6
1a001406:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00140a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00140e:	2100      	movs	r1, #0
1a001410:	54d1      	strb	r1, [r2, r3]
1a001412:	e000      	b.n	1a001416 <gpioConfig+0x18e>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

      default:
         ret_val = 0;
1a001414:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a001416:	b004      	add	sp, #16
1a001418:	bd70      	pop	{r4, r5, r6, pc}
1a00141a:	bf00      	nop
1a00141c:	400f4000 	.word	0x400f4000
1a001420:	40086000 	.word	0x40086000

1a001424 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a001424:	b510      	push	{r4, lr}
1a001426:	b084      	sub	sp, #16
1a001428:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00142a:	2300      	movs	r3, #0
1a00142c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001430:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001434:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001438:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00143c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001440:	ab03      	add	r3, sp, #12
1a001442:	9300      	str	r3, [sp, #0]
1a001444:	f10d 030b 	add.w	r3, sp, #11
1a001448:	9301      	str	r3, [sp, #4]
1a00144a:	f10d 010f 	add.w	r1, sp, #15
1a00144e:	f10d 020e 	add.w	r2, sp, #14
1a001452:	f10d 030d 	add.w	r3, sp, #13
1a001456:	f7ff ff01 	bl	1a00125c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00145a:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a00145e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001462:	3400      	adds	r4, #0
1a001464:	bf18      	it	ne
1a001466:	2401      	movne	r4, #1
1a001468:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a00146c:	4a02      	ldr	r2, [pc, #8]	; (1a001478 <gpioWrite+0x54>)
1a00146e:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a001470:	2001      	movs	r0, #1
1a001472:	b004      	add	sp, #16
1a001474:	bd10      	pop	{r4, pc}
1a001476:	bf00      	nop
1a001478:	400f4000 	.word	0x400f4000

1a00147c <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a00147c:	b500      	push	{lr}
1a00147e:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001480:	2300      	movs	r3, #0
1a001482:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001486:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00148a:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00148e:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001492:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001496:	ab03      	add	r3, sp, #12
1a001498:	9300      	str	r3, [sp, #0]
1a00149a:	f10d 030b 	add.w	r3, sp, #11
1a00149e:	9301      	str	r3, [sp, #4]
1a0014a0:	f10d 010f 	add.w	r1, sp, #15
1a0014a4:	f10d 020e 	add.w	r2, sp, #14
1a0014a8:	f10d 030d 	add.w	r3, sp, #13
1a0014ac:	f7ff fed6 	bl	1a00125c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0014b0:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a0014b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a0014b8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0014bc:	4a04      	ldr	r2, [pc, #16]	; (1a0014d0 <gpioRead+0x54>)
1a0014be:	5cd3      	ldrb	r3, [r2, r3]
1a0014c0:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a0014c4:	bf14      	ite	ne
1a0014c6:	2001      	movne	r0, #1
1a0014c8:	2000      	moveq	r0, #0
1a0014ca:	b005      	add	sp, #20
1a0014cc:	f85d fb04 	ldr.w	pc, [sp], #4
1a0014d0:	400f4000 	.word	0x400f4000

1a0014d4 <gpioToggle>:

   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin ){
1a0014d4:	b510      	push	{r4, lr}
1a0014d6:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0014d8:	f7ff ffd0 	bl	1a00147c <gpioRead>
1a0014dc:	fab0 f180 	clz	r1, r0
1a0014e0:	0949      	lsrs	r1, r1, #5
1a0014e2:	4620      	mov	r0, r4
1a0014e4:	f7ff ff9e 	bl	1a001424 <gpioWrite>
}
1a0014e8:	bd10      	pop	{r4, pc}
1a0014ea:	bf00      	nop

1a0014ec <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a0014ec:	b470      	push	{r4, r5, r6}
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a0014ee:	2200      	movs	r2, #0
1a0014f0:	e014      	b.n	1a00151c <Board_LED_Init+0x30>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a0014f2:	4b0c      	ldr	r3, [pc, #48]	; (1a001524 <Board_LED_Init+0x38>)
1a0014f4:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0014f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0014fc:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0014fe:	480a      	ldr	r0, [pc, #40]	; (1a001528 <Board_LED_Init+0x3c>)
1a001500:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001504:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a001508:	2301      	movs	r3, #1
1a00150a:	408b      	lsls	r3, r1
1a00150c:	4333      	orrs	r3, r6
1a00150e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001512:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a001516:	2300      	movs	r3, #0
1a001518:	5443      	strb	r3, [r0, r1]

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a00151a:	3201      	adds	r2, #1
1a00151c:	2a05      	cmp	r2, #5
1a00151e:	d9e8      	bls.n	1a0014f2 <Board_LED_Init+0x6>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a001520:	bc70      	pop	{r4, r5, r6}
1a001522:	4770      	bx	lr
1a001524:	1a003228 	.word	0x1a003228
1a001528:	400f4000 	.word	0x400f4000

1a00152c <Board_UART_Init>:
1a00152c:	4b03      	ldr	r3, [pc, #12]	; (1a00153c <Board_UART_Init+0x10>)
1a00152e:	2212      	movs	r2, #18
1a001530:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001534:	22d1      	movs	r2, #209	; 0xd1
1a001536:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a00153a:	4770      	bx	lr
1a00153c:	40086000 	.word	0x40086000

1a001540 <Board_Debug_Init>:
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
}

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a001540:	b510      	push	{r4, lr}
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a001542:	4c08      	ldr	r4, [pc, #32]	; (1a001564 <Board_Debug_Init+0x24>)
1a001544:	4620      	mov	r0, r4
1a001546:	f7ff fff1 	bl	1a00152c <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a00154a:	4620      	mov	r0, r4
1a00154c:	f000 f974 	bl	1a001838 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001550:	4620      	mov	r0, r4
1a001552:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001556:	f000 fa8d 	bl	1a001a74 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00155a:	2303      	movs	r3, #3
1a00155c:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00155e:	2301      	movs	r3, #1
1a001560:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001562:	bd10      	pop	{r4, pc}
1a001564:	400c1000 	.word	0x400c1000

1a001568 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001568:	4b03      	ldr	r3, [pc, #12]	; (1a001578 <Board_UARTPutChar+0x10>)
1a00156a:	695b      	ldr	r3, [r3, #20]
/* Sends a character on the UART */
void Board_UARTPutChar(char ch)
{
#if defined(DEBUG_UART)
   /* Wait for space in FIFO */
   while ((Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE) == 0) {}
1a00156c:	f013 0f20 	tst.w	r3, #32
1a001570:	d0fa      	beq.n	1a001568 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a001572:	4b01      	ldr	r3, [pc, #4]	; (1a001578 <Board_UARTPutChar+0x10>)
1a001574:	6018      	str	r0, [r3, #0]
1a001576:	4770      	bx	lr
1a001578:	400c1000 	.word	0x400c1000

1a00157c <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00157c:	4b05      	ldr	r3, [pc, #20]	; (1a001594 <Board_UARTGetChar+0x18>)
1a00157e:	695b      	ldr	r3, [r3, #20]

/* Gets a character from the UART, returns EOF if no character is ready */
int Board_UARTGetChar(void)
{
#if defined(DEBUG_UART)
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a001580:	f013 0f01 	tst.w	r3, #1
1a001584:	d003      	beq.n	1a00158e <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001586:	4b03      	ldr	r3, [pc, #12]	; (1a001594 <Board_UARTGetChar+0x18>)
1a001588:	6818      	ldr	r0, [r3, #0]
1a00158a:	b2c0      	uxtb	r0, r0
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00158c:	4770      	bx	lr
   }
#endif
   return EOF;
1a00158e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001592:	4770      	bx	lr
1a001594:	400c1000 	.word	0x400c1000

1a001598 <Board_UARTPutSTR>:

/* Outputs a string on the debug UART */
void Board_UARTPutSTR(const char *str)
{
1a001598:	b510      	push	{r4, lr}
1a00159a:	4604      	mov	r4, r0
#if defined(DEBUG_UART)
   while (*str != '\0') {
1a00159c:	e002      	b.n	1a0015a4 <Board_UARTPutSTR+0xc>
       Board_UARTPutChar(*str++);
1a00159e:	3401      	adds	r4, #1
1a0015a0:	f7ff ffe2 	bl	1a001568 <Board_UARTPutChar>

/* Outputs a string on the debug UART */
void Board_UARTPutSTR(const char *str)
{
#if defined(DEBUG_UART)
   while (*str != '\0') {
1a0015a4:	7820      	ldrb	r0, [r4, #0]
1a0015a6:	2800      	cmp	r0, #0
1a0015a8:	d1f9      	bne.n	1a00159e <Board_UARTPutSTR+0x6>
       Board_UARTPutChar(*str++);
   }
#endif
}
1a0015aa:	bd10      	pop	{r4, pc}

1a0015ac <Board_LED_Set>:
   }
}

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a0015ac:	2805      	cmp	r0, #5
1a0015ae:	d80b      	bhi.n	1a0015c8 <Board_LED_Set+0x1c>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a0015b0:	4b06      	ldr	r3, [pc, #24]	; (1a0015cc <Board_LED_Set+0x20>)
1a0015b2:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a0015b6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a0015ba:	7843      	ldrb	r3, [r0, #1]
1a0015bc:	f081 0101 	eor.w	r1, r1, #1
1a0015c0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0015c4:	4a02      	ldr	r2, [pc, #8]	; (1a0015d0 <Board_LED_Set+0x24>)
1a0015c6:	54d1      	strb	r1, [r2, r3]
1a0015c8:	4770      	bx	lr
1a0015ca:	bf00      	nop
1a0015cc:	1a003228 	.word	0x1a003228
1a0015d0:	400f4000 	.word	0x400f4000

1a0015d4 <Board_LED_Test>:
}

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a0015d4:	2805      	cmp	r0, #5
1a0015d6:	d80f      	bhi.n	1a0015f8 <Board_LED_Test+0x24>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a0015d8:	4b08      	ldr	r3, [pc, #32]	; (1a0015fc <Board_LED_Test+0x28>)
1a0015da:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a0015de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a0015e2:	7843      	ldrb	r3, [r0, #1]
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a0015e4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a0015e8:	4a05      	ldr	r2, [pc, #20]	; (1a001600 <Board_LED_Test+0x2c>)
1a0015ea:	5cd3      	ldrb	r3, [r2, r3]
1a0015ec:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0015f0:	bf0c      	ite	eq
1a0015f2:	2001      	moveq	r0, #1
1a0015f4:	2000      	movne	r0, #0
1a0015f6:	4770      	bx	lr

   return false;
1a0015f8:	2000      	movs	r0, #0
}
1a0015fa:	4770      	bx	lr
1a0015fc:	1a003228 	.word	0x1a003228
1a001600:	400f4000 	.word	0x400f4000

1a001604 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a001604:	b510      	push	{r4, lr}
1a001606:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a001608:	f7ff ffe4 	bl	1a0015d4 <Board_LED_Test>
1a00160c:	f080 0101 	eor.w	r1, r0, #1
1a001610:	4620      	mov	r0, r4
1a001612:	b2c9      	uxtb	r1, r1
1a001614:	f7ff ffca 	bl	1a0015ac <Board_LED_Set>
1a001618:	bd10      	pop	{r4, pc}
1a00161a:	bf00      	nop

1a00161c <Board_ENET_GetMacADDR>:
}

/* Returns the MAC address assigned to this board */
void Board_ENET_GetMacADDR(uint8_t *mcaddr)
{
1a00161c:	b082      	sub	sp, #8
1a00161e:	4602      	mov	r2, r0
   uint8_t boardmac[] = {0x00, 0x60, 0x37, 0x12, 0x34, 0x56};
1a001620:	4b06      	ldr	r3, [pc, #24]	; (1a00163c <Board_ENET_GetMacADDR+0x20>)
1a001622:	f853 0f0c 	ldr.w	r0, [r3, #12]!
1a001626:	9000      	str	r0, [sp, #0]
1a001628:	889b      	ldrh	r3, [r3, #4]
1a00162a:	f8ad 3004 	strh.w	r3, [sp, #4]

   memcpy(mcaddr, boardmac, 6);
1a00162e:	9800      	ldr	r0, [sp, #0]
1a001630:	6010      	str	r0, [r2, #0]
1a001632:	f8bd 3004 	ldrh.w	r3, [sp, #4]
1a001636:	8093      	strh	r3, [r2, #4]
}
1a001638:	b002      	add	sp, #8
1a00163a:	4770      	bx	lr
1a00163c:	1a003228 	.word	0x1a003228

1a001640 <Board_Init>:

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001640:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a001642:	f7ff ff7d 	bl	1a001540 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001646:	4806      	ldr	r0, [pc, #24]	; (1a001660 <Board_Init+0x20>)
1a001648:	f001 f970 	bl	1a00292c <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a00164c:	f7ff ff4e 	bl	1a0014ec <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001650:	4a04      	ldr	r2, [pc, #16]	; (1a001664 <Board_Init+0x24>)
1a001652:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001656:	f043 0304 	orr.w	r3, r3, #4
1a00165a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00165e:	bd08      	pop	{r3, pc}
1a001660:	400f4000 	.word	0x400f4000
1a001664:	40043000 	.word	0x40043000

1a001668 <Board_I2C_Init>:
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}

void Board_I2C_Init(I2C_ID_T id)
{
   if (id == I2C1) {
1a001668:	2801      	cmp	r0, #1
1a00166a:	d106      	bne.n	1a00167a <Board_I2C_Init+0x12>
1a00166c:	4b06      	ldr	r3, [pc, #24]	; (1a001688 <Board_I2C_Init+0x20>)
1a00166e:	22c1      	movs	r2, #193	; 0xc1
1a001670:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a001674:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001678:	4770      	bx	lr
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00167a:	f640 0208 	movw	r2, #2056	; 0x808
1a00167e:	4b02      	ldr	r3, [pc, #8]	; (1a001688 <Board_I2C_Init+0x20>)
1a001680:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a001684:	4770      	bx	lr
1a001686:	bf00      	nop
1a001688:	40086000 	.word	0x40086000

1a00168c <Board_SDMMC_Init>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00168c:	4b09      	ldr	r3, [pc, #36]	; (1a0016b4 <Board_SDMMC_Init+0x28>)
1a00168e:	22e7      	movs	r2, #231	; 0xe7
1a001690:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
1a001694:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
1a001698:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
1a00169c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 * @param	modefunc	: OR'ed values or type SCU_MODE_*
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_ClockPinMuxSet(uint8_t clknum, uint16_t modefunc)
{
	LPC_SCU->SFSCLK[clknum] = (uint32_t) modefunc;
1a0016a0:	2154      	movs	r1, #84	; 0x54
1a0016a2:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0016a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
1a0016aa:	2247      	movs	r2, #71	; 0x47
1a0016ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
1a0016b0:	4770      	bx	lr
1a0016b2:	bf00      	nop
1a0016b4:	40086000 	.word	0x40086000

1a0016b8 <Board_SSP_Init>:
   Chip_SCU_PinMuxSet(0x1, 13, (SCU_MODE_INBUFF_EN | SCU_MODE_FUNC7)); /* P1.13 connected to SDIO_CD */
}

void Board_SSP_Init(LPC_SSP_T *pSSP)
{
   if (pSSP == LPC_SSP1) {
1a0016b8:	4b08      	ldr	r3, [pc, #32]	; (1a0016dc <Board_SSP_Init+0x24>)
1a0016ba:	4298      	cmp	r0, r3
1a0016bc:	d10c      	bne.n	1a0016d8 <Board_SSP_Init+0x20>
1a0016be:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
1a0016c2:	22f5      	movs	r2, #245	; 0xf5
1a0016c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
1a0016c8:	22f0      	movs	r2, #240	; 0xf0
1a0016ca:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a0016ce:	22d5      	movs	r2, #213	; 0xd5
1a0016d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a0016d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
1a0016d8:	4770      	bx	lr
1a0016da:	bf00      	nop
1a0016dc:	400c5000 	.word	0x400c5000

1a0016e0 <Board_DAC_Init>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_DAC_Analog_Config(void)
{
	/*Enable analog function DAC on pin P4_4*/
	LPC_SCU->ENAIO[2] |= 1;
1a0016e0:	4a03      	ldr	r2, [pc, #12]	; (1a0016f0 <Board_DAC_Init+0x10>)
1a0016e2:	f8d2 3c90 	ldr.w	r3, [r2, #3216]	; 0xc90
1a0016e6:	f043 0301 	orr.w	r3, r3, #1
1a0016ea:	f8c2 3c90 	str.w	r3, [r2, #3216]	; 0xc90
1a0016ee:	4770      	bx	lr
1a0016f0:	40086000 	.word	0x40086000

1a0016f4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0016f4:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0016f6:	4b04      	ldr	r3, [pc, #16]	; (1a001708 <SystemInit+0x14>)
1a0016f8:	4a04      	ldr	r2, [pc, #16]	; (1a00170c <SystemInit+0x18>)
1a0016fa:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0016fc:	f001 f8ea 	bl	1a0028d4 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a001700:	f000 f85a 	bl	1a0017b8 <Board_SystemInit>
1a001704:	bd08      	pop	{r3, pc}
1a001706:	bf00      	nop
1a001708:	e000ed08 	.word	0xe000ed08
1a00170c:	1a000000 	.word	0x1a000000

1a001710 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a001710:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001712:	2300      	movs	r3, #0
1a001714:	e00c      	b.n	1a001730 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001716:	4a09      	ldr	r2, [pc, #36]	; (1a00173c <Board_SetupMuxing+0x2c>)
1a001718:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00171c:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001720:	784a      	ldrb	r2, [r1, #1]
1a001722:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001724:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001728:	4905      	ldr	r1, [pc, #20]	; (1a001740 <Board_SetupMuxing+0x30>)
1a00172a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00172e:	3301      	adds	r3, #1
1a001730:	2b17      	cmp	r3, #23
1a001732:	d9f0      	bls.n	1a001716 <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001734:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001738:	4770      	bx	lr
1a00173a:	bf00      	nop
1a00173c:	1a003244 	.word	0x1a003244
1a001740:	40086000 	.word	0x40086000

1a001744 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001744:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001746:	4a19      	ldr	r2, [pc, #100]	; (1a0017ac <Board_SetupClocking+0x68>)
1a001748:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00174c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001750:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001754:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001758:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00175c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001760:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001764:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001768:	2006      	movs	r0, #6
1a00176a:	4911      	ldr	r1, [pc, #68]	; (1a0017b0 <Board_SetupClocking+0x6c>)
1a00176c:	2201      	movs	r2, #1
1a00176e:	f000 ffaf 	bl	1a0026d0 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001772:	2400      	movs	r4, #0
1a001774:	e00d      	b.n	1a001792 <Board_SetupClocking+0x4e>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001776:	4b0f      	ldr	r3, [pc, #60]	; (1a0017b4 <Board_SetupClocking+0x70>)
1a001778:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a00177c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
1a001780:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
1a001784:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
1a001788:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
1a00178c:	f000 fe3a 	bl	1a002404 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001790:	3401      	adds	r4, #1
1a001792:	2c02      	cmp	r4, #2
1a001794:	d9ef      	bls.n	1a001776 <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001796:	4b05      	ldr	r3, [pc, #20]	; (1a0017ac <Board_SetupClocking+0x68>)
1a001798:	685a      	ldr	r2, [r3, #4]
1a00179a:	f022 020c 	bic.w	r2, r2, #12
1a00179e:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0017a0:	685a      	ldr	r2, [r3, #4]
1a0017a2:	f042 0203 	orr.w	r2, r2, #3
1a0017a6:	605a      	str	r2, [r3, #4]
1a0017a8:	bd10      	pop	{r4, pc}
1a0017aa:	bf00      	nop
1a0017ac:	40043000 	.word	0x40043000
1a0017b0:	0c28cb00 	.word	0x0c28cb00
1a0017b4:	1a003244 	.word	0x1a003244

1a0017b8 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0017b8:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0017ba:	f7ff ffa9 	bl	1a001710 <Board_SetupMuxing>
   Board_SetupClocking();
1a0017be:	f7ff ffc1 	bl	1a001744 <Board_SetupClocking>
1a0017c2:	bd08      	pop	{r3, pc}

1a0017c4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0017c4:	4b09      	ldr	r3, [pc, #36]	; (1a0017ec <Chip_UART_GetIndex+0x28>)
1a0017c6:	4298      	cmp	r0, r3
1a0017c8:	d009      	beq.n	1a0017de <Chip_UART_GetIndex+0x1a>
1a0017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0017ce:	4298      	cmp	r0, r3
1a0017d0:	d007      	beq.n	1a0017e2 <Chip_UART_GetIndex+0x1e>
1a0017d2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0017d6:	4298      	cmp	r0, r3
1a0017d8:	d005      	beq.n	1a0017e6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0017da:	2000      	movs	r0, #0
1a0017dc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0017de:	2002      	movs	r0, #2
1a0017e0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0017e2:	2003      	movs	r0, #3
1a0017e4:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a0017e6:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0017e8:	4770      	bx	lr
1a0017ea:	bf00      	nop
1a0017ec:	400c1000 	.word	0x400c1000

1a0017f0 <Chip_UART_ABIntHandler>:
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a0017f0:	6883      	ldr	r3, [r0, #8]

/* UART Autobaud command interrupt handler */
STATIC void Chip_UART_ABIntHandler(LPC_USART_T *pUART)
{
	/* Handle End Of Autobaud interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABEO_INT) != 0) {
1a0017f2:	f413 7f80 	tst.w	r3, #256	; 0x100
1a0017f6:	d00f      	beq.n	1a001818 <Chip_UART_ABIntHandler+0x28>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a0017f8:	6a03      	ldr	r3, [r0, #32]
1a0017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a0017fe:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a001800:	6843      	ldr	r3, [r0, #4]
1a001802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
1a001806:	6043      	str	r3, [r0, #4]
        Chip_UART_SetAutoBaudReg(pUART, UART_ACR_ABEOINT_CLR);
		Chip_UART_IntDisable(pUART, UART_IER_ABEOINT);
	    if (ABsyncSts == RESET) {
1a001808:	4b0a      	ldr	r3, [pc, #40]	; (1a001834 <Chip_UART_ABIntHandler+0x44>)
1a00180a:	781b      	ldrb	r3, [r3, #0]
1a00180c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001810:	d102      	bne.n	1a001818 <Chip_UART_ABIntHandler+0x28>
	        ABsyncSts = SET;
1a001812:	2201      	movs	r2, #1
1a001814:	4b07      	ldr	r3, [pc, #28]	; (1a001834 <Chip_UART_ABIntHandler+0x44>)
1a001816:	701a      	strb	r2, [r3, #0]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a001818:	6883      	ldr	r3, [r0, #8]
        }
	}

    /* Handle Autobaud Timeout interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABTO_INT) != 0) {
1a00181a:	f413 7f00 	tst.w	r3, #512	; 0x200
1a00181e:	d007      	beq.n	1a001830 <Chip_UART_ABIntHandler+0x40>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a001820:	6a03      	ldr	r3, [r0, #32]
1a001822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a001826:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a001828:	6843      	ldr	r3, [r0, #4]
1a00182a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
1a00182e:	6043      	str	r3, [r0, #4]
1a001830:	4770      	bx	lr
1a001832:	bf00      	nop
1a001834:	10000194 	.word	0x10000194

1a001838 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001838:	b510      	push	{r4, lr}
1a00183a:	b082      	sub	sp, #8
1a00183c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00183e:	f7ff ffc1 	bl	1a0017c4 <Chip_UART_GetIndex>
1a001842:	4b0f      	ldr	r3, [pc, #60]	; (1a001880 <Chip_UART_Init+0x48>)
1a001844:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001848:	2101      	movs	r1, #1
1a00184a:	460a      	mov	r2, r1
1a00184c:	460b      	mov	r3, r1
1a00184e:	f000 fe55 	bl	1a0024fc <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001852:	2307      	movs	r3, #7
1a001854:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001856:	2300      	movs	r3, #0
1a001858:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00185a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00185c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00185e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001860:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001862:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001864:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001866:	4b07      	ldr	r3, [pc, #28]	; (1a001884 <Chip_UART_Init+0x4c>)
1a001868:	429c      	cmp	r4, r3
1a00186a:	d103      	bne.n	1a001874 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a00186c:	2300      	movs	r3, #0
1a00186e:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001870:	69a3      	ldr	r3, [r4, #24]
1a001872:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001874:	2303      	movs	r3, #3
1a001876:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001878:	2310      	movs	r3, #16
1a00187a:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a00187c:	b002      	add	sp, #8
1a00187e:	bd10      	pop	{r4, pc}
1a001880:	1a0032b0 	.word	0x1a0032b0
1a001884:	40082000 	.word	0x40082000

1a001888 <Chip_UART_DeInit>:

/* De-initializes the pUART peripheral */
void Chip_UART_DeInit(LPC_USART_T *pUART)
{
1a001888:	b508      	push	{r3, lr}
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a00188a:	2200      	movs	r2, #0
1a00188c:	65c2      	str	r2, [r0, #92]	; 0x5c
    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable clock */
	Chip_Clock_Disable(UART_PClock[Chip_UART_GetIndex(pUART)]);
1a00188e:	f7ff ff99 	bl	1a0017c4 <Chip_UART_GetIndex>
1a001892:	4b03      	ldr	r3, [pc, #12]	; (1a0018a0 <Chip_UART_DeInit+0x18>)
1a001894:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001898:	f000 fe74 	bl	1a002584 <Chip_Clock_Disable>
1a00189c:	bd08      	pop	{r3, pc}
1a00189e:	bf00      	nop
1a0018a0:	1a0032b0 	.word	0x1a0032b0

1a0018a4 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a0018a4:	b410      	push	{r4}
	int sent = 0;
1a0018a6:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a0018a8:	e003      	b.n	1a0018b2 <Chip_UART_Send+0xe>
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
1a0018aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a0018ae:	6004      	str	r4, [r0, #0]
		p8++;
		sent++;
1a0018b0:	3301      	adds	r3, #1
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a0018b2:	4293      	cmp	r3, r2
1a0018b4:	da03      	bge.n	1a0018be <Chip_UART_Send+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0018b6:	6944      	ldr	r4, [r0, #20]
1a0018b8:	f014 0f20 	tst.w	r4, #32
1a0018bc:	d1f5      	bne.n	1a0018aa <Chip_UART_Send+0x6>
		p8++;
		sent++;
	}

	return sent;
}
1a0018be:	4618      	mov	r0, r3
1a0018c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0018c4:	4770      	bx	lr
1a0018c6:	bf00      	nop

1a0018c8 <Chip_UART_CheckBusy>:

/* Check whether if UART is busy or not */
FlagStatus Chip_UART_CheckBusy(LPC_USART_T *pUART)
{
	if (pUART->LSR & UART_LSR_TEMT) {
1a0018c8:	6943      	ldr	r3, [r0, #20]
1a0018ca:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0018ce:	d001      	beq.n	1a0018d4 <Chip_UART_CheckBusy+0xc>
		return RESET;
1a0018d0:	2000      	movs	r0, #0
1a0018d2:	4770      	bx	lr
	}
	else {
		return SET;
1a0018d4:	2001      	movs	r0, #1
	}
}
1a0018d6:	4770      	bx	lr

1a0018d8 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a0018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0018da:	4607      	mov	r7, r0
1a0018dc:	460d      	mov	r5, r1
1a0018de:	4614      	mov	r4, r2
	int pass, sent = 0;
1a0018e0:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a0018e2:	e007      	b.n	1a0018f4 <Chip_UART_SendBlocking+0x1c>
		pass = Chip_UART_Send(pUART, p8, numBytes);
1a0018e4:	4638      	mov	r0, r7
1a0018e6:	4629      	mov	r1, r5
1a0018e8:	4622      	mov	r2, r4
1a0018ea:	f7ff ffdb 	bl	1a0018a4 <Chip_UART_Send>
		numBytes -= pass;
1a0018ee:	1a24      	subs	r4, r4, r0
		sent += pass;
1a0018f0:	4406      	add	r6, r0
		p8 += pass;
1a0018f2:	4405      	add	r5, r0
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a0018f4:	2c00      	cmp	r4, #0
1a0018f6:	dcf5      	bgt.n	1a0018e4 <Chip_UART_SendBlocking+0xc>
		sent += pass;
		p8 += pass;
	}

	return sent;
}
1a0018f8:	4630      	mov	r0, r6
1a0018fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0018fc <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
1a0018fc:	b410      	push	{r4}
	int readBytes = 0;
1a0018fe:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a001900:	e003      	b.n	1a00190a <Chip_UART_Read+0xe>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001902:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
1a001904:	f801 4b01 	strb.w	r4, [r1], #1
		p8++;
		readBytes++;
1a001908:	3301      	adds	r3, #1
{
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a00190a:	4293      	cmp	r3, r2
1a00190c:	da03      	bge.n	1a001916 <Chip_UART_Read+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00190e:	6944      	ldr	r4, [r0, #20]
1a001910:	f014 0f01 	tst.w	r4, #1
1a001914:	d1f5      	bne.n	1a001902 <Chip_UART_Read+0x6>
		p8++;
		readBytes++;
	}

	return readBytes;
}
1a001916:	4618      	mov	r0, r3
1a001918:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop

1a001920 <Chip_UART_ReadBlocking>:

/* Read data through the UART peripheral (blocking) */
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
1a001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001922:	4607      	mov	r7, r0
1a001924:	460d      	mov	r5, r1
1a001926:	4614      	mov	r4, r2
	int pass, readBytes = 0;
1a001928:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a00192a:	e007      	b.n	1a00193c <Chip_UART_ReadBlocking+0x1c>
		pass = Chip_UART_Read(pUART, p8, numBytes);
1a00192c:	4638      	mov	r0, r7
1a00192e:	4629      	mov	r1, r5
1a001930:	4622      	mov	r2, r4
1a001932:	f7ff ffe3 	bl	1a0018fc <Chip_UART_Read>
		numBytes -= pass;
1a001936:	1a24      	subs	r4, r4, r0
		readBytes += pass;
1a001938:	4406      	add	r6, r0
		p8 += pass;
1a00193a:	4405      	add	r5, r0
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
	int pass, readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a00193c:	2c00      	cmp	r4, #0
1a00193e:	dcf5      	bgt.n	1a00192c <Chip_UART_ReadBlocking+0xc>
		readBytes += pass;
		p8 += pass;
	}

	return readBytes;
}
1a001940:	4630      	mov	r0, r6
1a001942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001944 <Chip_UART_SetBaud>:

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001944:	b538      	push	{r3, r4, r5, lr}
1a001946:	4605      	mov	r5, r0
1a001948:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00194a:	f7ff ff3b 	bl	1a0017c4 <Chip_UART_GetIndex>
1a00194e:	4b0d      	ldr	r3, [pc, #52]	; (1a001984 <Chip_UART_SetBaud+0x40>)
1a001950:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a001954:	8900      	ldrh	r0, [r0, #8]
1a001956:	f000 fe43 	bl	1a0025e0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00195a:	0124      	lsls	r4, r4, #4
1a00195c:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001960:	68ea      	ldr	r2, [r5, #12]
1a001962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001966:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001968:	b2da      	uxtb	r2, r3
1a00196a:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00196c:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001970:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001972:	68ea      	ldr	r2, [r5, #12]
1a001974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001978:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00197a:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00197e:	0900      	lsrs	r0, r0, #4
1a001980:	bd38      	pop	{r3, r4, r5, pc}
1a001982:	bf00      	nop
1a001984:	1a0032b0 	.word	0x1a0032b0

1a001988 <Chip_UART_RXIntHandlerRB>:

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a001988:	b530      	push	{r4, r5, lr}
1a00198a:	b083      	sub	sp, #12
1a00198c:	4604      	mov	r4, r0
1a00198e:	460d      	mov	r5, r1
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a001990:	e006      	b.n	1a0019a0 <Chip_UART_RXIntHandlerRB+0x18>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001992:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
1a001994:	a902      	add	r1, sp, #8
1a001996:	f801 3d01 	strb.w	r3, [r1, #-1]!
		RingBuffer_Insert(pRB, &ch);
1a00199a:	4628      	mov	r0, r5
1a00199c:	f000 f908 	bl	1a001bb0 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0019a0:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a0019a2:	f013 0f01 	tst.w	r3, #1
1a0019a6:	d1f4      	bne.n	1a001992 <Chip_UART_RXIntHandlerRB+0xa>
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
	}
}
1a0019a8:	b003      	add	sp, #12
1a0019aa:	bd30      	pop	{r4, r5, pc}

1a0019ac <Chip_UART_TXIntHandlerRB>:

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a0019ac:	b530      	push	{r4, r5, lr}
1a0019ae:	b083      	sub	sp, #12
1a0019b0:	4604      	mov	r4, r0
1a0019b2:	460d      	mov	r5, r1
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a0019b4:	e002      	b.n	1a0019bc <Chip_UART_TXIntHandlerRB+0x10>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
1a0019b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a0019ba:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0019bc:	6963      	ldr	r3, [r4, #20]
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a0019be:	f013 0f20 	tst.w	r3, #32
1a0019c2:	d006      	beq.n	1a0019d2 <Chip_UART_TXIntHandlerRB+0x26>
		   RingBuffer_Pop(pRB, &ch)) {
1a0019c4:	4628      	mov	r0, r5
1a0019c6:	f10d 0107 	add.w	r1, sp, #7
1a0019ca:	f000 f951 	bl	1a001c70 <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a0019ce:	2800      	cmp	r0, #0
1a0019d0:	d1f1      	bne.n	1a0019b6 <Chip_UART_TXIntHandlerRB+0xa>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a0019d2:	68ea      	ldr	r2, [r5, #12]
1a0019d4:	692b      	ldr	r3, [r5, #16]
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}

	/* Turn off interrupt if the ring buffer is empty */
	if (RingBuffer_IsEmpty(pRB)) {
1a0019d6:	429a      	cmp	r2, r3
1a0019d8:	d103      	bne.n	1a0019e2 <Chip_UART_TXIntHandlerRB+0x36>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a0019da:	6863      	ldr	r3, [r4, #4]
1a0019dc:	f023 0302 	bic.w	r3, r3, #2
1a0019e0:	6063      	str	r3, [r4, #4]
		/* Shut down transmit */
		Chip_UART_IntDisable(pUART, UART_IER_THREINT);
	}
}
1a0019e2:	b003      	add	sp, #12
1a0019e4:	bd30      	pop	{r4, r5, pc}
1a0019e6:	bf00      	nop

1a0019e8 <Chip_UART_SendRB>:

/* Populate a transmit ring buffer and start UART transmit */
uint32_t Chip_UART_SendRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, const void *data, int bytes)
{
1a0019e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0019ec:	4604      	mov	r4, r0
1a0019ee:	460e      	mov	r6, r1
1a0019f0:	4690      	mov	r8, r2
1a0019f2:	461f      	mov	r7, r3
1a0019f4:	6843      	ldr	r3, [r0, #4]
1a0019f6:	f023 0302 	bic.w	r3, r3, #2
1a0019fa:	6043      	str	r3, [r0, #4]

	/* Don't let UART transmit ring buffer change in the UART IRQ handler */
	Chip_UART_IntDisable(pUART, UART_IER_THREINT);

	/* Move as much data as possible into transmit ring buffer */
	ret = RingBuffer_InsertMult(pRB, p8, bytes);
1a0019fc:	4608      	mov	r0, r1
1a0019fe:	4611      	mov	r1, r2
1a001a00:	463a      	mov	r2, r7
1a001a02:	f000 f8ed 	bl	1a001be0 <RingBuffer_InsertMult>
1a001a06:	4605      	mov	r5, r0
	Chip_UART_TXIntHandlerRB(pUART, pRB);
1a001a08:	4620      	mov	r0, r4
1a001a0a:	4631      	mov	r1, r6
1a001a0c:	f7ff ffce 	bl	1a0019ac <Chip_UART_TXIntHandlerRB>

	/* Add additional data to transmit ring buffer if possible */
	ret += RingBuffer_InsertMult(pRB, (p8 + ret), (bytes - ret));
1a001a10:	4630      	mov	r0, r6
1a001a12:	eb08 0105 	add.w	r1, r8, r5
1a001a16:	1b7a      	subs	r2, r7, r5
1a001a18:	f000 f8e2 	bl	1a001be0 <RingBuffer_InsertMult>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a001a1c:	6863      	ldr	r3, [r4, #4]
1a001a1e:	f043 0302 	orr.w	r3, r3, #2
1a001a22:	6063      	str	r3, [r4, #4]

	/* Enable UART transmit interrupt */
	Chip_UART_IntEnable(pUART, UART_IER_THREINT);

	return ret;
}
1a001a24:	4428      	add	r0, r5
1a001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001a2a:	bf00      	nop

1a001a2c <Chip_UART_ReadRB>:

/* Copy data from a receive ring buffer */
int Chip_UART_ReadRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, void *data, int bytes)
{
1a001a2c:	b508      	push	{r3, lr}
	(void) pUART;

	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
1a001a2e:	4608      	mov	r0, r1
1a001a30:	4611      	mov	r1, r2
1a001a32:	461a      	mov	r2, r3
1a001a34:	f000 f934 	bl	1a001ca0 <RingBuffer_PopMult>
}
1a001a38:	bd08      	pop	{r3, pc}
1a001a3a:	bf00      	nop

1a001a3c <Chip_UART_IRQRBHandler>:

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
1a001a3c:	b570      	push	{r4, r5, r6, lr}
1a001a3e:	4604      	mov	r4, r0
1a001a40:	460e      	mov	r6, r1
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
1a001a42:	6843      	ldr	r3, [r0, #4]
1a001a44:	f013 0f02 	tst.w	r3, #2
1a001a48:	d00b      	beq.n	1a001a62 <Chip_UART_IRQRBHandler+0x26>
1a001a4a:	4615      	mov	r5, r2
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
1a001a4c:	4611      	mov	r1, r2
1a001a4e:	f7ff ffad 	bl	1a0019ac <Chip_UART_TXIntHandlerRB>
1a001a52:	68ea      	ldr	r2, [r5, #12]
1a001a54:	692b      	ldr	r3, [r5, #16]

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
1a001a56:	429a      	cmp	r2, r3
1a001a58:	d103      	bne.n	1a001a62 <Chip_UART_IRQRBHandler+0x26>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a001a5a:	6863      	ldr	r3, [r4, #4]
1a001a5c:	f023 0302 	bic.w	r3, r3, #2
1a001a60:	6063      	str	r3, [r4, #4]
			Chip_UART_IntDisable(pUART, UART_IER_THREINT);
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
1a001a62:	4620      	mov	r0, r4
1a001a64:	4631      	mov	r1, r6
1a001a66:	f7ff ff8f 	bl	1a001988 <Chip_UART_RXIntHandlerRB>

    /* Handle Autobaud interrupts */
    Chip_UART_ABIntHandler(pUART);
1a001a6a:	4620      	mov	r0, r4
1a001a6c:	f7ff fec0 	bl	1a0017f0 <Chip_UART_ABIntHandler>
1a001a70:	bd70      	pop	{r4, r5, r6, pc}
1a001a72:	bf00      	nop

1a001a74 <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001a78:	b083      	sub	sp, #12
1a001a7a:	4683      	mov	fp, r0
1a001a7c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001a7e:	f7ff fea1 	bl	1a0017c4 <Chip_UART_GetIndex>
1a001a82:	4b35      	ldr	r3, [pc, #212]	; (1a001b58 <Chip_UART_SetBaudFDR+0xe4>)
1a001a84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a001a88:	8900      	ldrh	r0, [r0, #8]
1a001a8a:	f000 fda9 	bl	1a0025e0 <Chip_Clock_GetRate>
1a001a8e:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001a90:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001a94:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001a96:	2300      	movs	r3, #0
1a001a98:	9301      	str	r3, [sp, #4]
1a001a9a:	46a2      	mov	sl, r4
1a001a9c:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001a9e:	e029      	b.n	1a001af4 <Chip_UART_SetBaudFDR+0x80>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001aa0:	2300      	movs	r3, #0
1a001aa2:	0932      	lsrs	r2, r6, #4
1a001aa4:	0730      	lsls	r0, r6, #28
1a001aa6:	fba0 0104 	umull	r0, r1, r0, r4
1a001aaa:	fb04 1102 	mla	r1, r4, r2, r1
1a001aae:	1962      	adds	r2, r4, r5
1a001ab0:	fb08 f202 	mul.w	r2, r8, r2
1a001ab4:	f000 ff98 	bl	1a0029e8 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001ab8:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001aba:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001abc:	2800      	cmp	r0, #0
1a001abe:	da01      	bge.n	1a001ac4 <Chip_UART_SetBaudFDR+0x50>
				diff = -diff;
1a001ac0:	4243      	negs	r3, r0
				div ++;
1a001ac2:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001ac4:	429f      	cmp	r7, r3
1a001ac6:	d30a      	bcc.n	1a001ade <Chip_UART_SetBaudFDR+0x6a>
1a001ac8:	b14a      	cbz	r2, 1a001ade <Chip_UART_SetBaudFDR+0x6a>
1a001aca:	0c11      	lsrs	r1, r2, #16
1a001acc:	d107      	bne.n	1a001ade <Chip_UART_SetBaudFDR+0x6a>
1a001ace:	2a02      	cmp	r2, #2
1a001ad0:	d800      	bhi.n	1a001ad4 <Chip_UART_SetBaudFDR+0x60>
1a001ad2:	b925      	cbnz	r5, 1a001ade <Chip_UART_SetBaudFDR+0x6a>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001ad4:	b14b      	cbz	r3, 1a001aea <Chip_UART_SetBaudFDR+0x76>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001ad6:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001ad8:	9501      	str	r5, [sp, #4]
			sm = m;
1a001ada:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001adc:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001ade:	3501      	adds	r5, #1
1a001ae0:	e000      	b.n	1a001ae4 <Chip_UART_SetBaudFDR+0x70>
1a001ae2:	2500      	movs	r5, #0
1a001ae4:	42a5      	cmp	r5, r4
1a001ae6:	d3db      	bcc.n	1a001aa0 <Chip_UART_SetBaudFDR+0x2c>
1a001ae8:	e003      	b.n	1a001af2 <Chip_UART_SetBaudFDR+0x7e>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001aea:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001aec:	9501      	str	r5, [sp, #4]
			sm = m;
1a001aee:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001af0:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001af2:	3401      	adds	r4, #1
1a001af4:	b10f      	cbz	r7, 1a001afa <Chip_UART_SetBaudFDR+0x86>
1a001af6:	2c0f      	cmp	r4, #15
1a001af8:	d9f3      	bls.n	1a001ae2 <Chip_UART_SetBaudFDR+0x6e>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001afa:	f1b9 0f00 	cmp.w	r9, #0
1a001afe:	d026      	beq.n	1a001b4e <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001b00:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001b08:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001b0c:	fa5f f389 	uxtb.w	r3, r9
1a001b10:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001b14:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001b18:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001b1c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001b24:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001b28:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001b2c:	b2da      	uxtb	r2, r3
1a001b2e:	9901      	ldr	r1, [sp, #4]
1a001b30:	f001 030f 	and.w	r3, r1, #15
1a001b34:	4313      	orrs	r3, r2
1a001b36:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001b3a:	0933      	lsrs	r3, r6, #4
1a001b3c:	fb0a f303 	mul.w	r3, sl, r3
1a001b40:	eb0a 0001 	add.w	r0, sl, r1
1a001b44:	fb09 f000 	mul.w	r0, r9, r0
1a001b48:	fbb3 f0f0 	udiv	r0, r3, r0
1a001b4c:	e000      	b.n	1a001b50 <Chip_UART_SetBaudFDR+0xdc>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a001b4e:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001b50:	b003      	add	sp, #12
1a001b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001b56:	bf00      	nop
1a001b58:	1a0032b0 	.word	0x1a0032b0

1a001b5c <Chip_UART_GetABEOStatus>:

/* UART interrupt service routine */
FlagStatus Chip_UART_GetABEOStatus(LPC_USART_T *pUART)
{
	(void) pUART;
	return ABsyncSts;
1a001b5c:	4b01      	ldr	r3, [pc, #4]	; (1a001b64 <Chip_UART_GetABEOStatus+0x8>)
1a001b5e:	7818      	ldrb	r0, [r3, #0]
}
1a001b60:	4770      	bx	lr
1a001b62:	bf00      	nop
1a001b64:	10000194 	.word	0x10000194

1a001b68 <Chip_UART_ABCmd>:
/* Start/Stop Auto Baudrate activity */
void Chip_UART_ABCmd(LPC_USART_T *pUART, uint32_t mode, bool autorestart, FunctionalState NewState)
{
    uint32_t tmp = 0;

	if (NewState == ENABLE) {
1a001b68:	2b01      	cmp	r3, #1
1a001b6a:	d116      	bne.n	1a001b9a <Chip_UART_ABCmd+0x32>
		/* Clear DLL and DLM value */
		pUART->LCR |= UART_LCR_DLAB_EN;
1a001b6c:	68c3      	ldr	r3, [r0, #12]
1a001b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001b72:	60c3      	str	r3, [r0, #12]
		pUART->DLL = 0;
1a001b74:	2300      	movs	r3, #0
1a001b76:	6003      	str	r3, [r0, #0]
		pUART->DLM = 0;
1a001b78:	6043      	str	r3, [r0, #4]
		pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001b7a:	68c3      	ldr	r3, [r0, #12]
1a001b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001b80:	60c3      	str	r3, [r0, #12]

		/* FDR value must be reset to default value */
		pUART->FDR = 0x10;
1a001b82:	2310      	movs	r3, #16
1a001b84:	6283      	str	r3, [r0, #40]	; 0x28

		if (mode == UART_ACR_MODE1) {
1a001b86:	2901      	cmp	r1, #1
1a001b88:	d101      	bne.n	1a001b8e <Chip_UART_ABCmd+0x26>
			tmp = UART_ACR_START | UART_ACR_MODE;
1a001b8a:	2303      	movs	r3, #3
1a001b8c:	e000      	b.n	1a001b90 <Chip_UART_ABCmd+0x28>
		}
		else {
			tmp = UART_ACR_START;
1a001b8e:	2301      	movs	r3, #1
		}

		if (autorestart == true) {
1a001b90:	b10a      	cbz	r2, 1a001b96 <Chip_UART_ABCmd+0x2e>
			tmp |= UART_ACR_AUTO_RESTART;
1a001b92:	f043 0304 	orr.w	r3, r3, #4
		}
		pUART->ACR = tmp;
1a001b96:	6203      	str	r3, [r0, #32]
1a001b98:	4770      	bx	lr
	}
	else {
		pUART->ACR = 0;
1a001b9a:	2300      	movs	r3, #0
1a001b9c:	6203      	str	r3, [r0, #32]
1a001b9e:	4770      	bx	lr

1a001ba0 <RingBuffer_Init>:
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
1a001ba0:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
1a001ba2:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
1a001ba4:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
1a001ba6:	2300      	movs	r3, #0
1a001ba8:	6103      	str	r3, [r0, #16]
1a001baa:	60c3      	str	r3, [r0, #12]

	return 1;
}
1a001bac:	2001      	movs	r0, #1
1a001bae:	4770      	bx	lr

1a001bb0 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
1a001bb0:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a001bb2:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001bb4:	68c3      	ldr	r3, [r0, #12]
1a001bb6:	6902      	ldr	r2, [r0, #16]
1a001bb8:	1a9b      	subs	r3, r3, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a001bba:	6842      	ldr	r2, [r0, #4]

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a001bbc:	4293      	cmp	r3, r2
1a001bbe:	da0d      	bge.n	1a001bdc <RingBuffer_Insert+0x2c>
1a001bc0:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a001bc2:	68c0      	ldr	r0, [r0, #12]
1a001bc4:	3a01      	subs	r2, #1
1a001bc6:	4010      	ands	r0, r2
1a001bc8:	68a2      	ldr	r2, [r4, #8]
	memcpy(ptr, data, RingBuff->itemSz);
1a001bca:	fb02 5000 	mla	r0, r2, r0, r5
1a001bce:	f001 f9d9 	bl	1a002f84 <memcpy>
	RingBuff->head++;
1a001bd2:	68e3      	ldr	r3, [r4, #12]
1a001bd4:	3301      	adds	r3, #1
1a001bd6:	60e3      	str	r3, [r4, #12]

	return 1;
1a001bd8:	2001      	movs	r0, #1
1a001bda:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a001bdc:	2000      	movs	r0, #0
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;

	return 1;
}
1a001bde:	bd38      	pop	{r3, r4, r5, pc}

1a001be0 <RingBuffer_InsertMult>:

/* Insert multiple items into Ring Buffer */
int RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
1a001be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t *ptr = RingBuff->data;
1a001be4:	f8d0 e000 	ldr.w	lr, [r0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001be8:	68c3      	ldr	r3, [r0, #12]
1a001bea:	6904      	ldr	r4, [r0, #16]
1a001bec:	1b1c      	subs	r4, r3, r4
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a001bee:	6843      	ldr	r3, [r0, #4]
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a001bf0:	429c      	cmp	r4, r3
1a001bf2:	da3a      	bge.n	1a001c6a <RingBuffer_InsertMult+0x8a>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001bf4:	68c6      	ldr	r6, [r0, #12]
1a001bf6:	6905      	ldr	r5, [r0, #16]
1a001bf8:	1b76      	subs	r6, r6, r5
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
1a001bfa:	1b9e      	subs	r6, r3, r6
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
1a001bfc:	68c4      	ldr	r4, [r0, #12]
1a001bfe:	f103 3cff 	add.w	ip, r3, #4294967295
1a001c02:	ea04 0c0c 	and.w	ip, r4, ip
1a001c06:	eb0c 0406 	add.w	r4, ip, r6
1a001c0a:	429c      	cmp	r4, r3
1a001c0c:	d302      	bcc.n	1a001c14 <RingBuffer_InsertMult+0x34>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
1a001c0e:	ebcc 0303 	rsb	r3, ip, r3
1a001c12:	e000      	b.n	1a001c16 <RingBuffer_InsertMult+0x36>
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
1a001c14:	4633      	mov	r3, r6
1a001c16:	460f      	mov	r7, r1
1a001c18:	4604      	mov	r4, r0
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;
1a001c1a:	1af6      	subs	r6, r6, r3

	cnt1 = MIN(cnt1, num);
1a001c1c:	4293      	cmp	r3, r2
1a001c1e:	bfa8      	it	ge
1a001c20:	4613      	movge	r3, r2
1a001c22:	4698      	mov	r8, r3
	num -= cnt1;
1a001c24:	1ad5      	subs	r5, r2, r3

	cnt2 = MIN(cnt2, num);
1a001c26:	42b5      	cmp	r5, r6
1a001c28:	bfa8      	it	ge
1a001c2a:	4635      	movge	r5, r6
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a001c2c:	6882      	ldr	r2, [r0, #8]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
1a001c2e:	fb02 e00c 	mla	r0, r2, ip, lr
1a001c32:	fb02 f203 	mul.w	r2, r2, r3
1a001c36:	f001 f9a5 	bl	1a002f84 <memcpy>
	RingBuff->head += cnt1;
1a001c3a:	68e3      	ldr	r3, [r4, #12]
1a001c3c:	eb08 0203 	add.w	r2, r8, r3
1a001c40:	60e2      	str	r2, [r4, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
1a001c42:	6820      	ldr	r0, [r4, #0]
1a001c44:	6863      	ldr	r3, [r4, #4]
1a001c46:	3b01      	subs	r3, #1
1a001c48:	4013      	ands	r3, r2
1a001c4a:	68a2      	ldr	r2, [r4, #8]
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
1a001c4c:	fb02 0003 	mla	r0, r2, r3, r0
1a001c50:	fb02 7108 	mla	r1, r2, r8, r7
1a001c54:	fb02 f205 	mul.w	r2, r2, r5
1a001c58:	f001 f994 	bl	1a002f84 <memcpy>
	RingBuff->head += cnt2;
1a001c5c:	68e3      	ldr	r3, [r4, #12]
1a001c5e:	442b      	add	r3, r5
1a001c60:	60e3      	str	r3, [r4, #12]

	return cnt1 + cnt2;
1a001c62:	eb08 0005 	add.w	r0, r8, r5
1a001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a001c6a:	2000      	movs	r0, #0
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
	RingBuff->head += cnt2;

	return cnt1 + cnt2;
}
1a001c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001c70 <RingBuffer_Pop>:

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
1a001c70:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a001c72:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a001c74:	68c2      	ldr	r2, [r0, #12]
1a001c76:	6903      	ldr	r3, [r0, #16]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a001c78:	429a      	cmp	r2, r3
1a001c7a:	d00f      	beq.n	1a001c9c <RingBuffer_Pop+0x2c>
1a001c7c:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a001c7e:	6902      	ldr	r2, [r0, #16]
1a001c80:	6843      	ldr	r3, [r0, #4]
1a001c82:	3b01      	subs	r3, #1
1a001c84:	4013      	ands	r3, r2
1a001c86:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, RingBuff->itemSz);
1a001c88:	4608      	mov	r0, r1
1a001c8a:	fb02 5103 	mla	r1, r2, r3, r5
1a001c8e:	f001 f979 	bl	1a002f84 <memcpy>
	RingBuff->tail++;
1a001c92:	6923      	ldr	r3, [r4, #16]
1a001c94:	3301      	adds	r3, #1
1a001c96:	6123      	str	r3, [r4, #16]

	return 1;
1a001c98:	2001      	movs	r0, #1
1a001c9a:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a001c9c:	2000      	movs	r0, #0
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;

	return 1;
}
1a001c9e:	bd38      	pop	{r3, r4, r5, pc}

1a001ca0 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
int RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
1a001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *ptr = RingBuff->data;
1a001ca2:	f8d0 e000 	ldr.w	lr, [r0]
1a001ca6:	68c4      	ldr	r4, [r0, #12]
1a001ca8:	6903      	ldr	r3, [r0, #16]
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a001caa:	429c      	cmp	r4, r3
1a001cac:	d037      	beq.n	1a001d1e <RingBuffer_PopMult+0x7e>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001cae:	68c3      	ldr	r3, [r0, #12]
1a001cb0:	6904      	ldr	r4, [r0, #16]
1a001cb2:	1b1b      	subs	r3, r3, r4
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
1a001cb4:	6904      	ldr	r4, [r0, #16]
1a001cb6:	6846      	ldr	r6, [r0, #4]
1a001cb8:	f106 3cff 	add.w	ip, r6, #4294967295
1a001cbc:	ea04 0c0c 	and.w	ip, r4, ip
1a001cc0:	eb0c 0403 	add.w	r4, ip, r3
1a001cc4:	42b4      	cmp	r4, r6
1a001cc6:	d302      	bcc.n	1a001cce <RingBuffer_PopMult+0x2e>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
1a001cc8:	ebcc 0606 	rsb	r6, ip, r6
1a001ccc:	e000      	b.n	1a001cd0 <RingBuffer_PopMult+0x30>
	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
1a001cce:	461e      	mov	r6, r3
1a001cd0:	460f      	mov	r7, r1
1a001cd2:	4605      	mov	r5, r0
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;
1a001cd4:	1b9b      	subs	r3, r3, r6

	cnt1 = MIN(cnt1, num);
1a001cd6:	4296      	cmp	r6, r2
1a001cd8:	bfa8      	it	ge
1a001cda:	4616      	movge	r6, r2
	num -= cnt1;
1a001cdc:	1b94      	subs	r4, r2, r6

	cnt2 = MIN(cnt2, num);
1a001cde:	429c      	cmp	r4, r3
1a001ce0:	bfa8      	it	ge
1a001ce2:	461c      	movge	r4, r3
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a001ce4:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
1a001ce6:	4608      	mov	r0, r1
1a001ce8:	fb02 e10c 	mla	r1, r2, ip, lr
1a001cec:	fb02 f206 	mul.w	r2, r2, r6
1a001cf0:	f001 f948 	bl	1a002f84 <memcpy>
	RingBuff->tail += cnt1;
1a001cf4:	692b      	ldr	r3, [r5, #16]
1a001cf6:	18f2      	adds	r2, r6, r3
1a001cf8:	612a      	str	r2, [r5, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
1a001cfa:	6829      	ldr	r1, [r5, #0]
1a001cfc:	686b      	ldr	r3, [r5, #4]
1a001cfe:	3b01      	subs	r3, #1
1a001d00:	4013      	ands	r3, r2
1a001d02:	68aa      	ldr	r2, [r5, #8]
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
1a001d04:	fb02 7006 	mla	r0, r2, r6, r7
1a001d08:	fb02 1103 	mla	r1, r2, r3, r1
1a001d0c:	fb02 f204 	mul.w	r2, r2, r4
1a001d10:	f001 f938 	bl	1a002f84 <memcpy>
	RingBuff->tail += cnt2;
1a001d14:	692b      	ldr	r3, [r5, #16]
1a001d16:	4423      	add	r3, r4
1a001d18:	612b      	str	r3, [r5, #16]

	return cnt1 + cnt2;
1a001d1a:	1930      	adds	r0, r6, r4
1a001d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a001d1e:	2000      	movs	r0, #0
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
	RingBuff->tail += cnt2;

	return cnt1 + cnt2;
}
1a001d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001d22:	bf00      	nop

1a001d24 <Chip_USB_PllSetup>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

static void Chip_USB_PllSetup(void)
{
1a001d24:	b508      	push	{r3, lr}
	/* No need to setup anything if PLL is already setup for the frequency */
	if (Chip_Clock_GetClockInputHz(CLKIN_USBPLL) == usbPLLSetup.freq)
1a001d26:	2007      	movs	r0, #7
1a001d28:	f000 f9de 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
1a001d2c:	4b08      	ldr	r3, [pc, #32]	; (1a001d50 <Chip_USB_PllSetup+0x2c>)
1a001d2e:	4298      	cmp	r0, r3
1a001d30:	d00d      	beq.n	1a001d4e <Chip_USB_PllSetup+0x2a>
		return ;

	/* Setup default USB PLL state for a 480MHz output and attach */
	Chip_Clock_SetupPLL(CLKIN_CRYSTAL, CGU_USB_PLL, &usbPLLSetup);
1a001d32:	2006      	movs	r0, #6
1a001d34:	2100      	movs	r1, #0
1a001d36:	4a07      	ldr	r2, [pc, #28]	; (1a001d54 <Chip_USB_PllSetup+0x30>)
1a001d38:	f000 fc90 	bl	1a00265c <Chip_Clock_SetupPLL>

	/* enable USB PLL */
	Chip_Clock_EnablePLL(CGU_USB_PLL);
1a001d3c:	2000      	movs	r0, #0
1a001d3e:	f000 fcad 	bl	1a00269c <Chip_Clock_EnablePLL>

	/* Wait for PLL lock */
	while (!(Chip_Clock_GetPLLStatus(CGU_USB_PLL) & CGU_PLL_LOCKED)) {}
1a001d42:	2000      	movs	r0, #0
1a001d44:	f000 fcbe 	bl	1a0026c4 <Chip_Clock_GetPLLStatus>
1a001d48:	f010 0f01 	tst.w	r0, #1
1a001d4c:	d0f9      	beq.n	1a001d42 <Chip_USB_PllSetup+0x1e>
1a001d4e:	bd08      	pop	{r3, pc}
1a001d50:	1c9c3800 	.word	0x1c9c3800
1a001d54:	1a0032c0 	.word	0x1a0032c0

1a001d58 <Chip_USB0_Init>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/

void Chip_USB0_Init(void)
{
1a001d58:	b508      	push	{r3, lr}
	/* Set up USB PLL */
	Chip_USB_PllSetup();
1a001d5a:	f7ff ffe3 	bl	1a001d24 <Chip_USB_PllSetup>

	/* Setup USB0 base clock as clock out from USB PLL */
	Chip_Clock_SetBaseClock( CLK_BASE_USB0, CLKIN_USBPLL, true, true);
1a001d5e:	2001      	movs	r0, #1
1a001d60:	2107      	movs	r1, #7
1a001d62:	4602      	mov	r2, r0
1a001d64:	4603      	mov	r3, r0
1a001d66:	f000 fb4d 	bl	1a002404 <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB0);
1a001d6a:	2001      	movs	r0, #1
1a001d6c:	f000 fb86 	bl	1a00247c <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB0, true, true, 1);
1a001d70:	2065      	movs	r0, #101	; 0x65
1a001d72:	2101      	movs	r1, #1
1a001d74:	460a      	mov	r2, r1
1a001d76:	460b      	mov	r3, r1
1a001d78:	f000 fbc0 	bl	1a0024fc <Chip_Clock_EnableOpts>
 * @note	The USB0 PLL & clock should be configured before calling this function. This function
 * should be called before the USB0 registers are accessed.
 */
STATIC INLINE void Chip_CREG_EnableUSB0Phy(void)
{
	LPC_CREG->CREG0 &= ~(1 << 5);
1a001d7c:	4a02      	ldr	r2, [pc, #8]	; (1a001d88 <Chip_USB0_Init+0x30>)
1a001d7e:	6853      	ldr	r3, [r2, #4]
1a001d80:	f023 0320 	bic.w	r3, r3, #32
1a001d84:	6053      	str	r3, [r2, #4]
1a001d86:	bd08      	pop	{r3, pc}
1a001d88:	40043000 	.word	0x40043000

1a001d8c <Chip_USB1_Init>:
	/* enable USB0 phy */
	Chip_CREG_EnableUSB0Phy();
}

void Chip_USB1_Init(void)
{
1a001d8c:	b508      	push	{r3, lr}
	/* Setup and enable the PLL */
	Chip_USB_PllSetup();
1a001d8e:	f7ff ffc9 	bl	1a001d24 <Chip_USB_PllSetup>

	/* USB1 needs a 60MHz clock. To get it, a divider of 4 and then 2 are
	   chained to make a divide by 8 function. Connect the output of
	   divider D to the USB1 base clock. */
	Chip_Clock_SetDivider(CLK_IDIV_A, CLKIN_USBPLL, 4);
1a001d92:	2000      	movs	r0, #0
1a001d94:	2107      	movs	r1, #7
1a001d96:	2204      	movs	r2, #4
1a001d98:	f000 f960 	bl	1a00205c <Chip_Clock_SetDivider>
	Chip_Clock_SetDivider(CLK_IDIV_D, CLKIN_IDIVA, 2);
1a001d9c:	2003      	movs	r0, #3
1a001d9e:	210c      	movs	r1, #12
1a001da0:	2202      	movs	r2, #2
1a001da2:	f000 f95b 	bl	1a00205c <Chip_Clock_SetDivider>
	Chip_Clock_SetBaseClock(CLK_BASE_USB1, CLKIN_IDIVD, true, true);
1a001da6:	2003      	movs	r0, #3
1a001da8:	210f      	movs	r1, #15
1a001daa:	2201      	movs	r2, #1
1a001dac:	4613      	mov	r3, r2
1a001dae:	f000 fb29 	bl	1a002404 <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB1);
1a001db2:	2003      	movs	r0, #3
1a001db4:	f000 fb62 	bl	1a00247c <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB1, true, true, 1);
1a001db8:	206e      	movs	r0, #110	; 0x6e
1a001dba:	2101      	movs	r1, #1
1a001dbc:	460a      	mov	r2, r1
1a001dbe:	460b      	mov	r3, r1
1a001dc0:	f000 fb9c 	bl	1a0024fc <Chip_Clock_EnableOpts>
	/* enable USB1_DP and USB1_DN on chip FS phy.*/
	LPC_SCU->SFSUSB = 0x12;
1a001dc4:	2212      	movs	r2, #18
1a001dc6:	4b02      	ldr	r3, [pc, #8]	; (1a001dd0 <Chip_USB1_Init+0x44>)
1a001dc8:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
1a001dcc:	bd08      	pop	{r3, pc}
1a001dce:	bf00      	nop
1a001dd0:	40086000 	.word	0x40086000

1a001dd4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001dd4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001dd6:	2069      	movs	r0, #105	; 0x69
1a001dd8:	f000 fc02 	bl	1a0025e0 <Chip_Clock_GetRate>
1a001ddc:	4b01      	ldr	r3, [pc, #4]	; (1a001de4 <SystemCoreClockUpdate+0x10>)
1a001dde:	6018      	str	r0, [r3, #0]
1a001de0:	bd08      	pop	{r3, pc}
1a001de2:	bf00      	nop
1a001de4:	10000348 	.word	0x10000348

1a001de8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001de8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001dea:	680b      	ldr	r3, [r1, #0]
1a001dec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001df0:	d002      	beq.n	1a001df8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001df6:	600b      	str	r3, [r1, #0]
1a001df8:	4686      	mov	lr, r0
1a001dfa:	2601      	movs	r6, #1
1a001dfc:	e041      	b.n	1a001e82 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a001dfe:	680d      	ldr	r5, [r1, #0]
1a001e00:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001e04:	d008      	beq.n	1a001e18 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001e06:	1c7b      	adds	r3, r7, #1
1a001e08:	fa04 f203 	lsl.w	r2, r4, r3
1a001e0c:	694b      	ldr	r3, [r1, #20]
1a001e0e:	fb03 f302 	mul.w	r3, r3, r2
1a001e12:	fbb3 f3f6 	udiv	r3, r3, r6
1a001e16:	e004      	b.n	1a001e22 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a001e18:	694b      	ldr	r3, [r1, #20]
1a001e1a:	fb04 f303 	mul.w	r3, r4, r3
1a001e1e:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001e22:	4a19      	ldr	r2, [pc, #100]	; (1a001e88 <pll_calc_divs+0xa0>)
1a001e24:	4293      	cmp	r3, r2
1a001e26:	d920      	bls.n	1a001e6a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001e28:	4a18      	ldr	r2, [pc, #96]	; (1a001e8c <pll_calc_divs+0xa4>)
1a001e2a:	4293      	cmp	r3, r2
1a001e2c:	d823      	bhi.n	1a001e76 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a001e2e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001e32:	d103      	bne.n	1a001e3c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001e34:	1c7a      	adds	r2, r7, #1
1a001e36:	fa23 f202 	lsr.w	r2, r3, r2
1a001e3a:	e000      	b.n	1a001e3e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001e3c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001e3e:	1a85      	subs	r5, r0, r2
1a001e40:	d502      	bpl.n	1a001e48 <pll_calc_divs+0x60>
		return -val;
1a001e42:	f1c5 0c00 	rsb	ip, r5, #0
1a001e46:	e000      	b.n	1a001e4a <pll_calc_divs+0x62>
	return val;
1a001e48:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001e4a:	45e6      	cmp	lr, ip
1a001e4c:	d90d      	bls.n	1a001e6a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a001e4e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001e50:	f107 0e01 	add.w	lr, r7, #1
1a001e54:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001e58:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001e5a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001e5c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001e5e:	2d00      	cmp	r5, #0
1a001e60:	da02      	bge.n	1a001e68 <pll_calc_divs+0x80>
		return -val;
1a001e62:	f1c5 0e00 	rsb	lr, r5, #0
1a001e66:	e000      	b.n	1a001e6a <pll_calc_divs+0x82>
	return val;
1a001e68:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001e6a:	3401      	adds	r4, #1
1a001e6c:	e000      	b.n	1a001e70 <pll_calc_divs+0x88>
1a001e6e:	2401      	movs	r4, #1
1a001e70:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001e74:	ddc3      	ble.n	1a001dfe <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001e76:	3701      	adds	r7, #1
1a001e78:	e000      	b.n	1a001e7c <pll_calc_divs+0x94>
1a001e7a:	2700      	movs	r7, #0
1a001e7c:	2f03      	cmp	r7, #3
1a001e7e:	ddf6      	ble.n	1a001e6e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001e80:	3601      	adds	r6, #1
1a001e82:	2e04      	cmp	r6, #4
1a001e84:	ddf9      	ble.n	1a001e7a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001e88:	094c5eff 	.word	0x094c5eff
1a001e8c:	1312d000 	.word	0x1312d000

1a001e90 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001e92:	b099      	sub	sp, #100	; 0x64
1a001e94:	4605      	mov	r5, r0
1a001e96:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001e98:	4668      	mov	r0, sp
1a001e9a:	2100      	movs	r1, #0
1a001e9c:	2260      	movs	r2, #96	; 0x60
1a001e9e:	f001 f87c 	bl	1a002f9a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001ea2:	2380      	movs	r3, #128	; 0x80
1a001ea4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001ea6:	6963      	ldr	r3, [r4, #20]
1a001ea8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001eaa:	7923      	ldrb	r3, [r4, #4]
1a001eac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001eb0:	4628      	mov	r0, r5
1a001eb2:	4669      	mov	r1, sp
1a001eb4:	f7ff ff98 	bl	1a001de8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001eb8:	9b06      	ldr	r3, [sp, #24]
1a001eba:	42ab      	cmp	r3, r5
1a001ebc:	d107      	bne.n	1a001ece <pll_get_frac+0x3e>
		*ppll = pll[0];
1a001ebe:	466d      	mov	r5, sp
1a001ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001ec4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001ecc:	e05e      	b.n	1a001f8c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001ece:	1aeb      	subs	r3, r5, r3
1a001ed0:	d500      	bpl.n	1a001ed4 <pll_get_frac+0x44>
		return -val;
1a001ed2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001ed4:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001edc:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001ede:	6963      	ldr	r3, [r4, #20]
1a001ee0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001ee2:	7923      	ldrb	r3, [r4, #4]
1a001ee4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001ee8:	4628      	mov	r0, r5
1a001eea:	a910      	add	r1, sp, #64	; 0x40
1a001eec:	f7ff ff7c 	bl	1a001de8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001ef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001ef2:	42ab      	cmp	r3, r5
1a001ef4:	d107      	bne.n	1a001f06 <pll_get_frac+0x76>
		*ppll = pll[2];
1a001ef6:	ad10      	add	r5, sp, #64	; 0x40
1a001ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001efc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001f04:	e042      	b.n	1a001f8c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001f06:	1aeb      	subs	r3, r5, r3
1a001f08:	d500      	bpl.n	1a001f0c <pll_get_frac+0x7c>
		return -val;
1a001f0a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001f0c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001f0e:	4b20      	ldr	r3, [pc, #128]	; (1a001f90 <pll_get_frac+0x100>)
1a001f10:	429d      	cmp	r5, r3
1a001f12:	d812      	bhi.n	1a001f3a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a001f14:	2340      	movs	r3, #64	; 0x40
1a001f16:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001f18:	6963      	ldr	r3, [r4, #20]
1a001f1a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001f1c:	4628      	mov	r0, r5
1a001f1e:	a908      	add	r1, sp, #32
1a001f20:	f7ff ff62 	bl	1a001de8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001f26:	42ab      	cmp	r3, r5
1a001f28:	d107      	bne.n	1a001f3a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a001f2a:	ad08      	add	r5, sp, #32
1a001f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001f30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001f38:	e028      	b.n	1a001f8c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001f3c:	1aed      	subs	r5, r5, r3
1a001f3e:	d500      	bpl.n	1a001f42 <pll_get_frac+0xb2>
		return -val;
1a001f40:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001f42:	42ae      	cmp	r6, r5
1a001f44:	dc11      	bgt.n	1a001f6a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a001f46:	42be      	cmp	r6, r7
1a001f48:	dc07      	bgt.n	1a001f5a <pll_get_frac+0xca>
			*ppll = pll[0];
1a001f4a:	466d      	mov	r5, sp
1a001f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001f50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001f58:	e018      	b.n	1a001f8c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001f5a:	ad10      	add	r5, sp, #64	; 0x40
1a001f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001f60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001f68:	e010      	b.n	1a001f8c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a001f6a:	42af      	cmp	r7, r5
1a001f6c:	db07      	blt.n	1a001f7e <pll_get_frac+0xee>
			*ppll = pll[1];
1a001f6e:	ad08      	add	r5, sp, #32
1a001f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001f74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001f7c:	e006      	b.n	1a001f8c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001f7e:	ad10      	add	r5, sp, #64	; 0x40
1a001f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001f84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001f8c:	b019      	add	sp, #100	; 0x64
1a001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001f90:	068e7780 	.word	0x068e7780

1a001f94 <Chip_Clock_TestMainPLLMultiplier>:

/* Test PLL input values for a specific frequency range */
static uint32_t Chip_Clock_TestMainPLLMultiplier(uint32_t InputHz, uint32_t TestMult, uint32_t MinHz, uint32_t MaxHz)
{
	uint32_t TestHz = TestMult * InputHz;
1a001f94:	fb00 f001 	mul.w	r0, r0, r1

	if ((TestHz < MinHz) || (TestHz > MAX_CLOCK_FREQ) || (TestHz > MaxHz)) {
1a001f98:	4290      	cmp	r0, r2
1a001f9a:	d305      	bcc.n	1a001fa8 <Chip_Clock_TestMainPLLMultiplier+0x14>
1a001f9c:	4a05      	ldr	r2, [pc, #20]	; (1a001fb4 <Chip_Clock_TestMainPLLMultiplier+0x20>)
1a001f9e:	4290      	cmp	r0, r2
1a001fa0:	d804      	bhi.n	1a001fac <Chip_Clock_TestMainPLLMultiplier+0x18>
1a001fa2:	4298      	cmp	r0, r3
1a001fa4:	d804      	bhi.n	1a001fb0 <Chip_Clock_TestMainPLLMultiplier+0x1c>
1a001fa6:	4770      	bx	lr
		TestHz = 0;
1a001fa8:	2000      	movs	r0, #0
1a001faa:	4770      	bx	lr
1a001fac:	2000      	movs	r0, #0
1a001fae:	4770      	bx	lr
1a001fb0:	2000      	movs	r0, #0
	}

	return TestHz;
}
1a001fb2:	4770      	bx	lr
1a001fb4:	0c28cb00 	.word	0x0c28cb00

1a001fb8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001fb8:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001fba:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001fbc:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001fbe:	e010      	b.n	1a001fe2 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001fc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001fc4:	0052      	lsls	r2, r2, #1
1a001fc6:	4d0d      	ldr	r5, [pc, #52]	; (1a001ffc <Chip_Clock_FindBaseClock+0x44>)
1a001fc8:	5aaa      	ldrh	r2, [r5, r2]
1a001fca:	4282      	cmp	r2, r0
1a001fcc:	d806      	bhi.n	1a001fdc <Chip_Clock_FindBaseClock+0x24>
1a001fce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001fd2:	0052      	lsls	r2, r2, #1
1a001fd4:	442a      	add	r2, r5
1a001fd6:	8852      	ldrh	r2, [r2, #2]
1a001fd8:	4282      	cmp	r2, r0
1a001fda:	d201      	bcs.n	1a001fe0 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001fdc:	3301      	adds	r3, #1
1a001fde:	e000      	b.n	1a001fe2 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001fe0:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001fe2:	291c      	cmp	r1, #28
1a001fe4:	d107      	bne.n	1a001ff6 <Chip_Clock_FindBaseClock+0x3e>
1a001fe6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001fea:	0052      	lsls	r2, r2, #1
1a001fec:	4c03      	ldr	r4, [pc, #12]	; (1a001ffc <Chip_Clock_FindBaseClock+0x44>)
1a001fee:	4422      	add	r2, r4
1a001ff0:	7914      	ldrb	r4, [r2, #4]
1a001ff2:	428c      	cmp	r4, r1
1a001ff4:	d1e4      	bne.n	1a001fc0 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a001ff6:	4608      	mov	r0, r1
1a001ff8:	bc30      	pop	{r4, r5}
1a001ffa:	4770      	bx	lr
1a001ffc:	1a0032d4 	.word	0x1a0032d4

1a002000 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002000:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002006:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002008:	4a0d      	ldr	r2, [pc, #52]	; (1a002040 <Chip_Clock_EnableCrystal+0x40>)
1a00200a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00200c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002010:	6992      	ldr	r2, [r2, #24]
1a002012:	428a      	cmp	r2, r1
1a002014:	d001      	beq.n	1a00201a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002016:	4a0a      	ldr	r2, [pc, #40]	; (1a002040 <Chip_Clock_EnableCrystal+0x40>)
1a002018:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00201a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00201e:	4a09      	ldr	r2, [pc, #36]	; (1a002044 <Chip_Clock_EnableCrystal+0x44>)
1a002020:	6811      	ldr	r1, [r2, #0]
1a002022:	4a09      	ldr	r2, [pc, #36]	; (1a002048 <Chip_Clock_EnableCrystal+0x48>)
1a002024:	4291      	cmp	r1, r2
1a002026:	d901      	bls.n	1a00202c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002028:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00202c:	4a04      	ldr	r2, [pc, #16]	; (1a002040 <Chip_Clock_EnableCrystal+0x40>)
1a00202e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002030:	9b01      	ldr	r3, [sp, #4]
1a002032:	1e5a      	subs	r2, r3, #1
1a002034:	9201      	str	r2, [sp, #4]
1a002036:	2b00      	cmp	r3, #0
1a002038:	d1fa      	bne.n	1a002030 <Chip_Clock_EnableCrystal+0x30>
}
1a00203a:	b002      	add	sp, #8
1a00203c:	4770      	bx	lr
1a00203e:	bf00      	nop
1a002040:	40050000 	.word	0x40050000
1a002044:	1a00323c 	.word	0x1a00323c
1a002048:	01312cff 	.word	0x01312cff

1a00204c <Chip_Clock_DisableCrystal>:

/* Disables the crystal oscillator */
void Chip_Clock_DisableCrystal(void)
{
	/* Disable crystal oscillator */
	LPC_CGU->XTAL_OSC_CTRL |= 1;
1a00204c:	4a02      	ldr	r2, [pc, #8]	; (1a002058 <Chip_Clock_DisableCrystal+0xc>)
1a00204e:	6993      	ldr	r3, [r2, #24]
1a002050:	f043 0301 	orr.w	r3, r3, #1
1a002054:	6193      	str	r3, [r2, #24]
1a002056:	4770      	bx	lr
1a002058:	40050000 	.word	0x40050000

1a00205c <Chip_Clock_SetDivider>:
	return (m / (2 * p)) * (freq / n);
}

/* Sets up a CGU clock divider and it's input clock */
void Chip_Clock_SetDivider(CHIP_CGU_IDIV_T Divider, CHIP_CGU_CLKIN_T Input, uint32_t Divisor)
{
1a00205c:	b410      	push	{r4}
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00205e:	f100 0412 	add.w	r4, r0, #18
1a002062:	4b11      	ldr	r3, [pc, #68]	; (1a0020a8 <Chip_Clock_SetDivider+0x4c>)
1a002064:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]

	Divisor--;
1a002068:	3a01      	subs	r2, #1

	if (Input != CLKINPUT_PD) {
1a00206a:	2911      	cmp	r1, #17
1a00206c:	d013      	beq.n	1a002096 <Chip_Clock_SetDivider+0x3a>
		/* Mask off bits that need to changes */
		reg &= ~((0x1F << 24) | 1 | (CHIP_CGU_IDIV_MASK(Divider) << 2));
1a00206e:	4c0f      	ldr	r4, [pc, #60]	; (1a0020ac <Chip_Clock_SetDivider+0x50>)
1a002070:	5c24      	ldrb	r4, [r4, r0]
1a002072:	00a4      	lsls	r4, r4, #2
1a002074:	f044 54f8 	orr.w	r4, r4, #520093696	; 0x1f000000
1a002078:	f044 0401 	orr.w	r4, r4, #1
1a00207c:	ea23 0304 	bic.w	r3, r3, r4

		/* Enable autoblocking, clear PD, and set clock source & divisor */
		LPC_CGU->IDIV_CTRL[Divider] = reg | (1 << 11) | (Input << 24) | (Divisor << 2);
1a002080:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a002084:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
1a002088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a00208c:	3012      	adds	r0, #18
1a00208e:	4b06      	ldr	r3, [pc, #24]	; (1a0020a8 <Chip_Clock_SetDivider+0x4c>)
1a002090:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
1a002094:	e005      	b.n	1a0020a2 <Chip_Clock_SetDivider+0x46>
	}
	else {
		LPC_CGU->IDIV_CTRL[Divider] = reg | 1;	/* Power down this divider */
1a002096:	f043 0301 	orr.w	r3, r3, #1
1a00209a:	3012      	adds	r0, #18
1a00209c:	4a02      	ldr	r2, [pc, #8]	; (1a0020a8 <Chip_Clock_SetDivider+0x4c>)
1a00209e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}
}
1a0020a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0020a6:	4770      	bx	lr
1a0020a8:	40050000 	.word	0x40050000
1a0020ac:	1a003344 	.word	0x1a003344

1a0020b0 <Chip_Clock_GetDividerSource>:

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0020b0:	3012      	adds	r0, #18
1a0020b2:	4b05      	ldr	r3, [pc, #20]	; (1a0020c8 <Chip_Clock_GetDividerSource+0x18>)
1a0020b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0020b8:	f010 0f01 	tst.w	r0, #1
1a0020bc:	d102      	bne.n	1a0020c4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0020be:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0020c2:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a0020c4:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0020c6:	4770      	bx	lr
1a0020c8:	40050000 	.word	0x40050000

1a0020cc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0020cc:	f100 0212 	add.w	r2, r0, #18
1a0020d0:	4b03      	ldr	r3, [pc, #12]	; (1a0020e0 <Chip_Clock_GetDividerDivisor+0x14>)
1a0020d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0020d6:	4b03      	ldr	r3, [pc, #12]	; (1a0020e4 <Chip_Clock_GetDividerDivisor+0x18>)
1a0020d8:	5c18      	ldrb	r0, [r3, r0]
}
1a0020da:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0020de:	4770      	bx	lr
1a0020e0:	40050000 	.word	0x40050000
1a0020e4:	1a003344 	.word	0x1a003344

1a0020e8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0020e8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0020ea:	2810      	cmp	r0, #16
1a0020ec:	d80a      	bhi.n	1a002104 <Chip_Clock_GetClockInputHz+0x1c>
1a0020ee:	e8df f000 	tbb	[pc, r0]
1a0020f2:	0b42      	.short	0x0b42
1a0020f4:	091f160d 	.word	0x091f160d
1a0020f8:	2b282522 	.word	0x2b282522
1a0020fc:	322e0909 	.word	0x322e0909
1a002100:	3a36      	.short	0x3a36
1a002102:	3e          	.byte	0x3e
1a002103:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002104:	2000      	movs	r0, #0
1a002106:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002108:	481e      	ldr	r0, [pc, #120]	; (1a002184 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00210a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00210c:	4b1e      	ldr	r3, [pc, #120]	; (1a002188 <Chip_Clock_GetClockInputHz+0xa0>)
1a00210e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002112:	f003 0307 	and.w	r3, r3, #7
1a002116:	2b04      	cmp	r3, #4
1a002118:	d130      	bne.n	1a00217c <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00211a:	2000      	movs	r0, #0
1a00211c:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00211e:	4b1a      	ldr	r3, [pc, #104]	; (1a002188 <Chip_Clock_GetClockInputHz+0xa0>)
1a002120:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002124:	f003 0307 	and.w	r3, r3, #7
1a002128:	2b04      	cmp	r3, #4
1a00212a:	d029      	beq.n	1a002180 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00212c:	4817      	ldr	r0, [pc, #92]	; (1a00218c <Chip_Clock_GetClockInputHz+0xa4>)
1a00212e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002130:	4b17      	ldr	r3, [pc, #92]	; (1a002190 <Chip_Clock_GetClockInputHz+0xa8>)
1a002132:	6818      	ldr	r0, [r3, #0]
		break;
1a002134:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002136:	4b17      	ldr	r3, [pc, #92]	; (1a002194 <Chip_Clock_GetClockInputHz+0xac>)
1a002138:	6818      	ldr	r0, [r3, #0]
		break;
1a00213a:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00213c:	4b16      	ldr	r3, [pc, #88]	; (1a002198 <Chip_Clock_GetClockInputHz+0xb0>)
1a00213e:	6818      	ldr	r0, [r3, #0]
		break;
1a002140:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002142:	4b15      	ldr	r3, [pc, #84]	; (1a002198 <Chip_Clock_GetClockInputHz+0xb0>)
1a002144:	6858      	ldr	r0, [r3, #4]
		break;
1a002146:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002148:	f000 f916 	bl	1a002378 <Chip_Clock_GetMainPLLHz>
		break;
1a00214c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00214e:	2100      	movs	r1, #0
1a002150:	f000 f946 	bl	1a0023e0 <Chip_Clock_GetDivRate>
		break;
1a002154:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002156:	2101      	movs	r1, #1
1a002158:	f000 f942 	bl	1a0023e0 <Chip_Clock_GetDivRate>
		break;
1a00215c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00215e:	2102      	movs	r1, #2
1a002160:	f000 f93e 	bl	1a0023e0 <Chip_Clock_GetDivRate>
		break;
1a002164:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002166:	2103      	movs	r1, #3
1a002168:	f000 f93a 	bl	1a0023e0 <Chip_Clock_GetDivRate>
		break;
1a00216c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00216e:	2104      	movs	r1, #4
1a002170:	f000 f936 	bl	1a0023e0 <Chip_Clock_GetDivRate>
		break;
1a002174:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a002176:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a00217a:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00217c:	4803      	ldr	r0, [pc, #12]	; (1a00218c <Chip_Clock_GetClockInputHz+0xa4>)
1a00217e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002180:	4806      	ldr	r0, [pc, #24]	; (1a00219c <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002182:	bd08      	pop	{r3, pc}
1a002184:	00b71b00 	.word	0x00b71b00
1a002188:	40043000 	.word	0x40043000
1a00218c:	017d7840 	.word	0x017d7840
1a002190:	1a003240 	.word	0x1a003240
1a002194:	1a00323c 	.word	0x1a00323c
1a002198:	10000198 	.word	0x10000198
1a00219c:	02faf080 	.word	0x02faf080

1a0021a0 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0021a0:	b538      	push	{r3, r4, r5, lr}
1a0021a2:	4605      	mov	r5, r0
1a0021a4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0021a6:	7908      	ldrb	r0, [r1, #4]
1a0021a8:	f7ff ff9e 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
1a0021ac:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0021ae:	4b19      	ldr	r3, [pc, #100]	; (1a002214 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0021b0:	442b      	add	r3, r5
1a0021b2:	4a19      	ldr	r2, [pc, #100]	; (1a002218 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0021b4:	4293      	cmp	r3, r2
1a0021b6:	d821      	bhi.n	1a0021fc <Chip_Clock_CalcMainPLLValue+0x5c>
1a0021b8:	b318      	cbz	r0, 1a002202 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0021ba:	2380      	movs	r3, #128	; 0x80
1a0021bc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0021be:	2300      	movs	r3, #0
1a0021c0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0021c2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0021c4:	fbb5 f3f0 	udiv	r3, r5, r0
1a0021c8:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0021ca:	4a14      	ldr	r2, [pc, #80]	; (1a00221c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0021cc:	4295      	cmp	r5, r2
1a0021ce:	d903      	bls.n	1a0021d8 <Chip_Clock_CalcMainPLLValue+0x38>
1a0021d0:	fb03 f000 	mul.w	r0, r3, r0
1a0021d4:	42a8      	cmp	r0, r5
1a0021d6:	d007      	beq.n	1a0021e8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0021d8:	4628      	mov	r0, r5
1a0021da:	4621      	mov	r1, r4
1a0021dc:	f7ff fe58 	bl	1a001e90 <pll_get_frac>
		if (!ppll->nsel) {
1a0021e0:	68a3      	ldr	r3, [r4, #8]
1a0021e2:	b18b      	cbz	r3, 1a002208 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a0021e4:	3b01      	subs	r3, #1
1a0021e6:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a0021e8:	6923      	ldr	r3, [r4, #16]
1a0021ea:	b183      	cbz	r3, 1a00220e <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a0021ec:	68e2      	ldr	r2, [r4, #12]
1a0021ee:	b10a      	cbz	r2, 1a0021f4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0021f0:	3a01      	subs	r2, #1
1a0021f2:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a0021f4:	3b01      	subs	r3, #1
1a0021f6:	6123      	str	r3, [r4, #16]

	return 0;
1a0021f8:	2000      	movs	r0, #0
1a0021fa:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a0021fc:	f04f 30ff 	mov.w	r0, #4294967295
1a002200:	bd38      	pop	{r3, r4, r5, pc}
1a002202:	f04f 30ff 	mov.w	r0, #4294967295
1a002206:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002208:	f04f 30ff 	mov.w	r0, #4294967295
1a00220c:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00220e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a002212:	bd38      	pop	{r3, r4, r5, pc}
1a002214:	ff6b3a10 	.word	0xff6b3a10
1a002218:	0b940510 	.word	0x0b940510
1a00221c:	094c5eff 	.word	0x094c5eff

1a002220 <Chip_Clock_SetupMainPLLMult>:
	return 0;
}

/* Directly set the PLL multipler */
uint32_t Chip_Clock_SetupMainPLLMult(CHIP_CGU_CLKIN_T Input, uint32_t mult)
{
1a002220:	b570      	push	{r4, r5, r6, lr}
1a002222:	b082      	sub	sp, #8
1a002224:	4605      	mov	r5, r0
1a002226:	460c      	mov	r4, r1
	volatile uint32_t delay = 250;
1a002228:	23fa      	movs	r3, #250	; 0xfa
1a00222a:	9301      	str	r3, [sp, #4]
	uint32_t freq = Chip_Clock_GetClockInputHz(Input);
1a00222c:	f7ff ff5c 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
	uint32_t msel = 0, nsel = 0, psel = 0, pval = 1;
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002230:	4b1e      	ldr	r3, [pc, #120]	; (1a0022ac <Chip_Clock_SetupMainPLLMult+0x8c>)
1a002232:	6c5a      	ldr	r2, [r3, #68]	; 0x44

	freq *= mult;
1a002234:	fb04 f000 	mul.w	r0, r4, r0
	msel = mult - 1;
1a002238:	1e61      	subs	r1, r4, #1

	PLLReg &= ~(0x1F << 24);/* clear input source bits */
1a00223a:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
	PLLReg |= Input << 24;	/* set input source bits to parameter */
1a00223e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24

	/* Clear other PLL input bits */
	PLLReg &= ~((1 << 6) |	/* FBSEL */
1a002242:	4b1b      	ldr	r3, [pc, #108]	; (1a0022b0 <Chip_Clock_SetupMainPLLMult+0x90>)
1a002244:	4013      	ands	r3, r2
				(1 << 1) |	/* BYPASS */
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */
1a002246:	f443 6600 	orr.w	r6, r3, #2048	; 0x800

	if (freq < 156000000) {
1a00224a:	4b1a      	ldr	r3, [pc, #104]	; (1a0022b4 <Chip_Clock_SetupMainPLLMult+0x94>)
1a00224c:	4298      	cmp	r0, r3
1a00224e:	d903      	bls.n	1a002258 <Chip_Clock_SetupMainPLLMult+0x38>
1a002250:	e012      	b.n	1a002278 <Chip_Clock_SetupMainPLLMult+0x58>
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
			psel++;
1a002252:	3401      	adds	r4, #1
			pval *= 2;
1a002254:	0052      	lsls	r2, r2, #1
1a002256:	e001      	b.n	1a00225c <Chip_Clock_SetupMainPLLMult+0x3c>
1a002258:	2201      	movs	r2, #1
1a00225a:	2400      	movs	r4, #0
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */

	if (freq < 156000000) {
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a00225c:	fb00 f302 	mul.w	r3, r0, r2
1a002260:	4d14      	ldr	r5, [pc, #80]	; (1a0022b4 <Chip_Clock_SetupMainPLLMult+0x94>)
1a002262:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
1a002266:	d2f4      	bcs.n	1a002252 <Chip_Clock_SetupMainPLLMult+0x32>
			psel++;
			pval *= 2;
		}

		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 6);	/* dividers + FBSEL */
1a002268:	0224      	lsls	r4, r4, #8
1a00226a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a00226e:	ea44 0306 	orr.w	r3, r4, r6
1a002272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002276:	e00e      	b.n	1a002296 <Chip_Clock_SetupMainPLLMult+0x76>
	}
	else if (freq < 320000000) {
1a002278:	4b0f      	ldr	r3, [pc, #60]	; (1a0022b8 <Chip_Clock_SetupMainPLLMult+0x98>)
1a00227a:	4298      	cmp	r0, r3
1a00227c:	d804      	bhi.n	1a002288 <Chip_Clock_SetupMainPLLMult+0x68>
		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 7) | (1 << 6);	/* dividers + DIRECT + FBSEL */
1a00227e:	ea46 4301 	orr.w	r3, r6, r1, lsl #16
1a002282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a002286:	e006      	b.n	1a002296 <Chip_Clock_SetupMainPLLMult+0x76>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002288:	4a08      	ldr	r2, [pc, #32]	; (1a0022ac <Chip_Clock_SetupMainPLLMult+0x8c>)
1a00228a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00228c:	f043 0301 	orr.w	r3, r3, #1
1a002290:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else {
		Chip_Clock_DisableMainPLL();
		return 0;
1a002292:	2000      	movs	r0, #0
1a002294:	e008      	b.n	1a0022a8 <Chip_Clock_SetupMainPLLMult+0x88>
	}
	LPC_CGU->PLL1_CTRL = PLLReg & ~(1 << 0);
1a002296:	f023 0301 	bic.w	r3, r3, #1
1a00229a:	4a04      	ldr	r2, [pc, #16]	; (1a0022ac <Chip_Clock_SetupMainPLLMult+0x8c>)
1a00229c:	6453      	str	r3, [r2, #68]	; 0x44

	/* Wait for 50uSec */
	while(delay--) {}
1a00229e:	9b01      	ldr	r3, [sp, #4]
1a0022a0:	1e5a      	subs	r2, r3, #1
1a0022a2:	9201      	str	r2, [sp, #4]
1a0022a4:	2b00      	cmp	r3, #0
1a0022a6:	d1fa      	bne.n	1a00229e <Chip_Clock_SetupMainPLLMult+0x7e>

	return freq;
}
1a0022a8:	b002      	add	sp, #8
1a0022aa:	bd70      	pop	{r4, r5, r6, pc}
1a0022ac:	40050000 	.word	0x40050000
1a0022b0:	ff00cc3d 	.word	0xff00cc3d
1a0022b4:	094c5eff 	.word	0x094c5eff
1a0022b8:	1312cfff 	.word	0x1312cfff

1a0022bc <Chip_Clock_SetupMainPLLHz>:
	LPC_CGU->XTAL_OSC_CTRL |= 1;
}

/* Configures the main PLL */
uint32_t Chip_Clock_SetupMainPLLHz(CHIP_CGU_CLKIN_T Input, uint32_t MinHz, uint32_t DesiredHz, uint32_t MaxHz)
{
1a0022bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0022c0:	4682      	mov	sl, r0
1a0022c2:	460f      	mov	r7, r1
1a0022c4:	4690      	mov	r8, r2
1a0022c6:	461e      	mov	r6, r3
	uint32_t freqin = Chip_Clock_GetClockInputHz(Input);
1a0022c8:	f7ff ff0e 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
1a0022cc:	4605      	mov	r5, r0
	uint32_t Mult, LastMult, MultEnd;
	uint32_t freqout, freqout2;

	if (DesiredHz != 0xFFFFFFFF) {
1a0022ce:	f1b8 3fff 	cmp.w	r8, #4294967295
1a0022d2:	d033      	beq.n	1a00233c <Chip_Clock_SetupMainPLLHz+0x80>
		/* Test DesiredHz rounded down */
		Mult = DesiredHz / freqin;
1a0022d4:	fbb8 f9f0 	udiv	r9, r8, r0
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a0022d8:	4649      	mov	r1, r9
1a0022da:	463a      	mov	r2, r7
1a0022dc:	4633      	mov	r3, r6
1a0022de:	f7ff fe59 	bl	1a001f94 <Chip_Clock_TestMainPLLMultiplier>
1a0022e2:	4604      	mov	r4, r0

		/* Test DesiredHz rounded up */
		Mult++;
1a0022e4:	f109 0b01 	add.w	fp, r9, #1
		freqout2 = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a0022e8:	4628      	mov	r0, r5
1a0022ea:	4659      	mov	r1, fp
1a0022ec:	463a      	mov	r2, r7
1a0022ee:	4633      	mov	r3, r6
1a0022f0:	f7ff fe50 	bl	1a001f94 <Chip_Clock_TestMainPLLMultiplier>

		if (freqout && !freqout2) {	/* rounding up is no good? set first multiplier */
1a0022f4:	b134      	cbz	r4, 1a002304 <Chip_Clock_SetupMainPLLHz+0x48>
1a0022f6:	b928      	cbnz	r0, 1a002304 <Chip_Clock_SetupMainPLLHz+0x48>
			Mult--;
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a0022f8:	4650      	mov	r0, sl
1a0022fa:	4649      	mov	r1, r9
1a0022fc:	f7ff ff90 	bl	1a002220 <Chip_Clock_SetupMainPLLMult>
1a002300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		if (!freqout && freqout2) {	/* didn't work until rounded up? set 2nd multiplier */
1a002304:	b934      	cbnz	r4, 1a002314 <Chip_Clock_SetupMainPLLHz+0x58>
1a002306:	b128      	cbz	r0, 1a002314 <Chip_Clock_SetupMainPLLHz+0x58>
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a002308:	4650      	mov	r0, sl
1a00230a:	4659      	mov	r1, fp
1a00230c:	f7ff ff88 	bl	1a002220 <Chip_Clock_SetupMainPLLMult>
1a002310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		if (freqout && freqout2) {	/* either multiplier okay? choose closer one */
1a002314:	b194      	cbz	r4, 1a00233c <Chip_Clock_SetupMainPLLHz+0x80>
1a002316:	b188      	cbz	r0, 1a00233c <Chip_Clock_SetupMainPLLHz+0x80>
			if ((DesiredHz - freqout) > (freqout2 - DesiredHz)) {
1a002318:	ebc4 0408 	rsb	r4, r4, r8
1a00231c:	ebc8 0000 	rsb	r0, r8, r0
1a002320:	4284      	cmp	r4, r0
1a002322:	d905      	bls.n	1a002330 <Chip_Clock_SetupMainPLLHz+0x74>
				Mult--;
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a002324:	4650      	mov	r0, sl
1a002326:	4649      	mov	r1, r9
1a002328:	f7ff ff7a 	bl	1a002220 <Chip_Clock_SetupMainPLLMult>
1a00232c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
			else {
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a002330:	4650      	mov	r0, sl
1a002332:	4659      	mov	r1, fp
1a002334:	f7ff ff74 	bl	1a002220 <Chip_Clock_SetupMainPLLMult>
1a002338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	/* Neither multiplier okay? Try to start at MinHz and increment.
	   This should find the highest multiplier that is still good */
	Mult = MinHz / freqin;
1a00233c:	fbb7 f4f5 	udiv	r4, r7, r5
	MultEnd = MaxHz / freqin;
1a002340:	fbb6 f8f5 	udiv	r8, r6, r5
	LastMult = 0;
1a002344:	f04f 0900 	mov.w	r9, #0
	while (1) {
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a002348:	4628      	mov	r0, r5
1a00234a:	4621      	mov	r1, r4
1a00234c:	463a      	mov	r2, r7
1a00234e:	4633      	mov	r3, r6
1a002350:	f7ff fe20 	bl	1a001f94 <Chip_Clock_TestMainPLLMultiplier>

		if (freqout) {
1a002354:	b100      	cbz	r0, 1a002358 <Chip_Clock_SetupMainPLLHz+0x9c>
			LastMult = Mult;
1a002356:	46a1      	mov	r9, r4
		}

		if (Mult >= MultEnd) {
1a002358:	4544      	cmp	r4, r8
1a00235a:	d201      	bcs.n	1a002360 <Chip_Clock_SetupMainPLLHz+0xa4>
			break;
		}
		Mult++;
1a00235c:	3401      	adds	r4, #1
	}
1a00235e:	e7f3      	b.n	1a002348 <Chip_Clock_SetupMainPLLHz+0x8c>

	if (LastMult) {
1a002360:	f1b9 0f00 	cmp.w	r9, #0
1a002364:	d005      	beq.n	1a002372 <Chip_Clock_SetupMainPLLHz+0xb6>
		return Chip_Clock_SetupMainPLLMult(Input, LastMult);
1a002366:	4650      	mov	r0, sl
1a002368:	4649      	mov	r1, r9
1a00236a:	f7ff ff59 	bl	1a002220 <Chip_Clock_SetupMainPLLMult>
1a00236e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return 0;
1a002372:	2000      	movs	r0, #0
}
1a002374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002378 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a002378:	b570      	push	{r4, r5, r6, lr}
1a00237a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00237c:	4d16      	ldr	r5, [pc, #88]	; (1a0023d8 <Chip_Clock_GetMainPLLHz+0x60>)
1a00237e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002380:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002384:	f7ff feb0 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
1a002388:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00238a:	4b14      	ldr	r3, [pc, #80]	; (1a0023dc <Chip_Clock_GetMainPLLHz+0x64>)
1a00238c:	6818      	ldr	r0, [r3, #0]
1a00238e:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002390:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002392:	f010 0001 	ands.w	r0, r0, #1
1a002396:	d01d      	beq.n	1a0023d4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002398:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00239c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0023a0:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a0023a4:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a0023a8:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a0023aa:	3201      	adds	r2, #1
	p = ptab[psel];
1a0023ac:	a802      	add	r0, sp, #8
1a0023ae:	4401      	add	r1, r0
1a0023b0:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a0023b4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0023b8:	d100      	bne.n	1a0023bc <Chip_Clock_GetMainPLLHz+0x44>
1a0023ba:	b125      	cbz	r5, 1a0023c6 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0023bc:	fbb6 f0f2 	udiv	r0, r6, r2
1a0023c0:	fb03 f000 	mul.w	r0, r3, r0
1a0023c4:	e006      	b.n	1a0023d4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0023c6:	0040      	lsls	r0, r0, #1
1a0023c8:	fbb3 f3f0 	udiv	r3, r3, r0
1a0023cc:	fbb6 f0f2 	udiv	r0, r6, r2
1a0023d0:	fb00 f003 	mul.w	r0, r0, r3
}
1a0023d4:	b002      	add	sp, #8
1a0023d6:	bd70      	pop	{r4, r5, r6, pc}
1a0023d8:	40050000 	.word	0x40050000
1a0023dc:	1a003340 	.word	0x1a003340

1a0023e0 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0023e0:	b538      	push	{r3, r4, r5, lr}
1a0023e2:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0023e4:	4608      	mov	r0, r1
1a0023e6:	f7ff fe63 	bl	1a0020b0 <Chip_Clock_GetDividerSource>
1a0023ea:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0023ec:	4620      	mov	r0, r4
1a0023ee:	f7ff fe6d 	bl	1a0020cc <Chip_Clock_GetDividerDivisor>
1a0023f2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0023f4:	4628      	mov	r0, r5
1a0023f6:	f7ff fe77 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
1a0023fa:	3401      	adds	r4, #1
}
1a0023fc:	fbb0 f0f4 	udiv	r0, r0, r4
1a002400:	bd38      	pop	{r3, r4, r5, pc}
1a002402:	bf00      	nop

1a002404 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002404:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002406:	0085      	lsls	r5, r0, #2
1a002408:	4c0d      	ldr	r4, [pc, #52]	; (1a002440 <Chip_Clock_SetBaseClock+0x3c>)
1a00240a:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a00240c:	281b      	cmp	r0, #27
1a00240e:	d80f      	bhi.n	1a002430 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002410:	2911      	cmp	r1, #17
1a002412:	d012      	beq.n	1a00243a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002414:	4c0b      	ldr	r4, [pc, #44]	; (1a002444 <Chip_Clock_SetBaseClock+0x40>)
1a002416:	402c      	ands	r4, r5

			if (autoblocken) {
1a002418:	b10a      	cbz	r2, 1a00241e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00241a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00241e:	b10b      	cbz	r3, 1a002424 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002420:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002424:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002428:	0080      	lsls	r0, r0, #2
1a00242a:	4b05      	ldr	r3, [pc, #20]	; (1a002440 <Chip_Clock_SetBaseClock+0x3c>)
1a00242c:	501c      	str	r4, [r3, r0]
1a00242e:	e004      	b.n	1a00243a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002430:	f045 0501 	orr.w	r5, r5, #1
1a002434:	0080      	lsls	r0, r0, #2
1a002436:	4b02      	ldr	r3, [pc, #8]	; (1a002440 <Chip_Clock_SetBaseClock+0x3c>)
1a002438:	501d      	str	r5, [r3, r0]
	}
}
1a00243a:	bc30      	pop	{r4, r5}
1a00243c:	4770      	bx	lr
1a00243e:	bf00      	nop
1a002440:	4005005c 	.word	0x4005005c
1a002444:	e0fff7fe 	.word	0xe0fff7fe

1a002448 <Chip_Clock_GetBaseClockOpts>:

/* Reads CGU Base Clock clock source information */
void Chip_Clock_GetBaseClockOpts(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T *Input, bool *autoblocken,
								 bool *powerdn)
{
1a002448:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00244a:	0085      	lsls	r5, r0, #2
1a00244c:	4c0a      	ldr	r4, [pc, #40]	; (1a002478 <Chip_Clock_GetBaseClockOpts+0x30>)
1a00244e:	5964      	ldr	r4, [r4, r5]
	CHIP_CGU_CLKIN_T ClkIn = (CHIP_CGU_CLKIN_T) ((reg  >> 24) & 0x1F );
1a002450:	f3c4 6504 	ubfx	r5, r4, #24, #5

	if (BaseClock < CLK_BASE_NONE) {
1a002454:	281b      	cmp	r0, #27
1a002456:	d807      	bhi.n	1a002468 <Chip_Clock_GetBaseClockOpts+0x20>
		/* Get settings */
		*Input = ClkIn;
1a002458:	700d      	strb	r5, [r1, #0]
		*autoblocken = (reg & (1 << 11)) ? true : false;
1a00245a:	f3c4 21c0 	ubfx	r1, r4, #11, #1
1a00245e:	7011      	strb	r1, [r2, #0]
		*powerdn = (reg & (1 << 0)) ? true : false;
1a002460:	f004 0401 	and.w	r4, r4, #1
1a002464:	701c      	strb	r4, [r3, #0]
1a002466:	e004      	b.n	1a002472 <Chip_Clock_GetBaseClockOpts+0x2a>
	}
	else {
		*Input = CLKINPUT_PD;
1a002468:	2011      	movs	r0, #17
1a00246a:	7008      	strb	r0, [r1, #0]
		*powerdn = true;
1a00246c:	2101      	movs	r1, #1
1a00246e:	7019      	strb	r1, [r3, #0]
		*autoblocken = true;
1a002470:	7011      	strb	r1, [r2, #0]
	}
}
1a002472:	bc30      	pop	{r4, r5}
1a002474:	4770      	bx	lr
1a002476:	bf00      	nop
1a002478:	4005005c 	.word	0x4005005c

1a00247c <Chip_Clock_EnableBaseClock>:

/*Enables a base clock source */
void Chip_Clock_EnableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a00247c:	281b      	cmp	r0, #27
1a00247e:	d805      	bhi.n	1a00248c <Chip_Clock_EnableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] &= ~1;
1a002480:	0080      	lsls	r0, r0, #2
1a002482:	4b03      	ldr	r3, [pc, #12]	; (1a002490 <Chip_Clock_EnableBaseClock+0x14>)
1a002484:	581a      	ldr	r2, [r3, r0]
1a002486:	f022 0201 	bic.w	r2, r2, #1
1a00248a:	501a      	str	r2, [r3, r0]
1a00248c:	4770      	bx	lr
1a00248e:	bf00      	nop
1a002490:	4005005c 	.word	0x4005005c

1a002494 <Chip_Clock_DisableBaseClock>:
}

/* Disables a base clock source */
void Chip_Clock_DisableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a002494:	281b      	cmp	r0, #27
1a002496:	d805      	bhi.n	1a0024a4 <Chip_Clock_DisableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] |= 1;
1a002498:	0080      	lsls	r0, r0, #2
1a00249a:	4b03      	ldr	r3, [pc, #12]	; (1a0024a8 <Chip_Clock_DisableBaseClock+0x14>)
1a00249c:	581a      	ldr	r2, [r3, r0]
1a00249e:	f042 0201 	orr.w	r2, r2, #1
1a0024a2:	501a      	str	r2, [r3, r0]
1a0024a4:	4770      	bx	lr
1a0024a6:	bf00      	nop
1a0024a8:	4005005c 	.word	0x4005005c

1a0024ac <Chip_Clock_IsBaseClockEnabled>:
/* Returns base clock enable state */
bool Chip_Clock_IsBaseClockEnabled(CHIP_CGU_BASE_CLK_T BaseClock)
{
	bool enabled;

	if (BaseClock < CLK_BASE_NONE) {
1a0024ac:	281b      	cmp	r0, #27
1a0024ae:	d808      	bhi.n	1a0024c2 <Chip_Clock_IsBaseClockEnabled+0x16>
		enabled = (bool) ((LPC_CGU->BASE_CLK[BaseClock] & 1) == 0);
1a0024b0:	0080      	lsls	r0, r0, #2
1a0024b2:	4b05      	ldr	r3, [pc, #20]	; (1a0024c8 <Chip_Clock_IsBaseClockEnabled+0x1c>)
1a0024b4:	581b      	ldr	r3, [r3, r0]
1a0024b6:	f013 0f01 	tst.w	r3, #1
1a0024ba:	bf0c      	ite	eq
1a0024bc:	2001      	moveq	r0, #1
1a0024be:	2000      	movne	r0, #0
1a0024c0:	4770      	bx	lr
	}
	else {
		enabled = false;
1a0024c2:	2000      	movs	r0, #0
	}

	return enabled;
}
1a0024c4:	4770      	bx	lr
1a0024c6:	bf00      	nop
1a0024c8:	4005005c 	.word	0x4005005c

1a0024cc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0024cc:	281b      	cmp	r0, #27
1a0024ce:	d808      	bhi.n	1a0024e2 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0024d0:	0080      	lsls	r0, r0, #2
1a0024d2:	4b06      	ldr	r3, [pc, #24]	; (1a0024ec <Chip_Clock_GetBaseClock+0x20>)
1a0024d4:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a0024d6:	f010 0f01 	tst.w	r0, #1
1a0024da:	d104      	bne.n	1a0024e6 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0024dc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0024e0:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a0024e2:	2011      	movs	r0, #17
1a0024e4:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a0024e6:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0024e8:	4770      	bx	lr
1a0024ea:	bf00      	nop
1a0024ec:	4005005c 	.word	0x4005005c

1a0024f0 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0024f0:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0024f2:	f7ff ffeb 	bl	1a0024cc <Chip_Clock_GetBaseClock>
1a0024f6:	f7ff fdf7 	bl	1a0020e8 <Chip_Clock_GetClockInputHz>
}
1a0024fa:	bd08      	pop	{r3, pc}

1a0024fc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0024fc:	b909      	cbnz	r1, 1a002502 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0024fe:	2101      	movs	r1, #1
1a002500:	e000      	b.n	1a002504 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002502:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002504:	b10a      	cbz	r2, 1a00250a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a002506:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00250a:	2b02      	cmp	r3, #2
1a00250c:	d101      	bne.n	1a002512 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00250e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002512:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002516:	d305      	bcc.n	1a002524 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002518:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00251c:	4b04      	ldr	r3, [pc, #16]	; (1a002530 <Chip_Clock_EnableOpts+0x34>)
1a00251e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002522:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002524:	3020      	adds	r0, #32
1a002526:	4b03      	ldr	r3, [pc, #12]	; (1a002534 <Chip_Clock_EnableOpts+0x38>)
1a002528:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00252c:	4770      	bx	lr
1a00252e:	bf00      	nop
1a002530:	40052000 	.word	0x40052000
1a002534:	40051000 	.word	0x40051000

1a002538 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002538:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00253c:	d309      	bcc.n	1a002552 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00253e:	4a09      	ldr	r2, [pc, #36]	; (1a002564 <Chip_Clock_Enable+0x2c>)
1a002540:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002544:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002548:	f043 0301 	orr.w	r3, r3, #1
1a00254c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002550:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002552:	4a05      	ldr	r2, [pc, #20]	; (1a002568 <Chip_Clock_Enable+0x30>)
1a002554:	3020      	adds	r0, #32
1a002556:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00255a:	f043 0301 	orr.w	r3, r3, #1
1a00255e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002562:	4770      	bx	lr
1a002564:	40052000 	.word	0x40052000
1a002568:	40051000 	.word	0x40051000

1a00256c <Chip_Clock_RTCEnable>:
}

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a00256c:	4b04      	ldr	r3, [pc, #16]	; (1a002580 <Chip_Clock_RTCEnable+0x14>)
1a00256e:	685a      	ldr	r2, [r3, #4]
1a002570:	f022 020c 	bic.w	r2, r2, #12
1a002574:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a002576:	685a      	ldr	r2, [r3, #4]
1a002578:	f042 0203 	orr.w	r2, r2, #3
1a00257c:	605a      	str	r2, [r3, #4]
1a00257e:	4770      	bx	lr
1a002580:	40043000 	.word	0x40043000

1a002584 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a002584:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002588:	d309      	bcc.n	1a00259e <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a00258a:	4a09      	ldr	r2, [pc, #36]	; (1a0025b0 <Chip_Clock_Disable+0x2c>)
1a00258c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002590:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002594:	f023 0301 	bic.w	r3, r3, #1
1a002598:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00259c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00259e:	4a05      	ldr	r2, [pc, #20]	; (1a0025b4 <Chip_Clock_Disable+0x30>)
1a0025a0:	3020      	adds	r0, #32
1a0025a2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0025a6:	f023 0301 	bic.w	r3, r3, #1
1a0025aa:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0025ae:	4770      	bx	lr
1a0025b0:	40052000 	.word	0x40052000
1a0025b4:	40051000 	.word	0x40051000

1a0025b8 <Chip_Clock_StartPowerDown>:
 * power down sequence started
 */
void Chip_Clock_StartPowerDown(void)
{
	/* Set Power Down bit */
	LPC_CCU1->PM = 1;
1a0025b8:	2301      	movs	r3, #1
1a0025ba:	4a03      	ldr	r2, [pc, #12]	; (1a0025c8 <Chip_Clock_StartPowerDown+0x10>)
1a0025bc:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 1;
1a0025be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0025c2:	6013      	str	r3, [r2, #0]
1a0025c4:	4770      	bx	lr
1a0025c6:	bf00      	nop
1a0025c8:	40051000 	.word	0x40051000

1a0025cc <Chip_Clock_ClearPowerDown>:
 * Only the clocks with wake up mechanism enabled will be enabled
 */
void Chip_Clock_ClearPowerDown(void)
{
	/* Clear Power Down bit */
	LPC_CCU1->PM = 0;
1a0025cc:	2300      	movs	r3, #0
1a0025ce:	4a03      	ldr	r2, [pc, #12]	; (1a0025dc <Chip_Clock_ClearPowerDown+0x10>)
1a0025d0:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 0;
1a0025d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0025d6:	6013      	str	r3, [r2, #0]
1a0025d8:	4770      	bx	lr
1a0025da:	bf00      	nop
1a0025dc:	40051000 	.word	0x40051000

1a0025e0 <Chip_Clock_GetRate>:
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0025e0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0025e2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0025e6:	d305      	bcc.n	1a0025f4 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0025e8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0025ec:	4a0d      	ldr	r2, [pc, #52]	; (1a002624 <Chip_Clock_GetRate+0x44>)
1a0025ee:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0025f2:	e004      	b.n	1a0025fe <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0025f4:	f100 0320 	add.w	r3, r0, #32
1a0025f8:	4a0b      	ldr	r2, [pc, #44]	; (1a002628 <Chip_Clock_GetRate+0x48>)
1a0025fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0025fe:	f014 0f01 	tst.w	r4, #1
1a002602:	d00c      	beq.n	1a00261e <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002604:	f7ff fcd8 	bl	1a001fb8 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002608:	f7ff ff72 	bl	1a0024f0 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a00260c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002610:	d101      	bne.n	1a002616 <Chip_Clock_GetRate+0x36>
			div = 1;
1a002612:	2301      	movs	r3, #1
1a002614:	e000      	b.n	1a002618 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a002616:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a002618:	fbb0 f0f3 	udiv	r0, r0, r3
1a00261c:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a00261e:	2000      	movs	r0, #0
	}

	return rate;
}
1a002620:	bd10      	pop	{r4, pc}
1a002622:	bf00      	nop
1a002624:	40052000 	.word	0x40052000
1a002628:	40051000 	.word	0x40051000

1a00262c <Chip_Clock_GetEMCRate>:

/* Get EMC Clock Rate */
uint32_t Chip_Clock_GetEMCRate(void)

{
1a00262c:	b508      	push	{r3, lr}
	uint32_t ClkFreq;
	uint32_t EMCDiv;
	ClkFreq = Chip_Clock_GetRate(CLK_MX_EMC);
1a00262e:	2066      	movs	r0, #102	; 0x66
1a002630:	f7ff ffd6 	bl	1a0025e0 <Chip_Clock_GetRate>

	/* EMC Divider readback at pos 27
	    TODO: just checked but dont mention in UM */
	EMCDiv = (LPC_CCU1->CLKCCU[CLK_MX_EMC_DIV].CFG >> 27) & 0x07;
1a002634:	4b07      	ldr	r3, [pc, #28]	; (1a002654 <Chip_Clock_GetEMCRate+0x28>)
1a002636:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
1a00263a:	f3c3 63c2 	ubfx	r3, r3, #27, #3

	/* Check EMC Divider to get real EMC clock out */
	if ((EMCDiv == 1) && (LPC_CREG->CREG6 & (1 << 16))) {
1a00263e:	2b01      	cmp	r3, #1
1a002640:	d106      	bne.n	1a002650 <Chip_Clock_GetEMCRate+0x24>
1a002642:	4b05      	ldr	r3, [pc, #20]	; (1a002658 <Chip_Clock_GetEMCRate+0x2c>)
1a002644:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002648:	f413 3f80 	tst.w	r3, #65536	; 0x10000
1a00264c:	d000      	beq.n	1a002650 <Chip_Clock_GetEMCRate+0x24>
		ClkFreq >>= 1;
1a00264e:	0840      	lsrs	r0, r0, #1
	}
	return ClkFreq;
}
1a002650:	bd08      	pop	{r3, pc}
1a002652:	bf00      	nop
1a002654:	40051000 	.word	0x40051000
1a002658:	40043000 	.word	0x40043000

1a00265c <Chip_Clock_SetupPLL>:

/* Sets up the audio or USB PLL */
void Chip_Clock_SetupPLL(CHIP_CGU_CLKIN_T Input, CHIP_CGU_USB_AUDIO_PLL_T pllnum,
						 const CGU_USBAUDIO_PLL_SETUP_T *pPLLSetup)
{
1a00265c:	b410      	push	{r4}
	uint32_t reg = pPLLSetup->ctrl | (Input << 24);
1a00265e:	6813      	ldr	r3, [r2, #0]
1a002660:	ea43 6000 	orr.w	r0, r3, r0, lsl #24

	/* Setup from passed values */
	LPC_CGU->PLL[pllnum].PLL_CTRL = reg;
1a002664:	4b0b      	ldr	r3, [pc, #44]	; (1a002694 <Chip_Clock_SetupPLL+0x38>)
1a002666:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a00266a:	6220      	str	r0, [r4, #32]
	LPC_CGU->PLL[pllnum].PLL_MDIV = pPLLSetup->mdiv;
1a00266c:	6850      	ldr	r0, [r2, #4]
1a00266e:	1c8c      	adds	r4, r1, #2
1a002670:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a002674:	6058      	str	r0, [r3, #4]
	LPC_CGU->PLL[pllnum].PLL_NP_DIV = pPLLSetup->ndiv;
1a002676:	6890      	ldr	r0, [r2, #8]
1a002678:	6098      	str	r0, [r3, #8]

	/* Fractional divider is for audio PLL only */
	if (pllnum == CGU_AUDIO_PLL) {
1a00267a:	2901      	cmp	r1, #1
1a00267c:	d102      	bne.n	1a002684 <Chip_Clock_SetupPLL+0x28>
		LPC_CGU->PLL0AUDIO_FRAC = pPLLSetup->fract;
1a00267e:	68d0      	ldr	r0, [r2, #12]
1a002680:	4b04      	ldr	r3, [pc, #16]	; (1a002694 <Chip_Clock_SetupPLL+0x38>)
1a002682:	63d8      	str	r0, [r3, #60]	; 0x3c
	}
	audio_usb_pll_freq[pllnum] = pPLLSetup->freq;
1a002684:	6912      	ldr	r2, [r2, #16]
1a002686:	4b04      	ldr	r3, [pc, #16]	; (1a002698 <Chip_Clock_SetupPLL+0x3c>)
1a002688:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a00268c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002690:	4770      	bx	lr
1a002692:	bf00      	nop
1a002694:	40050000 	.word	0x40050000
1a002698:	10000198 	.word	0x10000198

1a00269c <Chip_Clock_EnablePLL>:

/* Enables the audio or USB PLL */
void Chip_Clock_EnablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
1a00269c:	0100      	lsls	r0, r0, #4
1a00269e:	4b03      	ldr	r3, [pc, #12]	; (1a0026ac <Chip_Clock_EnablePLL+0x10>)
1a0026a0:	581a      	ldr	r2, [r3, r0]
1a0026a2:	f022 0201 	bic.w	r2, r2, #1
1a0026a6:	501a      	str	r2, [r3, r0]
1a0026a8:	4770      	bx	lr
1a0026aa:	bf00      	nop
1a0026ac:	40050020 	.word	0x40050020

1a0026b0 <Chip_Clock_DisablePLL>:
}

/* Disables the audio or USB PLL */
void Chip_Clock_DisablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL |= 1;
1a0026b0:	0100      	lsls	r0, r0, #4
1a0026b2:	4b03      	ldr	r3, [pc, #12]	; (1a0026c0 <Chip_Clock_DisablePLL+0x10>)
1a0026b4:	581a      	ldr	r2, [r3, r0]
1a0026b6:	f042 0201 	orr.w	r2, r2, #1
1a0026ba:	501a      	str	r2, [r3, r0]
1a0026bc:	4770      	bx	lr
1a0026be:	bf00      	nop
1a0026c0:	40050020 	.word	0x40050020

1a0026c4 <Chip_Clock_GetPLLStatus>:
}

/* Returns the PLL status */
uint32_t Chip_Clock_GetPLLStatus(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	return LPC_CGU->PLL[pllnum].PLL_STAT;
1a0026c4:	0100      	lsls	r0, r0, #4
1a0026c6:	4b01      	ldr	r3, [pc, #4]	; (1a0026cc <Chip_Clock_GetPLLStatus+0x8>)
1a0026c8:	5818      	ldr	r0, [r3, r0]
}
1a0026ca:	4770      	bx	lr
1a0026cc:	4005001c 	.word	0x4005001c

1a0026d0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0026d0:	b570      	push	{r4, r5, r6, lr}
1a0026d2:	b08a      	sub	sp, #40	; 0x28
1a0026d4:	4605      	mov	r5, r0
1a0026d6:	460e      	mov	r6, r1
1a0026d8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 500;
1a0026da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a0026de:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0026e0:	2806      	cmp	r0, #6
1a0026e2:	d101      	bne.n	1a0026e8 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0026e4:	f7ff fc8c 	bl	1a002000 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0026e8:	2004      	movs	r0, #4
1a0026ea:	4629      	mov	r1, r5
1a0026ec:	2201      	movs	r2, #1
1a0026ee:	2300      	movs	r3, #0
1a0026f0:	f7ff fe88 	bl	1a002404 <Chip_Clock_SetBaseClock>
1a0026f4:	4a47      	ldr	r2, [pc, #284]	; (1a002814 <Chip_SetupCoreClock+0x144>)
1a0026f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0026f8:	f043 0301 	orr.w	r3, r3, #1
1a0026fc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0026fe:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002702:	4630      	mov	r0, r6
1a002704:	a901      	add	r1, sp, #4
1a002706:	f7ff fd4b 	bl	1a0021a0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00270a:	4b43      	ldr	r3, [pc, #268]	; (1a002818 <Chip_SetupCoreClock+0x148>)
1a00270c:	429e      	cmp	r6, r3
1a00270e:	d913      	bls.n	1a002738 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a002710:	9b01      	ldr	r3, [sp, #4]
1a002712:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002716:	d000      	beq.n	1a00271a <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002718:	e7fe      	b.n	1a002718 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00271a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00271e:	d005      	beq.n	1a00272c <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002724:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a002726:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a002728:	2601      	movs	r6, #1
1a00272a:	e007      	b.n	1a00273c <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a00272c:	9b04      	ldr	r3, [sp, #16]
1a00272e:	3301      	adds	r3, #1
1a002730:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a002732:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a002734:	2600      	movs	r6, #0
1a002736:	e001      	b.n	1a00273c <Chip_SetupCoreClock+0x6c>
1a002738:	2500      	movs	r5, #0
1a00273a:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00273c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002740:	9b01      	ldr	r3, [sp, #4]
1a002742:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002746:	9a05      	ldr	r2, [sp, #20]
1a002748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00274c:	9a03      	ldr	r2, [sp, #12]
1a00274e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002752:	9a04      	ldr	r2, [sp, #16]
1a002754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00275c:	4a2d      	ldr	r2, [pc, #180]	; (1a002814 <Chip_SetupCoreClock+0x144>)
1a00275e:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002760:	4b2c      	ldr	r3, [pc, #176]	; (1a002814 <Chip_SetupCoreClock+0x144>)
1a002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002764:	f013 0f01 	tst.w	r3, #1
1a002768:	d0fa      	beq.n	1a002760 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00276a:	2004      	movs	r0, #4
1a00276c:	2109      	movs	r1, #9
1a00276e:	2201      	movs	r2, #1
1a002770:	2300      	movs	r3, #0
1a002772:	f7ff fe47 	bl	1a002404 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002776:	b1ee      	cbz	r6, 1a0027b4 <Chip_SetupCoreClock+0xe4>
		delay = 1000;
1a002778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00277c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00277e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002780:	1e5a      	subs	r2, r3, #1
1a002782:	9209      	str	r2, [sp, #36]	; 0x24
1a002784:	2b00      	cmp	r3, #0
1a002786:	d1fa      	bne.n	1a00277e <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a002788:	9b01      	ldr	r3, [sp, #4]
1a00278a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00278e:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002790:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002794:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002798:	9a05      	ldr	r2, [sp, #20]
1a00279a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00279e:	9a03      	ldr	r2, [sp, #12]
1a0027a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0027a4:	9a04      	ldr	r2, [sp, #16]
1a0027a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0027aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0027ae:	4a19      	ldr	r2, [pc, #100]	; (1a002814 <Chip_SetupCoreClock+0x144>)
1a0027b0:	6453      	str	r3, [r2, #68]	; 0x44
1a0027b2:	e01c      	b.n	1a0027ee <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0027b4:	b1dd      	cbz	r5, 1a0027ee <Chip_SetupCoreClock+0x11e>
		delay = 1000;
1a0027b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0027ba:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0027bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0027be:	1e5a      	subs	r2, r3, #1
1a0027c0:	9209      	str	r2, [sp, #36]	; 0x24
1a0027c2:	2b00      	cmp	r3, #0
1a0027c4:	d1fa      	bne.n	1a0027bc <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0027c6:	9b04      	ldr	r3, [sp, #16]
1a0027c8:	1e59      	subs	r1, r3, #1
1a0027ca:	9104      	str	r1, [sp, #16]
1a0027cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0027d0:	9b01      	ldr	r3, [sp, #4]
1a0027d2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0027d6:	9b05      	ldr	r3, [sp, #20]
1a0027d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0027dc:	9b03      	ldr	r3, [sp, #12]
1a0027de:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0027e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0027e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0027ea:	4a0a      	ldr	r2, [pc, #40]	; (1a002814 <Chip_SetupCoreClock+0x144>)
1a0027ec:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0027ee:	b964      	cbnz	r4, 1a00280a <Chip_SetupCoreClock+0x13a>
1a0027f0:	e00e      	b.n	1a002810 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0027f2:	4a0a      	ldr	r2, [pc, #40]	; (1a00281c <Chip_SetupCoreClock+0x14c>)
1a0027f4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0027f8:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0027fc:	7859      	ldrb	r1, [r3, #1]
1a0027fe:	789a      	ldrb	r2, [r3, #2]
1a002800:	78db      	ldrb	r3, [r3, #3]
1a002802:	f7ff fdff 	bl	1a002404 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002806:	3401      	adds	r4, #1
1a002808:	e000      	b.n	1a00280c <Chip_SetupCoreClock+0x13c>
1a00280a:	2400      	movs	r4, #0
1a00280c:	2c11      	cmp	r4, #17
1a00280e:	d9f0      	bls.n	1a0027f2 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002810:	b00a      	add	sp, #40	; 0x28
1a002812:	bd70      	pop	{r4, r5, r6, pc}
1a002814:	40050000 	.word	0x40050000
1a002818:	068e7780 	.word	0x068e7780
1a00281c:	1a00334c 	.word	0x1a00334c

1a002820 <Chip_SetupXtalClocking>:

/* Setup system clocking */
void Chip_SetupXtalClocking(void)
{
1a002820:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002822:	2006      	movs	r0, #6
1a002824:	4902      	ldr	r1, [pc, #8]	; (1a002830 <Chip_SetupXtalClocking+0x10>)
1a002826:	2201      	movs	r2, #1
1a002828:	f7ff ff52 	bl	1a0026d0 <Chip_SetupCoreClock>
1a00282c:	bd08      	pop	{r3, pc}
1a00282e:	bf00      	nop
1a002830:	0c28cb00 	.word	0x0c28cb00

1a002834 <Chip_SetupIrcClocking>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SetupIrcClocking(void)
{
1a002834:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_IRC, MAX_CLOCK_FREQ, true);
1a002836:	2001      	movs	r0, #1
1a002838:	4902      	ldr	r1, [pc, #8]	; (1a002844 <Chip_SetupIrcClocking+0x10>)
1a00283a:	4602      	mov	r2, r0
1a00283c:	f7ff ff48 	bl	1a0026d0 <Chip_SetupCoreClock>
1a002840:	bd08      	pop	{r3, pc}
1a002842:	bf00      	nop
1a002844:	0c28cb00 	.word	0x0c28cb00

1a002848 <Chip_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SystemInit(void)
{
1a002848:	b508      	push	{r3, lr}
	/* Initial internal clocking */
	Chip_SetupIrcClocking();
1a00284a:	f7ff fff3 	bl	1a002834 <Chip_SetupIrcClocking>
1a00284e:	bd08      	pop	{r3, pc}

1a002850 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a002850:	4b09      	ldr	r3, [pc, #36]	; (1a002878 <Chip_TIMER_GetClockIndex+0x28>)
1a002852:	4298      	cmp	r0, r3
1a002854:	d009      	beq.n	1a00286a <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a002856:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a00285a:	4298      	cmp	r0, r3
1a00285c:	d007      	beq.n	1a00286e <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a00285e:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a002862:	4298      	cmp	r0, r3
1a002864:	d105      	bne.n	1a002872 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER1;
1a002866:	2085      	movs	r0, #133	; 0x85
1a002868:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
		clkTMR = CLK_MX_TIMER3;
1a00286a:	20a4      	movs	r0, #164	; 0xa4
1a00286c:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER2) {
		clkTMR = CLK_MX_TIMER2;
1a00286e:	20a3      	movs	r0, #163	; 0xa3
1a002870:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER1) {
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a002872:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a002874:	4770      	bx	lr
1a002876:	bf00      	nop
1a002878:	400c4000 	.word	0x400c4000

1a00287c <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a00287c:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a00287e:	f7ff ffe7 	bl	1a002850 <Chip_TIMER_GetClockIndex>
1a002882:	f7ff fe59 	bl	1a002538 <Chip_Clock_Enable>
1a002886:	bd08      	pop	{r3, pc}

1a002888 <Chip_TIMER_DeInit>:
}

/*	Shutdown a timer */
void Chip_TIMER_DeInit(LPC_TIMER_T *pTMR)
{
1a002888:	b508      	push	{r3, lr}
	Chip_Clock_Disable(Chip_TIMER_GetClockIndex(pTMR));
1a00288a:	f7ff ffe1 	bl	1a002850 <Chip_TIMER_GetClockIndex>
1a00288e:	f7ff fe79 	bl	1a002584 <Chip_Clock_Disable>
1a002892:	bd08      	pop	{r3, pc}

1a002894 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a002894:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a002896:	2300      	movs	r3, #0
1a002898:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a00289a:	2301      	movs	r3, #1
1a00289c:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a00289e:	2302      	movs	r3, #2
1a0028a0:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a0028a2:	6883      	ldr	r3, [r0, #8]
1a0028a4:	2b00      	cmp	r3, #0
1a0028a6:	d1fc      	bne.n	1a0028a2 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a0028a8:	6042      	str	r2, [r0, #4]
1a0028aa:	4770      	bx	lr

1a0028ac <Chip_TIMER_ExtMatchControlSet>:
}

/* Sets external match control (MATn.matchnum) pin control */
void Chip_TIMER_ExtMatchControlSet(LPC_TIMER_T *pTMR, int8_t initial_state,
								   TIMER_PIN_MATCH_STATE_T matchState, int8_t matchnum)
{
1a0028ac:	b470      	push	{r4, r5, r6}
	uint32_t mask, reg;

	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
1a0028ae:	2401      	movs	r4, #1
1a0028b0:	fa04 f603 	lsl.w	r6, r4, r3
1a0028b4:	1c9d      	adds	r5, r3, #2
1a0028b6:	40a5      	lsls	r5, r4
1a0028b8:	2403      	movs	r4, #3
1a0028ba:	40ac      	lsls	r4, r5
1a0028bc:	4334      	orrs	r4, r6
	reg = pTMR->EMR &= ~mask;
1a0028be:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
1a0028c0:	ea26 0404 	bic.w	r4, r6, r4
1a0028c4:	63c4      	str	r4, [r0, #60]	; 0x3c

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a0028c6:	4099      	lsls	r1, r3
1a0028c8:	430c      	orrs	r4, r1
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
1a0028ca:	40aa      	lsls	r2, r5
	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
	reg = pTMR->EMR &= ~mask;

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a0028cc:	4314      	orrs	r4, r2
1a0028ce:	63c4      	str	r4, [r0, #60]	; 0x3c
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
}
1a0028d0:	bc70      	pop	{r4, r5, r6}
1a0028d2:	4770      	bx	lr

1a0028d4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0028d4:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0028d6:	4b10      	ldr	r3, [pc, #64]	; (1a002918 <fpuInit+0x44>)
1a0028d8:	681b      	ldr	r3, [r3, #0]
1a0028da:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0028dc:	4b0f      	ldr	r3, [pc, #60]	; (1a00291c <fpuInit+0x48>)
1a0028de:	681b      	ldr	r3, [r3, #0]
1a0028e0:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0028e2:	9a02      	ldr	r2, [sp, #8]
1a0028e4:	4b0e      	ldr	r3, [pc, #56]	; (1a002920 <fpuInit+0x4c>)
1a0028e6:	429a      	cmp	r2, r3
1a0028e8:	d105      	bne.n	1a0028f6 <fpuInit+0x22>
1a0028ea:	9a01      	ldr	r2, [sp, #4]
1a0028ec:	4b0d      	ldr	r3, [pc, #52]	; (1a002924 <fpuInit+0x50>)
1a0028ee:	429a      	cmp	r2, r3
1a0028f0:	d003      	beq.n	1a0028fa <fpuInit+0x26>
1a0028f2:	2300      	movs	r3, #0
1a0028f4:	e002      	b.n	1a0028fc <fpuInit+0x28>
1a0028f6:	2300      	movs	r3, #0
1a0028f8:	e000      	b.n	1a0028fc <fpuInit+0x28>
1a0028fa:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0028fc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002900:	d008      	beq.n	1a002914 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a002902:	4a09      	ldr	r2, [pc, #36]	; (1a002928 <fpuInit+0x54>)
1a002904:	6813      	ldr	r3, [r2, #0]
1a002906:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002908:	9b03      	ldr	r3, [sp, #12]
1a00290a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00290e:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002910:	9b03      	ldr	r3, [sp, #12]
1a002912:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a002914:	b004      	add	sp, #16
1a002916:	4770      	bx	lr
1a002918:	e000ef40 	.word	0xe000ef40
1a00291c:	e000ef44 	.word	0xe000ef44
1a002920:	10110021 	.word	0x10110021
1a002924:	11000011 	.word	0x11000011
1a002928:	e000ed88 	.word	0xe000ed88

1a00292c <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a00292c:	4770      	bx	lr
1a00292e:	bf00      	nop

1a002930 <Chip_GPIO_DeInit>:
}

/* De-Initialize GPIO block */
void Chip_GPIO_DeInit(LPC_GPIO_T *pGPIO)
{
1a002930:	4770      	bx	lr
1a002932:	bf00      	nop

1a002934 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a002934:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a002936:	4a17      	ldr	r2, [pc, #92]	; (1a002994 <ResetISR+0x60>)
1a002938:	4b17      	ldr	r3, [pc, #92]	; (1a002998 <ResetISR+0x64>)
1a00293a:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00293c:	4a17      	ldr	r2, [pc, #92]	; (1a00299c <ResetISR+0x68>)
1a00293e:	3304      	adds	r3, #4
1a002940:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002942:	2300      	movs	r3, #0
1a002944:	e005      	b.n	1a002952 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a002946:	f04f 31ff 	mov.w	r1, #4294967295
1a00294a:	4a15      	ldr	r2, [pc, #84]	; (1a0029a0 <ResetISR+0x6c>)
1a00294c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002950:	3301      	adds	r3, #1
1a002952:	2b07      	cmp	r3, #7
1a002954:	d9f7      	bls.n	1a002946 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a002956:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a002958:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a00295a:	f7fe fecb 	bl	1a0016f4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a00295e:	4b11      	ldr	r3, [pc, #68]	; (1a0029a4 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002960:	e007      	b.n	1a002972 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002962:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a002966:	6818      	ldr	r0, [r3, #0]
1a002968:	6859      	ldr	r1, [r3, #4]
1a00296a:	689a      	ldr	r2, [r3, #8]
1a00296c:	f7fd fc1a 	bl	1a0001a4 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002970:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002972:	4a0d      	ldr	r2, [pc, #52]	; (1a0029a8 <ResetISR+0x74>)
1a002974:	4293      	cmp	r3, r2
1a002976:	d3f4      	bcc.n	1a002962 <ResetISR+0x2e>
1a002978:	e006      	b.n	1a002988 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a00297a:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a00297c:	f854 0b08 	ldr.w	r0, [r4], #8
1a002980:	6859      	ldr	r1, [r3, #4]
1a002982:	f7fd fc1d 	bl	1a0001c0 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002986:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a002988:	4a08      	ldr	r2, [pc, #32]	; (1a0029ac <ResetISR+0x78>)
1a00298a:	4293      	cmp	r3, r2
1a00298c:	d3f5      	bcc.n	1a00297a <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a00298e:	f7fd ff2b 	bl	1a0007e8 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a002992:	e7fe      	b.n	1a002992 <ResetISR+0x5e>
1a002994:	10df1000 	.word	0x10df1000
1a002998:	40053100 	.word	0x40053100
1a00299c:	01dff7ff 	.word	0x01dff7ff
1a0029a0:	e000e280 	.word	0xe000e280
1a0029a4:	1a000114 	.word	0x1a000114
1a0029a8:	1a000150 	.word	0x1a000150
1a0029ac:	1a000178 	.word	0x1a000178

1a0029b0 <__aeabi_ldivmod>:
1a0029b0:	b97b      	cbnz	r3, 1a0029d2 <__aeabi_ldivmod+0x22>
1a0029b2:	b972      	cbnz	r2, 1a0029d2 <__aeabi_ldivmod+0x22>
1a0029b4:	2900      	cmp	r1, #0
1a0029b6:	bfbe      	ittt	lt
1a0029b8:	2000      	movlt	r0, #0
1a0029ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a0029be:	e006      	blt.n	1a0029ce <__aeabi_ldivmod+0x1e>
1a0029c0:	bf08      	it	eq
1a0029c2:	2800      	cmpeq	r0, #0
1a0029c4:	bf1c      	itt	ne
1a0029c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a0029ca:	f04f 30ff 	movne.w	r0, #4294967295
1a0029ce:	f000 b853 	b.w	1a002a78 <__aeabi_idiv0>
1a0029d2:	b082      	sub	sp, #8
1a0029d4:	46ec      	mov	ip, sp
1a0029d6:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0029da:	f000 f81d 	bl	1a002a18 <__gnu_ldivmod_helper>
1a0029de:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0029e2:	b002      	add	sp, #8
1a0029e4:	bc0c      	pop	{r2, r3}
1a0029e6:	4770      	bx	lr

1a0029e8 <__aeabi_uldivmod>:
1a0029e8:	b953      	cbnz	r3, 1a002a00 <__aeabi_uldivmod+0x18>
1a0029ea:	b94a      	cbnz	r2, 1a002a00 <__aeabi_uldivmod+0x18>
1a0029ec:	2900      	cmp	r1, #0
1a0029ee:	bf08      	it	eq
1a0029f0:	2800      	cmpeq	r0, #0
1a0029f2:	bf1c      	itt	ne
1a0029f4:	f04f 31ff 	movne.w	r1, #4294967295
1a0029f8:	f04f 30ff 	movne.w	r0, #4294967295
1a0029fc:	f000 b83c 	b.w	1a002a78 <__aeabi_idiv0>
1a002a00:	b082      	sub	sp, #8
1a002a02:	46ec      	mov	ip, sp
1a002a04:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002a08:	f000 f81e 	bl	1a002a48 <__gnu_uldivmod_helper>
1a002a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002a10:	b002      	add	sp, #8
1a002a12:	bc0c      	pop	{r2, r3}
1a002a14:	4770      	bx	lr
1a002a16:	bf00      	nop

1a002a18 <__gnu_ldivmod_helper>:
1a002a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002a1c:	9c06      	ldr	r4, [sp, #24]
1a002a1e:	4615      	mov	r5, r2
1a002a20:	4606      	mov	r6, r0
1a002a22:	460f      	mov	r7, r1
1a002a24:	4698      	mov	r8, r3
1a002a26:	f000 f829 	bl	1a002a7c <__divdi3>
1a002a2a:	fb05 f301 	mul.w	r3, r5, r1
1a002a2e:	fb00 3808 	mla	r8, r0, r8, r3
1a002a32:	fba5 2300 	umull	r2, r3, r5, r0
1a002a36:	1ab2      	subs	r2, r6, r2
1a002a38:	4443      	add	r3, r8
1a002a3a:	eb67 0303 	sbc.w	r3, r7, r3
1a002a3e:	e9c4 2300 	strd	r2, r3, [r4]
1a002a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002a46:	bf00      	nop

1a002a48 <__gnu_uldivmod_helper>:
1a002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002a4c:	9c06      	ldr	r4, [sp, #24]
1a002a4e:	4690      	mov	r8, r2
1a002a50:	4606      	mov	r6, r0
1a002a52:	460f      	mov	r7, r1
1a002a54:	461d      	mov	r5, r3
1a002a56:	f000 f95f 	bl	1a002d18 <__udivdi3>
1a002a5a:	fb00 f505 	mul.w	r5, r0, r5
1a002a5e:	fba0 2308 	umull	r2, r3, r0, r8
1a002a62:	fb08 5501 	mla	r5, r8, r1, r5
1a002a66:	1ab2      	subs	r2, r6, r2
1a002a68:	442b      	add	r3, r5
1a002a6a:	eb67 0303 	sbc.w	r3, r7, r3
1a002a6e:	e9c4 2300 	strd	r2, r3, [r4]
1a002a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002a76:	bf00      	nop

1a002a78 <__aeabi_idiv0>:
1a002a78:	4770      	bx	lr
1a002a7a:	bf00      	nop

1a002a7c <__divdi3>:
1a002a7c:	2900      	cmp	r1, #0
1a002a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002a82:	f2c0 80a6 	blt.w	1a002bd2 <__divdi3+0x156>
1a002a86:	2600      	movs	r6, #0
1a002a88:	2b00      	cmp	r3, #0
1a002a8a:	f2c0 809c 	blt.w	1a002bc6 <__divdi3+0x14a>
1a002a8e:	4688      	mov	r8, r1
1a002a90:	4694      	mov	ip, r2
1a002a92:	469e      	mov	lr, r3
1a002a94:	4615      	mov	r5, r2
1a002a96:	4604      	mov	r4, r0
1a002a98:	460f      	mov	r7, r1
1a002a9a:	2b00      	cmp	r3, #0
1a002a9c:	d13d      	bne.n	1a002b1a <__divdi3+0x9e>
1a002a9e:	428a      	cmp	r2, r1
1a002aa0:	d959      	bls.n	1a002b56 <__divdi3+0xda>
1a002aa2:	fab2 f382 	clz	r3, r2
1a002aa6:	b13b      	cbz	r3, 1a002ab8 <__divdi3+0x3c>
1a002aa8:	f1c3 0220 	rsb	r2, r3, #32
1a002aac:	409f      	lsls	r7, r3
1a002aae:	fa20 f202 	lsr.w	r2, r0, r2
1a002ab2:	409d      	lsls	r5, r3
1a002ab4:	4317      	orrs	r7, r2
1a002ab6:	409c      	lsls	r4, r3
1a002ab8:	0c29      	lsrs	r1, r5, #16
1a002aba:	0c22      	lsrs	r2, r4, #16
1a002abc:	fbb7 fef1 	udiv	lr, r7, r1
1a002ac0:	b2a8      	uxth	r0, r5
1a002ac2:	fb01 771e 	mls	r7, r1, lr, r7
1a002ac6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a002aca:	fb00 f30e 	mul.w	r3, r0, lr
1a002ace:	42bb      	cmp	r3, r7
1a002ad0:	d90a      	bls.n	1a002ae8 <__divdi3+0x6c>
1a002ad2:	197f      	adds	r7, r7, r5
1a002ad4:	f10e 32ff 	add.w	r2, lr, #4294967295
1a002ad8:	f080 8105 	bcs.w	1a002ce6 <__divdi3+0x26a>
1a002adc:	42bb      	cmp	r3, r7
1a002ade:	f240 8102 	bls.w	1a002ce6 <__divdi3+0x26a>
1a002ae2:	f1ae 0e02 	sub.w	lr, lr, #2
1a002ae6:	442f      	add	r7, r5
1a002ae8:	1aff      	subs	r7, r7, r3
1a002aea:	b2a4      	uxth	r4, r4
1a002aec:	fbb7 f3f1 	udiv	r3, r7, r1
1a002af0:	fb01 7713 	mls	r7, r1, r3, r7
1a002af4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002af8:	fb00 f003 	mul.w	r0, r0, r3
1a002afc:	42b8      	cmp	r0, r7
1a002afe:	d908      	bls.n	1a002b12 <__divdi3+0x96>
1a002b00:	197f      	adds	r7, r7, r5
1a002b02:	f103 32ff 	add.w	r2, r3, #4294967295
1a002b06:	f080 80f0 	bcs.w	1a002cea <__divdi3+0x26e>
1a002b0a:	42b8      	cmp	r0, r7
1a002b0c:	f240 80ed 	bls.w	1a002cea <__divdi3+0x26e>
1a002b10:	3b02      	subs	r3, #2
1a002b12:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a002b16:	2200      	movs	r2, #0
1a002b18:	e003      	b.n	1a002b22 <__divdi3+0xa6>
1a002b1a:	428b      	cmp	r3, r1
1a002b1c:	d90f      	bls.n	1a002b3e <__divdi3+0xc2>
1a002b1e:	2200      	movs	r2, #0
1a002b20:	4613      	mov	r3, r2
1a002b22:	1c34      	adds	r4, r6, #0
1a002b24:	bf18      	it	ne
1a002b26:	2401      	movne	r4, #1
1a002b28:	4260      	negs	r0, r4
1a002b2a:	f04f 0500 	mov.w	r5, #0
1a002b2e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a002b32:	4058      	eors	r0, r3
1a002b34:	4051      	eors	r1, r2
1a002b36:	1900      	adds	r0, r0, r4
1a002b38:	4169      	adcs	r1, r5
1a002b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002b3e:	fab3 f283 	clz	r2, r3
1a002b42:	2a00      	cmp	r2, #0
1a002b44:	f040 8086 	bne.w	1a002c54 <__divdi3+0x1d8>
1a002b48:	428b      	cmp	r3, r1
1a002b4a:	d302      	bcc.n	1a002b52 <__divdi3+0xd6>
1a002b4c:	4584      	cmp	ip, r0
1a002b4e:	f200 80db 	bhi.w	1a002d08 <__divdi3+0x28c>
1a002b52:	2301      	movs	r3, #1
1a002b54:	e7e5      	b.n	1a002b22 <__divdi3+0xa6>
1a002b56:	b912      	cbnz	r2, 1a002b5e <__divdi3+0xe2>
1a002b58:	2301      	movs	r3, #1
1a002b5a:	fbb3 f5f2 	udiv	r5, r3, r2
1a002b5e:	fab5 f085 	clz	r0, r5
1a002b62:	2800      	cmp	r0, #0
1a002b64:	d13b      	bne.n	1a002bde <__divdi3+0x162>
1a002b66:	1b78      	subs	r0, r7, r5
1a002b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b6c:	fa1f fc85 	uxth.w	ip, r5
1a002b70:	2201      	movs	r2, #1
1a002b72:	fbb0 f8fe 	udiv	r8, r0, lr
1a002b76:	0c21      	lsrs	r1, r4, #16
1a002b78:	fb0e 0718 	mls	r7, lr, r8, r0
1a002b7c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a002b80:	fb0c f308 	mul.w	r3, ip, r8
1a002b84:	42bb      	cmp	r3, r7
1a002b86:	d907      	bls.n	1a002b98 <__divdi3+0x11c>
1a002b88:	197f      	adds	r7, r7, r5
1a002b8a:	f108 31ff 	add.w	r1, r8, #4294967295
1a002b8e:	d202      	bcs.n	1a002b96 <__divdi3+0x11a>
1a002b90:	42bb      	cmp	r3, r7
1a002b92:	f200 80bd 	bhi.w	1a002d10 <__divdi3+0x294>
1a002b96:	4688      	mov	r8, r1
1a002b98:	1aff      	subs	r7, r7, r3
1a002b9a:	b2a4      	uxth	r4, r4
1a002b9c:	fbb7 f3fe 	udiv	r3, r7, lr
1a002ba0:	fb0e 7713 	mls	r7, lr, r3, r7
1a002ba4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002ba8:	fb0c fc03 	mul.w	ip, ip, r3
1a002bac:	45bc      	cmp	ip, r7
1a002bae:	d907      	bls.n	1a002bc0 <__divdi3+0x144>
1a002bb0:	197f      	adds	r7, r7, r5
1a002bb2:	f103 31ff 	add.w	r1, r3, #4294967295
1a002bb6:	d202      	bcs.n	1a002bbe <__divdi3+0x142>
1a002bb8:	45bc      	cmp	ip, r7
1a002bba:	f200 80a7 	bhi.w	1a002d0c <__divdi3+0x290>
1a002bbe:	460b      	mov	r3, r1
1a002bc0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002bc4:	e7ad      	b.n	1a002b22 <__divdi3+0xa6>
1a002bc6:	4252      	negs	r2, r2
1a002bc8:	ea6f 0606 	mvn.w	r6, r6
1a002bcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002bd0:	e75d      	b.n	1a002a8e <__divdi3+0x12>
1a002bd2:	4240      	negs	r0, r0
1a002bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002bd8:	f04f 36ff 	mov.w	r6, #4294967295
1a002bdc:	e754      	b.n	1a002a88 <__divdi3+0xc>
1a002bde:	f1c0 0220 	rsb	r2, r0, #32
1a002be2:	fa24 f102 	lsr.w	r1, r4, r2
1a002be6:	fa07 f300 	lsl.w	r3, r7, r0
1a002bea:	4085      	lsls	r5, r0
1a002bec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002bf0:	40d7      	lsrs	r7, r2
1a002bf2:	4319      	orrs	r1, r3
1a002bf4:	fbb7 f2fe 	udiv	r2, r7, lr
1a002bf8:	0c0b      	lsrs	r3, r1, #16
1a002bfa:	fb0e 7712 	mls	r7, lr, r2, r7
1a002bfe:	fa1f fc85 	uxth.w	ip, r5
1a002c02:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a002c06:	fb0c f702 	mul.w	r7, ip, r2
1a002c0a:	429f      	cmp	r7, r3
1a002c0c:	fa04 f400 	lsl.w	r4, r4, r0
1a002c10:	d907      	bls.n	1a002c22 <__divdi3+0x1a6>
1a002c12:	195b      	adds	r3, r3, r5
1a002c14:	f102 30ff 	add.w	r0, r2, #4294967295
1a002c18:	d274      	bcs.n	1a002d04 <__divdi3+0x288>
1a002c1a:	429f      	cmp	r7, r3
1a002c1c:	d972      	bls.n	1a002d04 <__divdi3+0x288>
1a002c1e:	3a02      	subs	r2, #2
1a002c20:	442b      	add	r3, r5
1a002c22:	1bdf      	subs	r7, r3, r7
1a002c24:	b289      	uxth	r1, r1
1a002c26:	fbb7 f8fe 	udiv	r8, r7, lr
1a002c2a:	fb0e 7318 	mls	r3, lr, r8, r7
1a002c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002c32:	fb0c f708 	mul.w	r7, ip, r8
1a002c36:	429f      	cmp	r7, r3
1a002c38:	d908      	bls.n	1a002c4c <__divdi3+0x1d0>
1a002c3a:	195b      	adds	r3, r3, r5
1a002c3c:	f108 31ff 	add.w	r1, r8, #4294967295
1a002c40:	d25c      	bcs.n	1a002cfc <__divdi3+0x280>
1a002c42:	429f      	cmp	r7, r3
1a002c44:	d95a      	bls.n	1a002cfc <__divdi3+0x280>
1a002c46:	f1a8 0802 	sub.w	r8, r8, #2
1a002c4a:	442b      	add	r3, r5
1a002c4c:	1bd8      	subs	r0, r3, r7
1a002c4e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a002c52:	e78e      	b.n	1a002b72 <__divdi3+0xf6>
1a002c54:	f1c2 0320 	rsb	r3, r2, #32
1a002c58:	fa2c f103 	lsr.w	r1, ip, r3
1a002c5c:	fa0e fe02 	lsl.w	lr, lr, r2
1a002c60:	fa20 f703 	lsr.w	r7, r0, r3
1a002c64:	ea41 0e0e 	orr.w	lr, r1, lr
1a002c68:	fa08 f002 	lsl.w	r0, r8, r2
1a002c6c:	fa28 f103 	lsr.w	r1, r8, r3
1a002c70:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002c74:	4338      	orrs	r0, r7
1a002c76:	fbb1 f8f5 	udiv	r8, r1, r5
1a002c7a:	0c03      	lsrs	r3, r0, #16
1a002c7c:	fb05 1118 	mls	r1, r5, r8, r1
1a002c80:	fa1f f78e 	uxth.w	r7, lr
1a002c84:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002c88:	fb07 f308 	mul.w	r3, r7, r8
1a002c8c:	428b      	cmp	r3, r1
1a002c8e:	fa0c fc02 	lsl.w	ip, ip, r2
1a002c92:	d909      	bls.n	1a002ca8 <__divdi3+0x22c>
1a002c94:	eb11 010e 	adds.w	r1, r1, lr
1a002c98:	f108 39ff 	add.w	r9, r8, #4294967295
1a002c9c:	d230      	bcs.n	1a002d00 <__divdi3+0x284>
1a002c9e:	428b      	cmp	r3, r1
1a002ca0:	d92e      	bls.n	1a002d00 <__divdi3+0x284>
1a002ca2:	f1a8 0802 	sub.w	r8, r8, #2
1a002ca6:	4471      	add	r1, lr
1a002ca8:	1ac9      	subs	r1, r1, r3
1a002caa:	b280      	uxth	r0, r0
1a002cac:	fbb1 f3f5 	udiv	r3, r1, r5
1a002cb0:	fb05 1113 	mls	r1, r5, r3, r1
1a002cb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002cb8:	fb07 f703 	mul.w	r7, r7, r3
1a002cbc:	428f      	cmp	r7, r1
1a002cbe:	d908      	bls.n	1a002cd2 <__divdi3+0x256>
1a002cc0:	eb11 010e 	adds.w	r1, r1, lr
1a002cc4:	f103 30ff 	add.w	r0, r3, #4294967295
1a002cc8:	d216      	bcs.n	1a002cf8 <__divdi3+0x27c>
1a002cca:	428f      	cmp	r7, r1
1a002ccc:	d914      	bls.n	1a002cf8 <__divdi3+0x27c>
1a002cce:	3b02      	subs	r3, #2
1a002cd0:	4471      	add	r1, lr
1a002cd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002cd6:	1bc9      	subs	r1, r1, r7
1a002cd8:	fba3 890c 	umull	r8, r9, r3, ip
1a002cdc:	4549      	cmp	r1, r9
1a002cde:	d309      	bcc.n	1a002cf4 <__divdi3+0x278>
1a002ce0:	d005      	beq.n	1a002cee <__divdi3+0x272>
1a002ce2:	2200      	movs	r2, #0
1a002ce4:	e71d      	b.n	1a002b22 <__divdi3+0xa6>
1a002ce6:	4696      	mov	lr, r2
1a002ce8:	e6fe      	b.n	1a002ae8 <__divdi3+0x6c>
1a002cea:	4613      	mov	r3, r2
1a002cec:	e711      	b.n	1a002b12 <__divdi3+0x96>
1a002cee:	4094      	lsls	r4, r2
1a002cf0:	4544      	cmp	r4, r8
1a002cf2:	d2f6      	bcs.n	1a002ce2 <__divdi3+0x266>
1a002cf4:	3b01      	subs	r3, #1
1a002cf6:	e7f4      	b.n	1a002ce2 <__divdi3+0x266>
1a002cf8:	4603      	mov	r3, r0
1a002cfa:	e7ea      	b.n	1a002cd2 <__divdi3+0x256>
1a002cfc:	4688      	mov	r8, r1
1a002cfe:	e7a5      	b.n	1a002c4c <__divdi3+0x1d0>
1a002d00:	46c8      	mov	r8, r9
1a002d02:	e7d1      	b.n	1a002ca8 <__divdi3+0x22c>
1a002d04:	4602      	mov	r2, r0
1a002d06:	e78c      	b.n	1a002c22 <__divdi3+0x1a6>
1a002d08:	4613      	mov	r3, r2
1a002d0a:	e70a      	b.n	1a002b22 <__divdi3+0xa6>
1a002d0c:	3b02      	subs	r3, #2
1a002d0e:	e757      	b.n	1a002bc0 <__divdi3+0x144>
1a002d10:	f1a8 0802 	sub.w	r8, r8, #2
1a002d14:	442f      	add	r7, r5
1a002d16:	e73f      	b.n	1a002b98 <__divdi3+0x11c>

1a002d18 <__udivdi3>:
1a002d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002d1c:	2b00      	cmp	r3, #0
1a002d1e:	d144      	bne.n	1a002daa <__udivdi3+0x92>
1a002d20:	428a      	cmp	r2, r1
1a002d22:	4615      	mov	r5, r2
1a002d24:	4604      	mov	r4, r0
1a002d26:	d94f      	bls.n	1a002dc8 <__udivdi3+0xb0>
1a002d28:	fab2 f782 	clz	r7, r2
1a002d2c:	460e      	mov	r6, r1
1a002d2e:	b14f      	cbz	r7, 1a002d44 <__udivdi3+0x2c>
1a002d30:	f1c7 0320 	rsb	r3, r7, #32
1a002d34:	40b9      	lsls	r1, r7
1a002d36:	fa20 f603 	lsr.w	r6, r0, r3
1a002d3a:	fa02 f507 	lsl.w	r5, r2, r7
1a002d3e:	430e      	orrs	r6, r1
1a002d40:	fa00 f407 	lsl.w	r4, r0, r7
1a002d44:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002d48:	0c23      	lsrs	r3, r4, #16
1a002d4a:	fbb6 f0fe 	udiv	r0, r6, lr
1a002d4e:	b2af      	uxth	r7, r5
1a002d50:	fb0e 6110 	mls	r1, lr, r0, r6
1a002d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002d58:	fb07 f100 	mul.w	r1, r7, r0
1a002d5c:	4299      	cmp	r1, r3
1a002d5e:	d909      	bls.n	1a002d74 <__udivdi3+0x5c>
1a002d60:	195b      	adds	r3, r3, r5
1a002d62:	f100 32ff 	add.w	r2, r0, #4294967295
1a002d66:	f080 80ec 	bcs.w	1a002f42 <__udivdi3+0x22a>
1a002d6a:	4299      	cmp	r1, r3
1a002d6c:	f240 80e9 	bls.w	1a002f42 <__udivdi3+0x22a>
1a002d70:	3802      	subs	r0, #2
1a002d72:	442b      	add	r3, r5
1a002d74:	1a5a      	subs	r2, r3, r1
1a002d76:	b2a4      	uxth	r4, r4
1a002d78:	fbb2 f3fe 	udiv	r3, r2, lr
1a002d7c:	fb0e 2213 	mls	r2, lr, r3, r2
1a002d80:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002d84:	fb07 f703 	mul.w	r7, r7, r3
1a002d88:	4297      	cmp	r7, r2
1a002d8a:	d908      	bls.n	1a002d9e <__udivdi3+0x86>
1a002d8c:	1952      	adds	r2, r2, r5
1a002d8e:	f103 31ff 	add.w	r1, r3, #4294967295
1a002d92:	f080 80d8 	bcs.w	1a002f46 <__udivdi3+0x22e>
1a002d96:	4297      	cmp	r7, r2
1a002d98:	f240 80d5 	bls.w	1a002f46 <__udivdi3+0x22e>
1a002d9c:	3b02      	subs	r3, #2
1a002d9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002da2:	2600      	movs	r6, #0
1a002da4:	4631      	mov	r1, r6
1a002da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002daa:	428b      	cmp	r3, r1
1a002dac:	d847      	bhi.n	1a002e3e <__udivdi3+0x126>
1a002dae:	fab3 f683 	clz	r6, r3
1a002db2:	2e00      	cmp	r6, #0
1a002db4:	d148      	bne.n	1a002e48 <__udivdi3+0x130>
1a002db6:	428b      	cmp	r3, r1
1a002db8:	d302      	bcc.n	1a002dc0 <__udivdi3+0xa8>
1a002dba:	4282      	cmp	r2, r0
1a002dbc:	f200 80cd 	bhi.w	1a002f5a <__udivdi3+0x242>
1a002dc0:	2001      	movs	r0, #1
1a002dc2:	4631      	mov	r1, r6
1a002dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002dc8:	b912      	cbnz	r2, 1a002dd0 <__udivdi3+0xb8>
1a002dca:	2501      	movs	r5, #1
1a002dcc:	fbb5 f5f2 	udiv	r5, r5, r2
1a002dd0:	fab5 f885 	clz	r8, r5
1a002dd4:	f1b8 0f00 	cmp.w	r8, #0
1a002dd8:	d177      	bne.n	1a002eca <__udivdi3+0x1b2>
1a002dda:	1b4a      	subs	r2, r1, r5
1a002ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002de0:	b2af      	uxth	r7, r5
1a002de2:	2601      	movs	r6, #1
1a002de4:	fbb2 f0fe 	udiv	r0, r2, lr
1a002de8:	0c23      	lsrs	r3, r4, #16
1a002dea:	fb0e 2110 	mls	r1, lr, r0, r2
1a002dee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002df2:	fb07 f300 	mul.w	r3, r7, r0
1a002df6:	428b      	cmp	r3, r1
1a002df8:	d907      	bls.n	1a002e0a <__udivdi3+0xf2>
1a002dfa:	1949      	adds	r1, r1, r5
1a002dfc:	f100 32ff 	add.w	r2, r0, #4294967295
1a002e00:	d202      	bcs.n	1a002e08 <__udivdi3+0xf0>
1a002e02:	428b      	cmp	r3, r1
1a002e04:	f200 80ba 	bhi.w	1a002f7c <__udivdi3+0x264>
1a002e08:	4610      	mov	r0, r2
1a002e0a:	1ac9      	subs	r1, r1, r3
1a002e0c:	b2a4      	uxth	r4, r4
1a002e0e:	fbb1 f3fe 	udiv	r3, r1, lr
1a002e12:	fb0e 1113 	mls	r1, lr, r3, r1
1a002e16:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a002e1a:	fb07 f703 	mul.w	r7, r7, r3
1a002e1e:	42a7      	cmp	r7, r4
1a002e20:	d908      	bls.n	1a002e34 <__udivdi3+0x11c>
1a002e22:	1964      	adds	r4, r4, r5
1a002e24:	f103 32ff 	add.w	r2, r3, #4294967295
1a002e28:	f080 808f 	bcs.w	1a002f4a <__udivdi3+0x232>
1a002e2c:	42a7      	cmp	r7, r4
1a002e2e:	f240 808c 	bls.w	1a002f4a <__udivdi3+0x232>
1a002e32:	3b02      	subs	r3, #2
1a002e34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002e38:	4631      	mov	r1, r6
1a002e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e3e:	2600      	movs	r6, #0
1a002e40:	4630      	mov	r0, r6
1a002e42:	4631      	mov	r1, r6
1a002e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e48:	f1c6 0420 	rsb	r4, r6, #32
1a002e4c:	fa22 f504 	lsr.w	r5, r2, r4
1a002e50:	40b3      	lsls	r3, r6
1a002e52:	432b      	orrs	r3, r5
1a002e54:	fa20 fc04 	lsr.w	ip, r0, r4
1a002e58:	fa01 f706 	lsl.w	r7, r1, r6
1a002e5c:	fa21 f504 	lsr.w	r5, r1, r4
1a002e60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002e64:	ea4c 0707 	orr.w	r7, ip, r7
1a002e68:	fbb5 f8fe 	udiv	r8, r5, lr
1a002e6c:	0c39      	lsrs	r1, r7, #16
1a002e6e:	fb0e 5518 	mls	r5, lr, r8, r5
1a002e72:	fa1f fc83 	uxth.w	ip, r3
1a002e76:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002e7a:	fb0c f108 	mul.w	r1, ip, r8
1a002e7e:	42a9      	cmp	r1, r5
1a002e80:	fa02 f206 	lsl.w	r2, r2, r6
1a002e84:	d904      	bls.n	1a002e90 <__udivdi3+0x178>
1a002e86:	18ed      	adds	r5, r5, r3
1a002e88:	f108 34ff 	add.w	r4, r8, #4294967295
1a002e8c:	d367      	bcc.n	1a002f5e <__udivdi3+0x246>
1a002e8e:	46a0      	mov	r8, r4
1a002e90:	1a6d      	subs	r5, r5, r1
1a002e92:	b2bf      	uxth	r7, r7
1a002e94:	fbb5 f4fe 	udiv	r4, r5, lr
1a002e98:	fb0e 5514 	mls	r5, lr, r4, r5
1a002e9c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a002ea0:	fb0c fc04 	mul.w	ip, ip, r4
1a002ea4:	458c      	cmp	ip, r1
1a002ea6:	d904      	bls.n	1a002eb2 <__udivdi3+0x19a>
1a002ea8:	18c9      	adds	r1, r1, r3
1a002eaa:	f104 35ff 	add.w	r5, r4, #4294967295
1a002eae:	d35c      	bcc.n	1a002f6a <__udivdi3+0x252>
1a002eb0:	462c      	mov	r4, r5
1a002eb2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a002eb6:	ebcc 0101 	rsb	r1, ip, r1
1a002eba:	fba4 2302 	umull	r2, r3, r4, r2
1a002ebe:	4299      	cmp	r1, r3
1a002ec0:	d348      	bcc.n	1a002f54 <__udivdi3+0x23c>
1a002ec2:	d044      	beq.n	1a002f4e <__udivdi3+0x236>
1a002ec4:	4620      	mov	r0, r4
1a002ec6:	2600      	movs	r6, #0
1a002ec8:	e76c      	b.n	1a002da4 <__udivdi3+0x8c>
1a002eca:	f1c8 0420 	rsb	r4, r8, #32
1a002ece:	fa01 f308 	lsl.w	r3, r1, r8
1a002ed2:	fa05 f508 	lsl.w	r5, r5, r8
1a002ed6:	fa20 f704 	lsr.w	r7, r0, r4
1a002eda:	40e1      	lsrs	r1, r4
1a002edc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ee0:	431f      	orrs	r7, r3
1a002ee2:	fbb1 f6fe 	udiv	r6, r1, lr
1a002ee6:	0c3a      	lsrs	r2, r7, #16
1a002ee8:	fb0e 1116 	mls	r1, lr, r6, r1
1a002eec:	fa1f fc85 	uxth.w	ip, r5
1a002ef0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a002ef4:	fb0c f206 	mul.w	r2, ip, r6
1a002ef8:	429a      	cmp	r2, r3
1a002efa:	fa00 f408 	lsl.w	r4, r0, r8
1a002efe:	d907      	bls.n	1a002f10 <__udivdi3+0x1f8>
1a002f00:	195b      	adds	r3, r3, r5
1a002f02:	f106 31ff 	add.w	r1, r6, #4294967295
1a002f06:	d237      	bcs.n	1a002f78 <__udivdi3+0x260>
1a002f08:	429a      	cmp	r2, r3
1a002f0a:	d935      	bls.n	1a002f78 <__udivdi3+0x260>
1a002f0c:	3e02      	subs	r6, #2
1a002f0e:	442b      	add	r3, r5
1a002f10:	1a9b      	subs	r3, r3, r2
1a002f12:	b2bf      	uxth	r7, r7
1a002f14:	fbb3 f0fe 	udiv	r0, r3, lr
1a002f18:	fb0e 3310 	mls	r3, lr, r0, r3
1a002f1c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a002f20:	fb0c f100 	mul.w	r1, ip, r0
1a002f24:	4299      	cmp	r1, r3
1a002f26:	d907      	bls.n	1a002f38 <__udivdi3+0x220>
1a002f28:	195b      	adds	r3, r3, r5
1a002f2a:	f100 32ff 	add.w	r2, r0, #4294967295
1a002f2e:	d221      	bcs.n	1a002f74 <__udivdi3+0x25c>
1a002f30:	4299      	cmp	r1, r3
1a002f32:	d91f      	bls.n	1a002f74 <__udivdi3+0x25c>
1a002f34:	3802      	subs	r0, #2
1a002f36:	442b      	add	r3, r5
1a002f38:	1a5a      	subs	r2, r3, r1
1a002f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a002f3e:	4667      	mov	r7, ip
1a002f40:	e750      	b.n	1a002de4 <__udivdi3+0xcc>
1a002f42:	4610      	mov	r0, r2
1a002f44:	e716      	b.n	1a002d74 <__udivdi3+0x5c>
1a002f46:	460b      	mov	r3, r1
1a002f48:	e729      	b.n	1a002d9e <__udivdi3+0x86>
1a002f4a:	4613      	mov	r3, r2
1a002f4c:	e772      	b.n	1a002e34 <__udivdi3+0x11c>
1a002f4e:	40b0      	lsls	r0, r6
1a002f50:	4290      	cmp	r0, r2
1a002f52:	d2b7      	bcs.n	1a002ec4 <__udivdi3+0x1ac>
1a002f54:	1e60      	subs	r0, r4, #1
1a002f56:	2600      	movs	r6, #0
1a002f58:	e724      	b.n	1a002da4 <__udivdi3+0x8c>
1a002f5a:	4630      	mov	r0, r6
1a002f5c:	e722      	b.n	1a002da4 <__udivdi3+0x8c>
1a002f5e:	42a9      	cmp	r1, r5
1a002f60:	d995      	bls.n	1a002e8e <__udivdi3+0x176>
1a002f62:	f1a8 0802 	sub.w	r8, r8, #2
1a002f66:	441d      	add	r5, r3
1a002f68:	e792      	b.n	1a002e90 <__udivdi3+0x178>
1a002f6a:	458c      	cmp	ip, r1
1a002f6c:	d9a0      	bls.n	1a002eb0 <__udivdi3+0x198>
1a002f6e:	3c02      	subs	r4, #2
1a002f70:	4419      	add	r1, r3
1a002f72:	e79e      	b.n	1a002eb2 <__udivdi3+0x19a>
1a002f74:	4610      	mov	r0, r2
1a002f76:	e7df      	b.n	1a002f38 <__udivdi3+0x220>
1a002f78:	460e      	mov	r6, r1
1a002f7a:	e7c9      	b.n	1a002f10 <__udivdi3+0x1f8>
1a002f7c:	3802      	subs	r0, #2
1a002f7e:	4429      	add	r1, r5
1a002f80:	e743      	b.n	1a002e0a <__udivdi3+0xf2>
1a002f82:	bf00      	nop

1a002f84 <memcpy>:
1a002f84:	b510      	push	{r4, lr}
1a002f86:	1e43      	subs	r3, r0, #1
1a002f88:	440a      	add	r2, r1
1a002f8a:	4291      	cmp	r1, r2
1a002f8c:	d004      	beq.n	1a002f98 <memcpy+0x14>
1a002f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
1a002f92:	f803 4f01 	strb.w	r4, [r3, #1]!
1a002f96:	e7f8      	b.n	1a002f8a <memcpy+0x6>
1a002f98:	bd10      	pop	{r4, pc}

1a002f9a <memset>:
1a002f9a:	4402      	add	r2, r0
1a002f9c:	4603      	mov	r3, r0
1a002f9e:	4293      	cmp	r3, r2
1a002fa0:	d002      	beq.n	1a002fa8 <memset+0xe>
1a002fa2:	f803 1b01 	strb.w	r1, [r3], #1
1a002fa6:	e7fa      	b.n	1a002f9e <memset+0x4>
1a002fa8:	4770      	bx	lr
1a002faa:	0000      	movs	r0, r0
1a002fac:	69726550 	.word	0x69726550
1a002fb0:	206f646f 	.word	0x206f646f
1a002fb4:	75746361 	.word	0x75746361
1a002fb8:	7a696c61 	.word	0x7a696c61
1a002fbc:	0a6f6461 	.word	0x0a6f6461
1a002fc0:	0000000d 	.word	0x0000000d
1a002fc4:	4f525245 	.word	0x4f525245
1a002fc8:	65203a52 	.word	0x65203a52
1a002fcc:	6564206c 	.word	0x6564206c
1a002fd0:	2079616c 	.word	0x2079616c
1a002fd4:	65707365 	.word	0x65707365
1a002fd8:	69666963 	.word	0x69666963
1a002fdc:	6f646163 	.word	0x6f646163
1a002fe0:	206f6e20 	.word	0x206f6e20
1a002fe4:	75207365 	.word	0x75207365
1a002fe8:	756e206e 	.word	0x756e206e
1a002fec:	6f72656d 	.word	0x6f72656d
1a002ff0:	000d0a20 	.word	0x000d0a20
1a002ff4:	4f525245 	.word	0x4f525245
1a002ff8:	54203a52 	.word	0x54203a52
1a002ffc:	706d6569 	.word	0x706d6569
1a003000:	616d206f 	.word	0x616d206f
1a003004:	6f6d6978 	.word	0x6f6d6978
1a003008:	30303120 	.word	0x30303120
1a00300c:	20736d30 	.word	0x20736d30
1a003010:	00000d0a 	.word	0x00000d0a
1a003014:	2064654c 	.word	0x2064654c
1a003018:	69746361 	.word	0x69746361
1a00301c:	61206f76 	.word	0x61206f76
1a003020:	61757463 	.word	0x61757463
1a003024:	617a696c 	.word	0x617a696c
1a003028:	0d0a6f64 	.word	0x0d0a6f64
1a00302c:	00000000 	.word	0x00000000
1a003030:	616d6f43 	.word	0x616d6f43
1a003034:	206f646e 	.word	0x206f646e
1a003038:	72206f6e 	.word	0x72206f6e
1a00303c:	6e6f6365 	.word	0x6e6f6365
1a003040:	6469636f 	.word	0x6469636f
1a003044:	000d0a6f 	.word	0x000d0a6f
1a003048:	54524155 	.word	0x54524155
1a00304c:	4253555f 	.word	0x4253555f
1a003050:	6e6f6320 	.word	0x6e6f6320
1a003054:	75676966 	.word	0x75676966
1a003058:	61646172 	.word	0x61646172
1a00305c:	000d0a2e 	.word	0x000d0a2e

1a003060 <timer_sd>:
1a003060:	40084000 00000020 0000000c 40085000     .@.@ ........P.@
1a003070:	00000021 0000000d 400c3000 00000022     !........0.@"...
1a003080:	0000000e 400c4000 00000023 0000000f     .....@.@#.......
1a003090:	00000a0d 7778797a 73747576 6f707172     ....zyxwvutsrqpo
1a0030a0:	6b6c6d6e 6768696a 63646566 38396162     nmlkjihgfedcba98
1a0030b0:	34353637 30313233 34333231 38373635     7654321012345678
1a0030c0:	63626139 67666564 6b6a6968 6f6e6d6c     9abcdefghijklmno
1a0030d0:	73727170 77767574 007a7978 33323130     pqrstuvwxyz.0123
1a0030e0:	37363534 42413938 46454443 00000000     456789ABCDEF....

1a0030f0 <gpioPinsConfig>:
1a0030f0:	02000104 00050701 05010d03 04080100     ................
1a003100:	02020002 02000304 00000403 04070002     ................
1a003110:	030c0300 09050402 05040103 04030208     ................
1a003120:	04020305 06040504 0802000c 03000b06     ................
1a003130:	00090607 07060503 060f0504 03030004     ................
1a003140:	02000404 00050404 06040502 04060200     ................
1a003150:	0c050408 05040a04 0003010e 14010a00     ................
1a003160:	010f0000 0d000012 00001101 0010010c     ................
1a003170:	07070300 000f0300 01000001 00000000     ................
1a003180:	000a0600 08060603 06100504 04030005     ................
1a003190:	03000106 04090400 04010d05 010b0000     ................
1a0031a0:	0200000f 00000001 00010104 02010800     ................
1a0031b0:	01090000 09010006 05040002 04010200     ................
1a0031c0:	02020105 02020504 0e00000a 01000b02     ................
1a0031d0:	000c020b 00040c01 04000200 01020001     ................
1a0031e0:	02000204 00030402 03070302 070b0300     ................
1a0031f0:	0c030004 03000507 0006070d 01020e03     ................
1a003200:	04010504 06020006 02000504 00040405     ................
1a003210:	08040402 040c0504 0d050409 05040a04     ................
1a003220:	0005010e 00000801                       ........

1a003228 <gpioLEDBits>:
1a003228:	0b010e00 00050c01 02050105 12376000     .............`7.
1a003238:	00005634                                4V..

1a00323c <OscRateIn>:
1a00323c:	00b71b00                                ....

1a003240 <ExtRateIn>:
1a003240:	00000000                                ....

1a003244 <pinmuxing>:
1a003244:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a003254:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a003264:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a003274:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a003284:	00f71001 00f31101 00b31201 00f01301     ................
1a003294:	00b31401 00b60707 00f20000 00b60100     ................

1a0032a4 <InitClkStates>:
1a0032a4:	00010308 00010307 01010f01              ............

1a0032b0 <UART_PClock>:
1a0032b0:	00820081 00a200a1                       ........

1a0032b8 <UART_BClock>:
1a0032b8:	01a201c2 01620182                       ......b.

1a0032c0 <usbPLLSetup>:
1a0032c0:	0000601d 06167ffa 00000000 00000000     .`..............
1a0032d0:	1c9c3800                                .8..

1a0032d4 <periph_to_base>:
1a0032d4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0032e4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0032f4:	000100e0 01000100 01200003 00060120     .......... . ...
1a003304:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003314:	01820013 00120182 01a201a2 01c20011     ................
1a003324:	001001c2 01e201e2 0202000f 000e0202     ................
1a003334:	02220222 0223000d 001c0223 08040201     "."...#.#.......
1a003344:	0f0f0f03 000000ff                       ........

1a00334c <InitClkStates>:
1a00334c:	00010100 00010909 0001090a 01010701     ................
1a00335c:	00010902 00010906 0101090c 0001090d     ................
1a00336c:	0001090e 0001090f 00010910 00010911     ................
1a00337c:	00010912 00010913 00011114 00011119     ................
1a00338c:	0001111a 0001111b                       ........
